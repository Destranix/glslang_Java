/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class Java_Main */

#ifndef _Included_Java_Main
#define _Included_Java_Main
#ifdef __cplusplus
extern "C" {
#endif
#undef Java_Main_E_SH_LANG_VERTEX
#define Java_Main_E_SH_LANG_VERTEX 0L
#undef Java_Main_E_SH_LANG_TESS_CONTROL
#define Java_Main_E_SH_LANG_TESS_CONTROL 1L
#undef Java_Main_E_SH_LANG_TESS_EVALUATION
#define Java_Main_E_SH_LANG_TESS_EVALUATION 2L
#undef Java_Main_E_SH_LANG_GEOMETRY
#define Java_Main_E_SH_LANG_GEOMETRY 3L
#undef Java_Main_E_SH_LANG_FRAGMENT
#define Java_Main_E_SH_LANG_FRAGMENT 4L
#undef Java_Main_E_SH_LANG_COMPUTE
#define Java_Main_E_SH_LANG_COMPUTE 5L
#undef Java_Main_E_SH_LANG_RAY_GEN
#define Java_Main_E_SH_LANG_RAY_GEN 6L
#undef Java_Main_E_SH_LANG_INTERSECT
#define Java_Main_E_SH_LANG_INTERSECT 7L
#undef Java_Main_E_SH_LANG_ANY_HIT
#define Java_Main_E_SH_LANG_ANY_HIT 8L
#undef Java_Main_E_SH_LANG_CLOSEST_HIT
#define Java_Main_E_SH_LANG_CLOSEST_HIT 9L
#undef Java_Main_E_SH_LANG_MISS
#define Java_Main_E_SH_LANG_MISS 10L
#undef Java_Main_E_SH_LANG_CALLABLE
#define Java_Main_E_SH_LANG_CALLABLE 11L
#undef Java_Main_E_SH_LANG_TASK_NV
#define Java_Main_E_SH_LANG_TASK_NV 12L
#undef Java_Main_E_SH_LANG_MESH_NV
#define Java_Main_E_SH_LANG_MESH_NV 13L
#undef Java_Main_E_SH_LANG_VERTEX_MASK
#define Java_Main_E_SH_LANG_VERTEX_MASK 1L
#undef Java_Main_E_SH_LANG_TESS_CONTROL_MASK
#define Java_Main_E_SH_LANG_TESS_CONTROL_MASK 2L
#undef Java_Main_E_SH_LANG_TESS_EVALUATION_MASK
#define Java_Main_E_SH_LANG_TESS_EVALUATION_MASK 4L
#undef Java_Main_E_SH_LANG_GEOMETRY_MASK
#define Java_Main_E_SH_LANG_GEOMETRY_MASK 8L
#undef Java_Main_E_SH_LANG_FRAGMENT_MASK
#define Java_Main_E_SH_LANG_FRAGMENT_MASK 16L
#undef Java_Main_E_SH_LANG_COMPUTE_MASK
#define Java_Main_E_SH_LANG_COMPUTE_MASK 32L
#undef Java_Main_E_SH_LANG_RAY_GEN_MASK
#define Java_Main_E_SH_LANG_RAY_GEN_MASK 64L
#undef Java_Main_E_SH_LANG_INTERSECT_MASK
#define Java_Main_E_SH_LANG_INTERSECT_MASK 128L
#undef Java_Main_E_SH_LANG_ANY_HIT_MASK
#define Java_Main_E_SH_LANG_ANY_HIT_MASK 256L
#undef Java_Main_E_SH_LANG_CLOSEST_HIT_MASK
#define Java_Main_E_SH_LANG_CLOSEST_HIT_MASK 512L
#undef Java_Main_E_SH_LANG_MISS_MASK
#define Java_Main_E_SH_LANG_MISS_MASK 1024L
#undef Java_Main_E_SH_LANG_CALLABLE_MASK
#define Java_Main_E_SH_LANG_CALLABLE_MASK 2048L
#undef Java_Main_E_SH_LANG_TASK_NV_MASK
#define Java_Main_E_SH_LANG_TASK_NV_MASK 4096L
#undef Java_Main_E_SH_LANG_MESH_NV_MASK
#define Java_Main_E_SH_LANG_MESH_NV_MASK 8192L
#undef Java_Main_E_SH_SOURCE_NONE
#define Java_Main_E_SH_SOURCE_NONE 0L
#undef Java_Main_E_SH_SOURCE_GLSL
#define Java_Main_E_SH_SOURCE_GLSL 1L
#undef Java_Main_E_SH_SOURCE_HLSL
#define Java_Main_E_SH_SOURCE_HLSL 2L
#undef Java_Main_E_SH_CLIENT_NONE
#define Java_Main_E_SH_CLIENT_NONE 0L
#undef Java_Main_E_SH_CLIENT_VULKAN
#define Java_Main_E_SH_CLIENT_VULKAN 1L
#undef Java_Main_E_SH_CLIENT_OPENGL
#define Java_Main_E_SH_CLIENT_OPENGL 2L
#undef Java_Main_E_SH_TARGET_NONE
#define Java_Main_E_SH_TARGET_NONE 0L
#undef Java_Main_E_SH_TARGET_SPV
#define Java_Main_E_SH_TARGET_SPV 1L
#undef Java_Main_E_SH_TARGET_VULKAN_1_0
#define Java_Main_E_SH_TARGET_VULKAN_1_0 4194304L
#undef Java_Main_E_SH_TARGET_VULKAN_1_1
#define Java_Main_E_SH_TARGET_VULKAN_1_1 4198400L
#undef Java_Main_E_SH_TARGET_VULKAN_1_2
#define Java_Main_E_SH_TARGET_VULKAN_1_2 4202496L
#undef Java_Main_E_SH_TARGET_OPENGL_450
#define Java_Main_E_SH_TARGET_OPENGL_450 450L
#undef Java_Main_E_SH_TARGET_SPV_1_0
#define Java_Main_E_SH_TARGET_SPV_1_0 65536L
#undef Java_Main_E_SH_TARGET_SPV_1_1
#define Java_Main_E_SH_TARGET_SPV_1_1 65792L
#undef Java_Main_E_SH_TARGET_SPV_1_2
#define Java_Main_E_SH_TARGET_SPV_1_2 66048L
#undef Java_Main_E_SH_TARGET_SPV_1_3
#define Java_Main_E_SH_TARGET_SPV_1_3 66304L
#undef Java_Main_E_SH_TARGET_SPV_1_4
#define Java_Main_E_SH_TARGET_SPV_1_4 66560L
#undef Java_Main_E_SH_TARGET_SPV_1_5
#define Java_Main_E_SH_TARGET_SPV_1_5 66816L
#undef Java_Main_SPV_1_0
#define Java_Main_SPV_1_0 65536L
#undef Java_Main_SPV_1_1
#define Java_Main_SPV_1_1 65792L
#undef Java_Main_SPV_1_2
#define Java_Main_SPV_1_2 66048L
#undef Java_Main_SPV_1_3
#define Java_Main_SPV_1_3 66304L
#undef Java_Main_SPV_1_4
#define Java_Main_SPV_1_4 66560L
#undef Java_Main_SPV_1_5
#define Java_Main_SPV_1_5 66816L
#undef Java_Main_E_SH_EX_VERTEX_FRAGMENT
#define Java_Main_E_SH_EX_VERTEX_FRAGMENT 0L
#undef Java_Main_E_SH_EX_FRAGMENT
#define Java_Main_E_SH_EX_FRAGMENT 1L
#undef Java_Main_E_SH_OPT_NO_GENERATION
#define Java_Main_E_SH_OPT_NO_GENERATION 0L
#undef Java_Main_E_SH_OPT_NONE
#define Java_Main_E_SH_OPT_NONE 1L
#undef Java_Main_E_SH_OPT_SIMPLE
#define Java_Main_E_SH_OPT_SIMPLE 2L
#undef Java_Main_E_SH_OPT_FULL
#define Java_Main_E_SH_OPT_FULL 3L
#undef Java_Main_E_SH_TES_SAMP_TRANS_KEEP
#define Java_Main_E_SH_TES_SAMP_TRANS_KEEP 0L
#undef Java_Main_E_SH_TEX_SAMP_TRANS_UPGRADE_TEXTURE_REMOVE_SAMPLER
#define Java_Main_E_SH_TEX_SAMP_TRANS_UPGRADE_TEXTURE_REMOVE_SAMPLER 1L
#undef Java_Main_E_SH_MSG_DEFAULT
#define Java_Main_E_SH_MSG_DEFAULT 0L
#undef Java_Main_E_SH_MSG_RELAXED_ERRORS
#define Java_Main_E_SH_MSG_RELAXED_ERRORS 1L
#undef Java_Main_E_SH_MSG_SUPRESS_WARNINGS
#define Java_Main_E_SH_MSG_SUPRESS_WARNINGS 2L
#undef Java_Main_E_SH_MSG_AST
#define Java_Main_E_SH_MSG_AST 4L
#undef Java_Main_E_SH_MSG_SPV_RULES
#define Java_Main_E_SH_MSG_SPV_RULES 8L
#undef Java_Main_E_SH_MSG_VULKAN_RULES
#define Java_Main_E_SH_MSG_VULKAN_RULES 16L
#undef Java_Main_E_SH_MSG_ONLY_PREPROCESSOR
#define Java_Main_E_SH_MSG_ONLY_PREPROCESSOR 32L
#undef Java_Main_E_SH_MSG_READ_HLSL
#define Java_Main_E_SH_MSG_READ_HLSL 64L
#undef Java_Main_E_SH_MSG_CASCADING_ERRORS
#define Java_Main_E_SH_MSG_CASCADING_ERRORS 128L
#undef Java_Main_E_SH_MSG_KEEP_UNCALLED
#define Java_Main_E_SH_MSG_KEEP_UNCALLED 256L
#undef Java_Main_E_SH_MSG_HLSL_OFFSETS
#define Java_Main_E_SH_MSG_HLSL_OFFSETS 512L
#undef Java_Main_E_SH_MSG_DEBUG_INFO
#define Java_Main_E_SH_MSG_DEBUG_INFO 1024L
#undef Java_Main_E_SH_MSG_HLSL_ENABLE_16BIT_TYPES
#define Java_Main_E_SH_MSG_HLSL_ENABLE_16BIT_TYPES 2048L
#undef Java_Main_E_SH_MSG_HLSL_LEGALIZATION
#define Java_Main_E_SH_MSG_HLSL_LEGALIZATION 4096L
#undef Java_Main_E_SH_MSG_HLSL_DX9_COMPATIBLE
#define Java_Main_E_SH_MSG_HLSL_DX9_COMPATIBLE 8192L
#undef Java_Main_E_SH_MSG_BUITLIN_SYMBOL_TABLE
#define Java_Main_E_SH_MSG_BUITLIN_SYMBOL_TABLE 16384L
#undef Java_Main_E_SH_REFLECTION_DEFAULT
#define Java_Main_E_SH_REFLECTION_DEFAULT 0L
#undef Java_Main_E_SH_REFLECTION_STRICT_ARRAY_SUFFIX
#define Java_Main_E_SH_REFLECTION_STRICT_ARRAY_SUFFIX 1L
#undef Java_Main_E_SH_REFLECTION_BASIC_ARRAY_SUFFIX
#define Java_Main_E_SH_REFLECTION_BASIC_ARRAY_SUFFIX 2L
#undef Java_Main_E_SH_REFLECTION_INTERMEDIATE_IO
#define Java_Main_E_SH_REFLECTION_INTERMEDIATE_IO 4L
#undef Java_Main_E_SH_REFLECTION_SEPARATE_BUFFERS
#define Java_Main_E_SH_REFLECTION_SEPARATE_BUFFERS 8L
#undef Java_Main_E_SH_REFLECTION_ALL_BLOCK_VARIABLES
#define Java_Main_E_SH_REFLECTION_ALL_BLOCK_VARIABLES 16L
#undef Java_Main_E_SH_REFLECTION_UNWRAP_IO_BLOCKS
#define Java_Main_E_SH_REFLECTION_UNWRAP_IO_BLOCKS 32L
#undef Java_Main_E_SH_REFLECTION_ALL_IO_VARIABLES
#define Java_Main_E_SH_REFLECTION_ALL_IO_VARIABLES 64L
#undef Java_Main_E_SH_REFLECTION_SHARED_STD_1400_SSBO
#define Java_Main_E_SH_REFLECTION_SHARED_STD_1400_SSBO 128L
#undef Java_Main_E_SH_REFLECTION_SHARED_STD_1400_UBO
#define Java_Main_E_SH_REFLECTION_SHARED_STD_1400_UBO 256L
#undef Java_Main_E_RES_SAMPLER
#define Java_Main_E_RES_SAMPLER 0L
#undef Java_Main_E_RES_TEXTURE
#define Java_Main_E_RES_TEXTURE 1L
#undef Java_Main_E_RES_IMAGE
#define Java_Main_E_RES_IMAGE 2L
#undef Java_Main_E_RES_UBO
#define Java_Main_E_RES_UBO 3L
#undef Java_Main_E_RES_SSBO
#define Java_Main_E_RES_SSBO 4L
#undef Java_Main_E_RES_UAV
#define Java_Main_E_RES_UAV 5L
#undef Java_Main_E_BAD_PROFILE
#define Java_Main_E_BAD_PROFILE 0L
#undef Java_Main_E_NO_PROFILE
#define Java_Main_E_NO_PROFILE 1L
#undef Java_Main_E_CORE_PROFILE
#define Java_Main_E_CORE_PROFILE 2L
#undef Java_Main_E_COMPATIBILITY_PROFILE
#define Java_Main_E_COMPATIBILITY_PROFILE 4L
#undef Java_Main_E_ES_PROFILE
#define Java_Main_E_ES_PROFILE 8L
#undef Java_Main_EBT_VOID
#define Java_Main_EBT_VOID 0L
#undef Java_Main_EBT_FLOAT
#define Java_Main_EBT_FLOAT 1L
#undef Java_Main_EBT_DOUBLE
#define Java_Main_EBT_DOUBLE 2L
#undef Java_Main_EPQ_NONE
#define Java_Main_EPQ_NONE 0L
#undef Java_Main_EPQ_LOW
#define Java_Main_EPQ_LOW 1L
#undef Java_Main_EPQ_MEDIUM
#define Java_Main_EPQ_MEDIUM 2L
#undef Java_Main_EPQ_HIGH
#define Java_Main_EPQ_HIGH 3L
#undef Java_Main_E_PREFIX_NONE
#define Java_Main_E_PREFIX_NONE 0L
#undef Java_Main_E_PREFIX_WARNING
#define Java_Main_E_PREFIX_WARNING 1L
#undef Java_Main_E_PREFIX_ERROR
#define Java_Main_E_PREFIX_ERROR 2L
#undef Java_Main_E_PREFIX_INTERNAL_ERROR
#define Java_Main_E_PREFIX_INTERNAL_ERROR 3L
#undef Java_Main_E_PREFIX_UNIMPLEMENTED
#define Java_Main_E_PREFIX_UNIMPLEMENTED 4L
#undef Java_Main_E_PREFIX_NOTE
#define Java_Main_E_PREFIX_NOTE 5L
#undef Java_Main_E_BH_MISSING
#define Java_Main_E_BH_MISSING 0L
#undef Java_Main_E_BH_REQUIRE
#define Java_Main_E_BH_REQUIRE 1L
#undef Java_Main_E_BH_ENABLE
#define Java_Main_E_BH_ENABLE 2L
#undef Java_Main_E_BH_WARN
#define Java_Main_E_BH_WARN 3L
#undef Java_Main_E_BH_DISABLE
#define Java_Main_E_BH_DISABLE 4L
#undef Java_Main_E_BH_DISABLE_PARTIAL
#define Java_Main_E_BH_DISABLE_PARTIAL 5L
#undef Java_Main_E_OP_NULL
#define Java_Main_E_OP_NULL 0L
#undef Java_Main_E_OP_SEQUENCE
#define Java_Main_E_OP_SEQUENCE 1L
#undef Java_Main_E_OP_LINKER_OBJECTS
#define Java_Main_E_OP_LINKER_OBJECTS 2L
#undef Java_Main_E_OP_FUNCTION_CALL
#define Java_Main_E_OP_FUNCTION_CALL 3L
#undef Java_Main_E_OP_FUNCTION
#define Java_Main_E_OP_FUNCTION 4L
#undef Java_Main_E_OP_PARAMETERS
#define Java_Main_E_OP_PARAMETERS 5L
#undef Java_Main_E_OP_NEGATIVE
#define Java_Main_E_OP_NEGATIVE 6L
#undef Java_Main_E_OP_LOGICAL_NOT
#define Java_Main_E_OP_LOGICAL_NOT 7L
#undef Java_Main_E_OP_VECTOR_LOGICAL_NOT
#define Java_Main_E_OP_VECTOR_LOGICAL_NOT 8L
#undef Java_Main_E_OP_BITWISE_NOT
#define Java_Main_E_OP_BITWISE_NOT 9L
#undef Java_Main_E_OP_POST_INCREMENT
#define Java_Main_E_OP_POST_INCREMENT 10L
#undef Java_Main_E_OP_POST_DECREMENT
#define Java_Main_E_OP_POST_DECREMENT 11L
#undef Java_Main_E_OP_PRE_INCREMENT
#define Java_Main_E_OP_PRE_INCREMENT 12L
#undef Java_Main_E_OP_PRE_DECREMENT
#define Java_Main_E_OP_PRE_DECREMENT 13L
#undef Java_Main_E_OP_COPY_OBJECT
#define Java_Main_E_OP_COPY_OBJECT 14L
#undef Java_Main_E_OP_CONV_INT8_TO_BOOL
#define Java_Main_E_OP_CONV_INT8_TO_BOOL 15L
#undef Java_Main_E_OP_CONV_UINT8_TO_BOOL
#define Java_Main_E_OP_CONV_UINT8_TO_BOOL 16L
#undef Java_Main_E_OP_CONV_INT16_TO_BOOL
#define Java_Main_E_OP_CONV_INT16_TO_BOOL 17L
#undef Java_Main_E_OP_CONV_UINT16_TO_BOOL
#define Java_Main_E_OP_CONV_UINT16_TO_BOOL 18L
#undef Java_Main_E_OP_CONV_INT_TO_BOOL
#define Java_Main_E_OP_CONV_INT_TO_BOOL 19L
#undef Java_Main_E_OP_CONV_UINT_TO_BOOL
#define Java_Main_E_OP_CONV_UINT_TO_BOOL 20L
#undef Java_Main_E_OP_CONV_INT64_TO_BOOL
#define Java_Main_E_OP_CONV_INT64_TO_BOOL 21L
#undef Java_Main_E_OP_CONV_UINT64_TO_BOOL
#define Java_Main_E_OP_CONV_UINT64_TO_BOOL 22L
#undef Java_Main_E_OP_CONV_FLOAT16_TO_BOOL
#define Java_Main_E_OP_CONV_FLOAT16_TO_BOOL 23L
#undef Java_Main_E_OP_CONV_FLOAT_TO_BOOL
#define Java_Main_E_OP_CONV_FLOAT_TO_BOOL 24L
#undef Java_Main_E_OP_CONV_DOUBLE_TO_BOOL
#define Java_Main_E_OP_CONV_DOUBLE_TO_BOOL 25L
#undef Java_Main_E_OP_CONV_BOOL_TO_INT8
#define Java_Main_E_OP_CONV_BOOL_TO_INT8 26L
#undef Java_Main_E_OP_CONV_BOOL_TO_UINT8
#define Java_Main_E_OP_CONV_BOOL_TO_UINT8 27L
#undef Java_Main_E_OP_CONV_BOOL_TO_INT16
#define Java_Main_E_OP_CONV_BOOL_TO_INT16 28L
#undef Java_Main_E_OP_CONV_BOOL_TO_UINT16
#define Java_Main_E_OP_CONV_BOOL_TO_UINT16 29L
#undef Java_Main_E_OP_CONV_BOOL_TO_INT
#define Java_Main_E_OP_CONV_BOOL_TO_INT 30L
#undef Java_Main_E_OP_CONV_BOOL_TO_UINT
#define Java_Main_E_OP_CONV_BOOL_TO_UINT 31L
#undef Java_Main_E_OP_CONV_BOOL_TO_INT64
#define Java_Main_E_OP_CONV_BOOL_TO_INT64 32L
#undef Java_Main_E_OP_CONV_BOOL_TO_UINT64
#define Java_Main_E_OP_CONV_BOOL_TO_UINT64 33L
#undef Java_Main_E_OP_CONV_BOOL_TO_FLOAT16
#define Java_Main_E_OP_CONV_BOOL_TO_FLOAT16 34L
#undef Java_Main_E_OP_CONV_BOOL_TO_FLOAT
#define Java_Main_E_OP_CONV_BOOL_TO_FLOAT 35L
#undef Java_Main_E_OP_CONV_BOOL_TO_DOUBLE
#define Java_Main_E_OP_CONV_BOOL_TO_DOUBLE 36L
#undef Java_Main_E_OP_CONV_INT8_TO_INT16
#define Java_Main_E_OP_CONV_INT8_TO_INT16 37L
#undef Java_Main_E_OP_CONV_INT8_TO_INT
#define Java_Main_E_OP_CONV_INT8_TO_INT 38L
#undef Java_Main_E_OP_CONV_INT8_TO_INT64
#define Java_Main_E_OP_CONV_INT8_TO_INT64 39L
#undef Java_Main_E_OP_CONV_INT8_TO_UINT8
#define Java_Main_E_OP_CONV_INT8_TO_UINT8 40L
#undef Java_Main_E_OP_CONV_INT8_TO_UINT16
#define Java_Main_E_OP_CONV_INT8_TO_UINT16 41L
#undef Java_Main_E_OP_CONV_INT8_TO_UINT
#define Java_Main_E_OP_CONV_INT8_TO_UINT 42L
#undef Java_Main_E_OP_CONV_INT8_TO_UINT64
#define Java_Main_E_OP_CONV_INT8_TO_UINT64 43L
#undef Java_Main_E_OP_CONV_UINT8_TO_INT8
#define Java_Main_E_OP_CONV_UINT8_TO_INT8 44L
#undef Java_Main_E_OP_CONV_UINT8_TO_INT16
#define Java_Main_E_OP_CONV_UINT8_TO_INT16 45L
#undef Java_Main_E_OP_CONV_UINT8_TO_INT
#define Java_Main_E_OP_CONV_UINT8_TO_INT 46L
#undef Java_Main_E_OP_CONV_UINT8_TO_INT64
#define Java_Main_E_OP_CONV_UINT8_TO_INT64 47L
#undef Java_Main_E_OP_CONV_UINT8_TO_UINT16
#define Java_Main_E_OP_CONV_UINT8_TO_UINT16 48L
#undef Java_Main_E_OP_CONV_UINT8_TO_UINT
#define Java_Main_E_OP_CONV_UINT8_TO_UINT 49L
#undef Java_Main_E_OP_CONV_UINT8_TO_UINT64
#define Java_Main_E_OP_CONV_UINT8_TO_UINT64 50L
#undef Java_Main_E_OP_CONV_INT8_TO_FLOAT16
#define Java_Main_E_OP_CONV_INT8_TO_FLOAT16 51L
#undef Java_Main_E_OP_CONV_INT8_TO_FLOAT
#define Java_Main_E_OP_CONV_INT8_TO_FLOAT 52L
#undef Java_Main_E_OP_CONV_INT8_TO_DOUBLE
#define Java_Main_E_OP_CONV_INT8_TO_DOUBLE 53L
#undef Java_Main_E_OP_CONV_UINT8_TO_FLOAT16
#define Java_Main_E_OP_CONV_UINT8_TO_FLOAT16 54L
#undef Java_Main_E_OP_CONV_UINT8_TO_FLOAT
#define Java_Main_E_OP_CONV_UINT8_TO_FLOAT 55L
#undef Java_Main_E_OP_CONV_UINT8_TO_DOUBLE
#define Java_Main_E_OP_CONV_UINT8_TO_DOUBLE 56L
#undef Java_Main_E_OP_CONV_INT16_TO_INT8
#define Java_Main_E_OP_CONV_INT16_TO_INT8 57L
#undef Java_Main_E_OP_CONV_INT16_TO_INT
#define Java_Main_E_OP_CONV_INT16_TO_INT 58L
#undef Java_Main_E_OP_CONV_INT16_TO_INT64
#define Java_Main_E_OP_CONV_INT16_TO_INT64 59L
#undef Java_Main_E_OP_CONV_INT16_TO_UINT8
#define Java_Main_E_OP_CONV_INT16_TO_UINT8 60L
#undef Java_Main_E_OP_CONV_INT16_TO_UINT16
#define Java_Main_E_OP_CONV_INT16_TO_UINT16 61L
#undef Java_Main_E_OP_CONV_INT16_TO_UINT
#define Java_Main_E_OP_CONV_INT16_TO_UINT 62L
#undef Java_Main_E_OP_CONV_INT16_TO_UINT64
#define Java_Main_E_OP_CONV_INT16_TO_UINT64 63L
#undef Java_Main_E_OP_CONV_UINT16_TO_INT8
#define Java_Main_E_OP_CONV_UINT16_TO_INT8 64L
#undef Java_Main_E_OP_CONV_UINT16_TO_INT16
#define Java_Main_E_OP_CONV_UINT16_TO_INT16 65L
#undef Java_Main_E_OP_CONV_UINT16_TO_INT
#define Java_Main_E_OP_CONV_UINT16_TO_INT 66L
#undef Java_Main_E_OP_CONV_UINT16_TO_INT64
#define Java_Main_E_OP_CONV_UINT16_TO_INT64 67L
#undef Java_Main_E_OP_CONV_UINT16_TO_UINT8
#define Java_Main_E_OP_CONV_UINT16_TO_UINT8 68L
#undef Java_Main_E_OP_CONV_UINT16_TO_UINT
#define Java_Main_E_OP_CONV_UINT16_TO_UINT 69L
#undef Java_Main_E_OP_CONV_UINT16_TO_UINT64
#define Java_Main_E_OP_CONV_UINT16_TO_UINT64 70L
#undef Java_Main_E_OP_CONV_INT16_TO_FLOAT16
#define Java_Main_E_OP_CONV_INT16_TO_FLOAT16 71L
#undef Java_Main_E_OP_CONV_INT16_TO_FLOAT
#define Java_Main_E_OP_CONV_INT16_TO_FLOAT 72L
#undef Java_Main_E_OP_CONV_INT16_TO_DOUBLE
#define Java_Main_E_OP_CONV_INT16_TO_DOUBLE 73L
#undef Java_Main_E_OP_CONV_UINT16_TO_FLOAT16
#define Java_Main_E_OP_CONV_UINT16_TO_FLOAT16 74L
#undef Java_Main_E_OP_CONV_UINT16_TO_FLOAT
#define Java_Main_E_OP_CONV_UINT16_TO_FLOAT 75L
#undef Java_Main_E_OP_CONV_UINT16_TO_DOUBLE
#define Java_Main_E_OP_CONV_UINT16_TO_DOUBLE 76L
#undef Java_Main_E_OP_CONV_INT_TO_INT8
#define Java_Main_E_OP_CONV_INT_TO_INT8 77L
#undef Java_Main_E_OP_CONV_INT_TO_INT16
#define Java_Main_E_OP_CONV_INT_TO_INT16 78L
#undef Java_Main_E_OP_CONV_INT_TO_INT64
#define Java_Main_E_OP_CONV_INT_TO_INT64 79L
#undef Java_Main_E_OP_CONV_INT_TO_UINT8
#define Java_Main_E_OP_CONV_INT_TO_UINT8 80L
#undef Java_Main_E_OP_CONV_INT_TO_UINT16
#define Java_Main_E_OP_CONV_INT_TO_UINT16 81L
#undef Java_Main_E_OP_CONV_INT_TO_UINT
#define Java_Main_E_OP_CONV_INT_TO_UINT 82L
#undef Java_Main_E_OP_CONV_INT_TO_UINT64
#define Java_Main_E_OP_CONV_INT_TO_UINT64 83L
#undef Java_Main_E_OP_CONV_UINT_TO_INT8
#define Java_Main_E_OP_CONV_UINT_TO_INT8 84L
#undef Java_Main_E_OP_CONV_UINT_TO_INT16
#define Java_Main_E_OP_CONV_UINT_TO_INT16 85L
#undef Java_Main_E_OP_CONV_UINT_TO_INT
#define Java_Main_E_OP_CONV_UINT_TO_INT 86L
#undef Java_Main_E_OP_CONV_UINT_TO_INT64
#define Java_Main_E_OP_CONV_UINT_TO_INT64 87L
#undef Java_Main_E_OP_CONV_UINT_TO_UINT8
#define Java_Main_E_OP_CONV_UINT_TO_UINT8 88L
#undef Java_Main_E_OP_CONV_UINT_TO_UINT16
#define Java_Main_E_OP_CONV_UINT_TO_UINT16 89L
#undef Java_Main_E_OP_CONV_UINT_TO_UINT64
#define Java_Main_E_OP_CONV_UINT_TO_UINT64 90L
#undef Java_Main_E_OP_CONV_INT_TO_FLOAT16
#define Java_Main_E_OP_CONV_INT_TO_FLOAT16 91L
#undef Java_Main_E_OP_CONV_INT_TO_FLOAT
#define Java_Main_E_OP_CONV_INT_TO_FLOAT 92L
#undef Java_Main_E_OP_CONV_INT_TO_DOUBLE
#define Java_Main_E_OP_CONV_INT_TO_DOUBLE 93L
#undef Java_Main_E_OP_CONV_UINT_TO_FLOAT16
#define Java_Main_E_OP_CONV_UINT_TO_FLOAT16 94L
#undef Java_Main_E_OP_CONV_UINT_TO_FLOAT
#define Java_Main_E_OP_CONV_UINT_TO_FLOAT 95L
#undef Java_Main_E_OP_CONV_UINT_TO_DOUBLE
#define Java_Main_E_OP_CONV_UINT_TO_DOUBLE 96L
#undef Java_Main_E_OP_CONV_INT64_TO_INT8
#define Java_Main_E_OP_CONV_INT64_TO_INT8 97L
#undef Java_Main_E_OP_CONV_INT64_TO_INT16
#define Java_Main_E_OP_CONV_INT64_TO_INT16 98L
#undef Java_Main_E_OP_CONV_INT64_TO_INT
#define Java_Main_E_OP_CONV_INT64_TO_INT 99L
#undef Java_Main_E_OP_CONV_INT64_TO_UINT8
#define Java_Main_E_OP_CONV_INT64_TO_UINT8 100L
#undef Java_Main_E_OP_CONV_INT64_TO_UINT16
#define Java_Main_E_OP_CONV_INT64_TO_UINT16 101L
#undef Java_Main_E_OP_CONV_INT64_TO_UINT
#define Java_Main_E_OP_CONV_INT64_TO_UINT 102L
#undef Java_Main_E_OP_CONV_INT64_TO_UINT64
#define Java_Main_E_OP_CONV_INT64_TO_UINT64 103L
#undef Java_Main_E_OP_CONV_UINT64_TO_INT8
#define Java_Main_E_OP_CONV_UINT64_TO_INT8 104L
#undef Java_Main_E_OP_CONV_UINT64_TO_INT16
#define Java_Main_E_OP_CONV_UINT64_TO_INT16 105L
#undef Java_Main_E_OP_CONV_UINT64_TO_INT
#define Java_Main_E_OP_CONV_UINT64_TO_INT 106L
#undef Java_Main_E_OP_CONV_UINT64_TO_INT64
#define Java_Main_E_OP_CONV_UINT64_TO_INT64 107L
#undef Java_Main_E_OP_CONV_UINT64_TO_UINT8
#define Java_Main_E_OP_CONV_UINT64_TO_UINT8 108L
#undef Java_Main_E_OP_CONV_UINT64_TO_UINT16
#define Java_Main_E_OP_CONV_UINT64_TO_UINT16 109L
#undef Java_Main_E_OP_CONV_UINT64_TO_UINT
#define Java_Main_E_OP_CONV_UINT64_TO_UINT 110L
#undef Java_Main_E_OP_CONV_INT64_TO_FLOAT16
#define Java_Main_E_OP_CONV_INT64_TO_FLOAT16 111L
#undef Java_Main_E_OP_CONV_INT64_TO_FLOAT
#define Java_Main_E_OP_CONV_INT64_TO_FLOAT 112L
#undef Java_Main_E_OP_CONV_INT64_TO_DOUBLE
#define Java_Main_E_OP_CONV_INT64_TO_DOUBLE 113L
#undef Java_Main_E_OP_CONV_UINT64_TO_FLOAT16
#define Java_Main_E_OP_CONV_UINT64_TO_FLOAT16 114L
#undef Java_Main_E_OP_CONV_UINT64_TO_FLOAT
#define Java_Main_E_OP_CONV_UINT64_TO_FLOAT 115L
#undef Java_Main_E_OP_CONV_UINT64_TO_DOUBLE
#define Java_Main_E_OP_CONV_UINT64_TO_DOUBLE 116L
#undef Java_Main_E_OP_CONV_FLOAT16_TO_INT8
#define Java_Main_E_OP_CONV_FLOAT16_TO_INT8 117L
#undef Java_Main_E_OP_CONV_FLOAT16_TO_INT16
#define Java_Main_E_OP_CONV_FLOAT16_TO_INT16 118L
#undef Java_Main_E_OP_CONV_FLOAT16_TO_INT
#define Java_Main_E_OP_CONV_FLOAT16_TO_INT 119L
#undef Java_Main_E_OP_CONV_FLOAT16_TO_INT64
#define Java_Main_E_OP_CONV_FLOAT16_TO_INT64 120L
#undef Java_Main_E_OP_CONV_FLOAT16_TO_UINT8
#define Java_Main_E_OP_CONV_FLOAT16_TO_UINT8 121L
#undef Java_Main_E_OP_CONV_FLOAT16_TO_UINT16
#define Java_Main_E_OP_CONV_FLOAT16_TO_UINT16 122L
#undef Java_Main_E_OP_CONV_FLOAT16_TO_UINT
#define Java_Main_E_OP_CONV_FLOAT16_TO_UINT 123L
#undef Java_Main_E_OP_CONV_FLOAT16_TO_UINT64
#define Java_Main_E_OP_CONV_FLOAT16_TO_UINT64 124L
#undef Java_Main_E_OP_CONV_FLOAT16_TO_FLOAT
#define Java_Main_E_OP_CONV_FLOAT16_TO_FLOAT 125L
#undef Java_Main_E_OP_CONV_FLOAT16_TO_DOUBLE
#define Java_Main_E_OP_CONV_FLOAT16_TO_DOUBLE 126L
#undef Java_Main_E_OP_CONV_FLOAT_TO_INT8
#define Java_Main_E_OP_CONV_FLOAT_TO_INT8 127L
#undef Java_Main_E_OP_CONV_FLOAT_TO_INT16
#define Java_Main_E_OP_CONV_FLOAT_TO_INT16 128L
#undef Java_Main_E_OP_CONV_FLOAT_TO_INT
#define Java_Main_E_OP_CONV_FLOAT_TO_INT 129L
#undef Java_Main_E_OP_CONV_FLOAT_TO_INT64
#define Java_Main_E_OP_CONV_FLOAT_TO_INT64 130L
#undef Java_Main_E_OP_CONV_FLOAT_TO_UINT8
#define Java_Main_E_OP_CONV_FLOAT_TO_UINT8 131L
#undef Java_Main_E_OP_CONV_FLOAT_TO_UINT16
#define Java_Main_E_OP_CONV_FLOAT_TO_UINT16 132L
#undef Java_Main_E_OP_CONV_FLOAT_TO_UINT
#define Java_Main_E_OP_CONV_FLOAT_TO_UINT 133L
#undef Java_Main_E_OP_CONV_FLOAT_TO_UINT64
#define Java_Main_E_OP_CONV_FLOAT_TO_UINT64 134L
#undef Java_Main_E_OP_CONV_FLOAT_TO_FLOAT16
#define Java_Main_E_OP_CONV_FLOAT_TO_FLOAT16 135L
#undef Java_Main_E_OP_CONV_FLOAT_TO_DOUBLE
#define Java_Main_E_OP_CONV_FLOAT_TO_DOUBLE 136L
#undef Java_Main_E_OP_CONV_DOUBLE_TO_INT8
#define Java_Main_E_OP_CONV_DOUBLE_TO_INT8 137L
#undef Java_Main_E_OP_CONV_DOUBLE_TO_INT16
#define Java_Main_E_OP_CONV_DOUBLE_TO_INT16 138L
#undef Java_Main_E_OP_CONV_DOUBLE_TO_INT
#define Java_Main_E_OP_CONV_DOUBLE_TO_INT 139L
#undef Java_Main_E_OP_CONV_DOUBLE_TO_INT64
#define Java_Main_E_OP_CONV_DOUBLE_TO_INT64 140L
#undef Java_Main_E_OP_CONV_DOUBLE_TO_UINT8
#define Java_Main_E_OP_CONV_DOUBLE_TO_UINT8 141L
#undef Java_Main_E_OP_CONV_DOUBLE_TO_UINT16
#define Java_Main_E_OP_CONV_DOUBLE_TO_UINT16 142L
#undef Java_Main_E_OP_CONV_DOUBLE_TO_UINT
#define Java_Main_E_OP_CONV_DOUBLE_TO_UINT 143L
#undef Java_Main_E_OP_CONV_DOUBLE_TO_UINT64
#define Java_Main_E_OP_CONV_DOUBLE_TO_UINT64 144L
#undef Java_Main_E_OP_CONV_DOUBLE_TO_FLOAT16
#define Java_Main_E_OP_CONV_DOUBLE_TO_FLOAT16 145L
#undef Java_Main_E_OP_CONV_DOUBLE_TO_FLOAT
#define Java_Main_E_OP_CONV_DOUBLE_TO_FLOAT 146L
#undef Java_Main_E_OP_CONV_UINT64_TO_PTR
#define Java_Main_E_OP_CONV_UINT64_TO_PTR 147L
#undef Java_Main_E_OP_CONV_PTR_TO_UINT64
#define Java_Main_E_OP_CONV_PTR_TO_UINT64 148L
#undef Java_Main_E_OP_CONV_UVEC2_TO_PTR
#define Java_Main_E_OP_CONV_UVEC2_TO_PTR 149L
#undef Java_Main_E_OP_CONV_PTR_TO_UVEC2
#define Java_Main_E_OP_CONV_PTR_TO_UVEC2 150L
#undef Java_Main_E_OP_ADD
#define Java_Main_E_OP_ADD 151L
#undef Java_Main_E_OP_SUB
#define Java_Main_E_OP_SUB 152L
#undef Java_Main_E_OP_MUL
#define Java_Main_E_OP_MUL 153L
#undef Java_Main_E_OP_DIV
#define Java_Main_E_OP_DIV 154L
#undef Java_Main_E_OP_MOD
#define Java_Main_E_OP_MOD 155L
#undef Java_Main_E_OP_RIGHT_SHIFT
#define Java_Main_E_OP_RIGHT_SHIFT 156L
#undef Java_Main_E_OP_LEFT_SHIFT
#define Java_Main_E_OP_LEFT_SHIFT 157L
#undef Java_Main_E_OP_AND
#define Java_Main_E_OP_AND 158L
#undef Java_Main_E_OP_INCLUSIVE_OR
#define Java_Main_E_OP_INCLUSIVE_OR 159L
#undef Java_Main_E_OP_EXCLUSIVE_OR
#define Java_Main_E_OP_EXCLUSIVE_OR 160L
#undef Java_Main_E_OP_EQUAL
#define Java_Main_E_OP_EQUAL 161L
#undef Java_Main_E_OP_NOT_EQUAL
#define Java_Main_E_OP_NOT_EQUAL 162L
#undef Java_Main_E_OP_VECTOR_EQUAL
#define Java_Main_E_OP_VECTOR_EQUAL 163L
#undef Java_Main_E_OP_VECTOR_NOT_EQUAL
#define Java_Main_E_OP_VECTOR_NOT_EQUAL 164L
#undef Java_Main_E_OP_LESS_THAN
#define Java_Main_E_OP_LESS_THAN 165L
#undef Java_Main_E_OP_GREATER_THAN
#define Java_Main_E_OP_GREATER_THAN 166L
#undef Java_Main_E_OP_LESS_THAN_EQUAL
#define Java_Main_E_OP_LESS_THAN_EQUAL 167L
#undef Java_Main_E_OP_GREATER_THAN_EQUAL
#define Java_Main_E_OP_GREATER_THAN_EQUAL 168L
#undef Java_Main_E_OP_COMMA
#define Java_Main_E_OP_COMMA 169L
#undef Java_Main_E_OP_VECTOR_TIMES_SCALAR
#define Java_Main_E_OP_VECTOR_TIMES_SCALAR 170L
#undef Java_Main_E_OP_VECTOR_TIMES_MATRIX
#define Java_Main_E_OP_VECTOR_TIMES_MATRIX 171L
#undef Java_Main_E_OP_MATRIX_TIMES_VECTOR
#define Java_Main_E_OP_MATRIX_TIMES_VECTOR 172L
#undef Java_Main_E_OP_MATRIX_TIMES_SCALAR
#define Java_Main_E_OP_MATRIX_TIMES_SCALAR 173L
#undef Java_Main_E_OP_LOGICAL_OR
#define Java_Main_E_OP_LOGICAL_OR 174L
#undef Java_Main_E_OP_LOGICAL_XOR
#define Java_Main_E_OP_LOGICAL_XOR 175L
#undef Java_Main_E_OP_LOGICAL_AND
#define Java_Main_E_OP_LOGICAL_AND 176L
#undef Java_Main_E_OP_INDEX_DIRECT
#define Java_Main_E_OP_INDEX_DIRECT 177L
#undef Java_Main_E_OP_INDEX_INDIRECT
#define Java_Main_E_OP_INDEX_INDIRECT 178L
#undef Java_Main_E_OP_INDEX_DIRECT_STRUCT
#define Java_Main_E_OP_INDEX_DIRECT_STRUCT 179L
#undef Java_Main_E_OP_VECTOR_SWIZZLE
#define Java_Main_E_OP_VECTOR_SWIZZLE 180L
#undef Java_Main_E_OP_METHOD
#define Java_Main_E_OP_METHOD 181L
#undef Java_Main_E_OP_SCOPING
#define Java_Main_E_OP_SCOPING 182L
#undef Java_Main_E_OP_RADIANS
#define Java_Main_E_OP_RADIANS 183L
#undef Java_Main_E_OP_DEGREES
#define Java_Main_E_OP_DEGREES 184L
#undef Java_Main_E_OP_SIN
#define Java_Main_E_OP_SIN 185L
#undef Java_Main_E_OP_COS
#define Java_Main_E_OP_COS 186L
#undef Java_Main_E_OP_TAN
#define Java_Main_E_OP_TAN 187L
#undef Java_Main_E_OP_ASIN
#define Java_Main_E_OP_ASIN 188L
#undef Java_Main_E_OP_ACOS
#define Java_Main_E_OP_ACOS 189L
#undef Java_Main_E_OP_ATAN
#define Java_Main_E_OP_ATAN 190L
#undef Java_Main_E_OP_SINH
#define Java_Main_E_OP_SINH 191L
#undef Java_Main_E_OP_COSH
#define Java_Main_E_OP_COSH 192L
#undef Java_Main_E_OP_TANH
#define Java_Main_E_OP_TANH 193L
#undef Java_Main_E_OP_ASINH
#define Java_Main_E_OP_ASINH 194L
#undef Java_Main_E_OP_ACOSH
#define Java_Main_E_OP_ACOSH 195L
#undef Java_Main_E_OP_ATANH
#define Java_Main_E_OP_ATANH 196L
#undef Java_Main_E_OP_POW
#define Java_Main_E_OP_POW 197L
#undef Java_Main_E_OP_EXP
#define Java_Main_E_OP_EXP 198L
#undef Java_Main_E_OP_LOG
#define Java_Main_E_OP_LOG 199L
#undef Java_Main_E_OP_EXP2
#define Java_Main_E_OP_EXP2 200L
#undef Java_Main_E_OP_LOG2
#define Java_Main_E_OP_LOG2 201L
#undef Java_Main_E_OP_SQRT
#define Java_Main_E_OP_SQRT 202L
#undef Java_Main_E_OP_INVERSE_SQRT
#define Java_Main_E_OP_INVERSE_SQRT 203L
#undef Java_Main_E_OP_ABS
#define Java_Main_E_OP_ABS 204L
#undef Java_Main_E_OP_SIGN
#define Java_Main_E_OP_SIGN 205L
#undef Java_Main_E_OP_FLOOR
#define Java_Main_E_OP_FLOOR 206L
#undef Java_Main_E_OP_TRUNC
#define Java_Main_E_OP_TRUNC 207L
#undef Java_Main_E_OP_ROUND
#define Java_Main_E_OP_ROUND 208L
#undef Java_Main_E_OP_ROUND_EVEN
#define Java_Main_E_OP_ROUND_EVEN 209L
#undef Java_Main_E_OP_CEIL
#define Java_Main_E_OP_CEIL 210L
#undef Java_Main_E_OP_FRACT
#define Java_Main_E_OP_FRACT 211L
#undef Java_Main_E_OP_MODF
#define Java_Main_E_OP_MODF 212L
#undef Java_Main_E_OP_MIN
#define Java_Main_E_OP_MIN 213L
#undef Java_Main_E_OP_MAX
#define Java_Main_E_OP_MAX 214L
#undef Java_Main_E_OP_CLAMP
#define Java_Main_E_OP_CLAMP 215L
#undef Java_Main_E_OP_MIX
#define Java_Main_E_OP_MIX 216L
#undef Java_Main_E_OP_STEP
#define Java_Main_E_OP_STEP 217L
#undef Java_Main_E_OP_SMOOTH_STEP
#define Java_Main_E_OP_SMOOTH_STEP 218L
#undef Java_Main_E_OP_IS_NAN
#define Java_Main_E_OP_IS_NAN 219L
#undef Java_Main_E_OP_IS_INF
#define Java_Main_E_OP_IS_INF 220L
#undef Java_Main_E_OP_FMA
#define Java_Main_E_OP_FMA 221L
#undef Java_Main_E_OP_FREXP
#define Java_Main_E_OP_FREXP 222L
#undef Java_Main_E_OP_LDEXP
#define Java_Main_E_OP_LDEXP 223L
#undef Java_Main_E_OP_FLOAT_BITS_TO_INT
#define Java_Main_E_OP_FLOAT_BITS_TO_INT 224L
#undef Java_Main_E_OP_FLOAT_BITS_TO_UINT
#define Java_Main_E_OP_FLOAT_BITS_TO_UINT 225L
#undef Java_Main_E_OP_INT_BITS_TO_FLOAT
#define Java_Main_E_OP_INT_BITS_TO_FLOAT 226L
#undef Java_Main_E_OP_UINT_BITS_TO_FLOAT
#define Java_Main_E_OP_UINT_BITS_TO_FLOAT 227L
#undef Java_Main_E_OP_DOUBLE_BITS_TO_INT64
#define Java_Main_E_OP_DOUBLE_BITS_TO_INT64 228L
#undef Java_Main_E_OP_DOUBLE_BITS_TO_UINT64
#define Java_Main_E_OP_DOUBLE_BITS_TO_UINT64 229L
#undef Java_Main_E_OP_INT64_BITS_TO_DOUBLE
#define Java_Main_E_OP_INT64_BITS_TO_DOUBLE 230L
#undef Java_Main_E_OP_UINT64_BITS_TO_DOUBLE
#define Java_Main_E_OP_UINT64_BITS_TO_DOUBLE 231L
#undef Java_Main_E_OP_FLOAT16_BITS_TO_INT16
#define Java_Main_E_OP_FLOAT16_BITS_TO_INT16 232L
#undef Java_Main_E_OP_FLOAT16_BITS_TO_UINT16
#define Java_Main_E_OP_FLOAT16_BITS_TO_UINT16 233L
#undef Java_Main_E_OP_INT16_BITS_TO_FLOAT16
#define Java_Main_E_OP_INT16_BITS_TO_FLOAT16 234L
#undef Java_Main_E_OP_UINT16_BITS_TO_FLOAT16
#define Java_Main_E_OP_UINT16_BITS_TO_FLOAT16 235L
#undef Java_Main_E_OP_PACK_SNORM2X16
#define Java_Main_E_OP_PACK_SNORM2X16 236L
#undef Java_Main_E_OP_UNPACK_SNORM2X16
#define Java_Main_E_OP_UNPACK_SNORM2X16 237L
#undef Java_Main_E_OP_PACK_UNORM2X16
#define Java_Main_E_OP_PACK_UNORM2X16 238L
#undef Java_Main_E_OP_UNPACK_UNORM2X16
#define Java_Main_E_OP_UNPACK_UNORM2X16 239L
#undef Java_Main_E_OP_PACK_SNORM4X8
#define Java_Main_E_OP_PACK_SNORM4X8 240L
#undef Java_Main_E_OP_UNPACK_SNORM4X8
#define Java_Main_E_OP_UNPACK_SNORM4X8 241L
#undef Java_Main_E_OP_PACK_UNORM4X8
#define Java_Main_E_OP_PACK_UNORM4X8 242L
#undef Java_Main_E_OP_UNPACK_UNORM4X8
#define Java_Main_E_OP_UNPACK_UNORM4X8 243L
#undef Java_Main_E_OP_PACK_HALF2X16
#define Java_Main_E_OP_PACK_HALF2X16 244L
#undef Java_Main_E_OP_UNPACK_HALF2X16
#define Java_Main_E_OP_UNPACK_HALF2X16 245L
#undef Java_Main_E_OP_PACK_DOUBLE2X32
#define Java_Main_E_OP_PACK_DOUBLE2X32 246L
#undef Java_Main_E_OP_UNPACK_DOUBLE2X32
#define Java_Main_E_OP_UNPACK_DOUBLE2X32 247L
#undef Java_Main_E_OP_PACK_INT2X32
#define Java_Main_E_OP_PACK_INT2X32 248L
#undef Java_Main_E_OP_UNPACK_INT2X32
#define Java_Main_E_OP_UNPACK_INT2X32 249L
#undef Java_Main_E_OP_PACK_UINT2X32
#define Java_Main_E_OP_PACK_UINT2X32 250L
#undef Java_Main_E_OP_UNPACK_UINT2X32
#define Java_Main_E_OP_UNPACK_UINT2X32 251L
#undef Java_Main_E_OP_PACK_FLOAT2X16
#define Java_Main_E_OP_PACK_FLOAT2X16 252L
#undef Java_Main_E_OP_UNPACK_FLOAT2X16
#define Java_Main_E_OP_UNPACK_FLOAT2X16 253L
#undef Java_Main_E_OP_PACK_INT2X16
#define Java_Main_E_OP_PACK_INT2X16 254L
#undef Java_Main_E_OP_UNPACK_INT2X16
#define Java_Main_E_OP_UNPACK_INT2X16 255L
#undef Java_Main_E_OP_PACK_UINT2X16
#define Java_Main_E_OP_PACK_UINT2X16 256L
#undef Java_Main_E_OP_UNPACK_UINT2X16
#define Java_Main_E_OP_UNPACK_UINT2X16 257L
#undef Java_Main_E_OP_PACK_INT4X16
#define Java_Main_E_OP_PACK_INT4X16 258L
#undef Java_Main_E_OP_UNPACK_INT4X16
#define Java_Main_E_OP_UNPACK_INT4X16 259L
#undef Java_Main_E_OP_PACK_UINT4X16
#define Java_Main_E_OP_PACK_UINT4X16 260L
#undef Java_Main_E_OP_UNPACK_UINT4X16
#define Java_Main_E_OP_UNPACK_UINT4X16 261L
#undef Java_Main_E_OP_PACK16
#define Java_Main_E_OP_PACK16 262L
#undef Java_Main_E_OP_PACK32
#define Java_Main_E_OP_PACK32 263L
#undef Java_Main_E_OP_PACK64
#define Java_Main_E_OP_PACK64 264L
#undef Java_Main_E_OP_UNPACK32
#define Java_Main_E_OP_UNPACK32 265L
#undef Java_Main_E_OP_UNPACK16
#define Java_Main_E_OP_UNPACK16 266L
#undef Java_Main_E_OP_UNPACK8
#define Java_Main_E_OP_UNPACK8 267L
#undef Java_Main_E_OP_LENGTH
#define Java_Main_E_OP_LENGTH 268L
#undef Java_Main_E_OP_DISTANCE
#define Java_Main_E_OP_DISTANCE 269L
#undef Java_Main_E_OP_DOT
#define Java_Main_E_OP_DOT 270L
#undef Java_Main_E_OP_CROSS
#define Java_Main_E_OP_CROSS 271L
#undef Java_Main_E_OP_NORMALIZE
#define Java_Main_E_OP_NORMALIZE 272L
#undef Java_Main_E_OP_FACE_FORWARD
#define Java_Main_E_OP_FACE_FORWARD 273L
#undef Java_Main_E_OP_REFLECT
#define Java_Main_E_OP_REFLECT 274L
#undef Java_Main_E_OP_REFRACT
#define Java_Main_E_OP_REFRACT 275L
#undef Java_Main_E_OP_MIN3
#define Java_Main_E_OP_MIN3 276L
#undef Java_Main_E_OP_MAX3
#define Java_Main_E_OP_MAX3 277L
#undef Java_Main_E_OP_MID3
#define Java_Main_E_OP_MID3 278L
#undef Java_Main_E_OP_DPDX
#define Java_Main_E_OP_DPDX 279L
#undef Java_Main_E_OP_DPDY
#define Java_Main_E_OP_DPDY 280L
#undef Java_Main_E_OP_FWIDTH
#define Java_Main_E_OP_FWIDTH 281L
#undef Java_Main_E_OP_DPDXFINE
#define Java_Main_E_OP_DPDXFINE 282L
#undef Java_Main_E_OP_DPDYFINE
#define Java_Main_E_OP_DPDYFINE 283L
#undef Java_Main_E_OP_FWIDTH_FINE
#define Java_Main_E_OP_FWIDTH_FINE 284L
#undef Java_Main_E_OP_DPDXCOARSE
#define Java_Main_E_OP_DPDXCOARSE 285L
#undef Java_Main_E_OP_DPDYCOARSE
#define Java_Main_E_OP_DPDYCOARSE 286L
#undef Java_Main_E_OP_FWIDTH_COARSE
#define Java_Main_E_OP_FWIDTH_COARSE 287L
#undef Java_Main_E_OP_INTERPOLATE_AT_CENTROID
#define Java_Main_E_OP_INTERPOLATE_AT_CENTROID 288L
#undef Java_Main_E_OP_INTERPOLATE_AT_SAMPLE
#define Java_Main_E_OP_INTERPOLATE_AT_SAMPLE 289L
#undef Java_Main_E_OP_INTERPOLATE_AT_OFFSET
#define Java_Main_E_OP_INTERPOLATE_AT_OFFSET 290L
#undef Java_Main_E_OP_INTERPOLATE_AT_VERTEX
#define Java_Main_E_OP_INTERPOLATE_AT_VERTEX 291L
#undef Java_Main_E_OP_MATRIX_TIMES_MATRIX
#define Java_Main_E_OP_MATRIX_TIMES_MATRIX 292L
#undef Java_Main_E_OP_OUTER_PRODUCT
#define Java_Main_E_OP_OUTER_PRODUCT 293L
#undef Java_Main_E_OP_DETERMINANT
#define Java_Main_E_OP_DETERMINANT 294L
#undef Java_Main_E_OP_MATRIX_INVERSE
#define Java_Main_E_OP_MATRIX_INVERSE 295L
#undef Java_Main_E_OP_TRANSPOSE
#define Java_Main_E_OP_TRANSPOSE 296L
#undef Java_Main_E_OP_FTRANSFORM
#define Java_Main_E_OP_FTRANSFORM 297L
#undef Java_Main_E_OP_NOISE
#define Java_Main_E_OP_NOISE 298L
#undef Java_Main_E_OP_EMIT_VERTEX
#define Java_Main_E_OP_EMIT_VERTEX 299L
#undef Java_Main_E_OP_END_PRIMITIVE
#define Java_Main_E_OP_END_PRIMITIVE 300L
#undef Java_Main_E_OP_EMIT_STREAM_VERTEX
#define Java_Main_E_OP_EMIT_STREAM_VERTEX 301L
#undef Java_Main_E_OP_END_STREAM_PRIMITIVE
#define Java_Main_E_OP_END_STREAM_PRIMITIVE 302L
#undef Java_Main_E_OP_BARRIER
#define Java_Main_E_OP_BARRIER 303L
#undef Java_Main_E_OP_MEMORY_BARRIER
#define Java_Main_E_OP_MEMORY_BARRIER 304L
#undef Java_Main_E_OP_MEMORY_BARRIER_ATOMIC_COUNTER
#define Java_Main_E_OP_MEMORY_BARRIER_ATOMIC_COUNTER 305L
#undef Java_Main_E_OP_MEMORY_BARRIER_BUFFER
#define Java_Main_E_OP_MEMORY_BARRIER_BUFFER 306L
#undef Java_Main_E_OP_MEMORY_BARRIER_IMAGE
#define Java_Main_E_OP_MEMORY_BARRIER_IMAGE 307L
#undef Java_Main_E_OP_MEMORY_BARRIER_SHARED
#define Java_Main_E_OP_MEMORY_BARRIER_SHARED 308L
#undef Java_Main_E_OP_GROUP_MEMORY_BARRIER
#define Java_Main_E_OP_GROUP_MEMORY_BARRIER 309L
#undef Java_Main_E_OP_BALLOT
#define Java_Main_E_OP_BALLOT 310L
#undef Java_Main_E_OP_READ_INVOCATION
#define Java_Main_E_OP_READ_INVOCATION 311L
#undef Java_Main_E_OP_READ_FIRST_INVOCATION
#define Java_Main_E_OP_READ_FIRST_INVOCATION 312L
#undef Java_Main_E_OP_ANY_INVOCATION
#define Java_Main_E_OP_ANY_INVOCATION 313L
#undef Java_Main_E_OP_ALL_INVOCATIONS
#define Java_Main_E_OP_ALL_INVOCATIONS 314L
#undef Java_Main_E_OP_ALL_INVOCATIONS_EQUAL
#define Java_Main_E_OP_ALL_INVOCATIONS_EQUAL 315L
#undef Java_Main_E_OP_SUBGROUP_GUARD_START
#define Java_Main_E_OP_SUBGROUP_GUARD_START 316L
#undef Java_Main_E_OP_SUBGROUP_BARRIER
#define Java_Main_E_OP_SUBGROUP_BARRIER 317L
#undef Java_Main_E_OP_SUBGROUP_MEMORY_BARRIER
#define Java_Main_E_OP_SUBGROUP_MEMORY_BARRIER 318L
#undef Java_Main_E_OP_SUBGROUP_MEMORY_BARRIER_BUFFER
#define Java_Main_E_OP_SUBGROUP_MEMORY_BARRIER_BUFFER 319L
#undef Java_Main_E_OP_SUBGROUP_MEMORY_BARRIER_IMAGE
#define Java_Main_E_OP_SUBGROUP_MEMORY_BARRIER_IMAGE 320L
#undef Java_Main_E_OP_SUBGROUP_MEMORY_BARRIER_SHARED
#define Java_Main_E_OP_SUBGROUP_MEMORY_BARRIER_SHARED 321L
#undef Java_Main_E_OP_SUBGROUP_ELECT
#define Java_Main_E_OP_SUBGROUP_ELECT 322L
#undef Java_Main_E_OP_SUBGROUP_ALL
#define Java_Main_E_OP_SUBGROUP_ALL 323L
#undef Java_Main_E_OP_SUBGROUP_ANY
#define Java_Main_E_OP_SUBGROUP_ANY 324L
#undef Java_Main_E_OP_SUBGROUP_ALL_EQUAL
#define Java_Main_E_OP_SUBGROUP_ALL_EQUAL 325L
#undef Java_Main_E_OP_SUBGROUP_BROADCAST
#define Java_Main_E_OP_SUBGROUP_BROADCAST 326L
#undef Java_Main_E_OP_SUBGROUP_BROADCAST_FIRST
#define Java_Main_E_OP_SUBGROUP_BROADCAST_FIRST 327L
#undef Java_Main_E_OP_SUBGROUP_BALLOT
#define Java_Main_E_OP_SUBGROUP_BALLOT 328L
#undef Java_Main_E_OP_SUBGROUP_INVERSE_BALLOT
#define Java_Main_E_OP_SUBGROUP_INVERSE_BALLOT 329L
#undef Java_Main_E_OP_SUBGROUP_BALLOT_BIT_EXTRACT
#define Java_Main_E_OP_SUBGROUP_BALLOT_BIT_EXTRACT 330L
#undef Java_Main_E_OP_SUBGROUP_BALLOT_BIT_COUNT
#define Java_Main_E_OP_SUBGROUP_BALLOT_BIT_COUNT 331L
#undef Java_Main_E_OP_SUBGROUP_BALLOT_INCLUSIVE_BIT_COUNT
#define Java_Main_E_OP_SUBGROUP_BALLOT_INCLUSIVE_BIT_COUNT 332L
#undef Java_Main_E_OP_SUBGROUP_BALLOT_EXCLUSIVE_BIT_COUNT
#define Java_Main_E_OP_SUBGROUP_BALLOT_EXCLUSIVE_BIT_COUNT 333L
#undef Java_Main_E_OP_SUBGROUP_BALLOT_FIND_LSB
#define Java_Main_E_OP_SUBGROUP_BALLOT_FIND_LSB 334L
#undef Java_Main_E_OP_SUBGROUP_BALLOT_FIND_MSB
#define Java_Main_E_OP_SUBGROUP_BALLOT_FIND_MSB 335L
#undef Java_Main_E_OP_SUBGROUP_SHUFFLE
#define Java_Main_E_OP_SUBGROUP_SHUFFLE 336L
#undef Java_Main_E_OP_SUBGROUP_SHUFFLE_XOR
#define Java_Main_E_OP_SUBGROUP_SHUFFLE_XOR 337L
#undef Java_Main_E_OP_SUBGROUP_SHUFFLE_UP
#define Java_Main_E_OP_SUBGROUP_SHUFFLE_UP 338L
#undef Java_Main_E_OP_SUBGROUP_SHUFFLE_DOWN
#define Java_Main_E_OP_SUBGROUP_SHUFFLE_DOWN 339L
#undef Java_Main_E_OP_SUBGROUP_ADD
#define Java_Main_E_OP_SUBGROUP_ADD 340L
#undef Java_Main_E_OP_SUBGROUP_MUL
#define Java_Main_E_OP_SUBGROUP_MUL 341L
#undef Java_Main_E_OP_SUBGROUP_MIN
#define Java_Main_E_OP_SUBGROUP_MIN 342L
#undef Java_Main_E_OP_SUBGROUP_MAX
#define Java_Main_E_OP_SUBGROUP_MAX 343L
#undef Java_Main_E_OP_SUBGROUP_AND
#define Java_Main_E_OP_SUBGROUP_AND 344L
#undef Java_Main_E_OP_SUBGROUP_OR
#define Java_Main_E_OP_SUBGROUP_OR 345L
#undef Java_Main_E_OP_SUBGROUP_XOR
#define Java_Main_E_OP_SUBGROUP_XOR 346L
#undef Java_Main_E_OP_SUBGROUP_INCLUSIVE_ADD
#define Java_Main_E_OP_SUBGROUP_INCLUSIVE_ADD 347L
#undef Java_Main_E_OP_SUBGROUP_INCLUSIVE_MUL
#define Java_Main_E_OP_SUBGROUP_INCLUSIVE_MUL 348L
#undef Java_Main_E_OP_SUBGROUP_INCLUSIVE_MIN
#define Java_Main_E_OP_SUBGROUP_INCLUSIVE_MIN 349L
#undef Java_Main_E_OP_SUBGROUP_INCLUSIVE_MAX
#define Java_Main_E_OP_SUBGROUP_INCLUSIVE_MAX 350L
#undef Java_Main_E_OP_SUBGROUP_INCLUSIVE_AND
#define Java_Main_E_OP_SUBGROUP_INCLUSIVE_AND 351L
#undef Java_Main_E_OP_SUBGROUP_INCLUSIVE_OR
#define Java_Main_E_OP_SUBGROUP_INCLUSIVE_OR 352L
#undef Java_Main_E_OP_SUBGROUP_INCLUSIVE_XOR
#define Java_Main_E_OP_SUBGROUP_INCLUSIVE_XOR 353L
#undef Java_Main_E_OP_SUBGROUP_EXCLUSIVE_ADD
#define Java_Main_E_OP_SUBGROUP_EXCLUSIVE_ADD 354L
#undef Java_Main_E_OP_SUBGROUP_EXCLUSIVE_MUL
#define Java_Main_E_OP_SUBGROUP_EXCLUSIVE_MUL 355L
#undef Java_Main_E_OP_SUBGROUP_EXCLUSIVE_MIN
#define Java_Main_E_OP_SUBGROUP_EXCLUSIVE_MIN 356L
#undef Java_Main_E_OP_SUBGROUP_EXCLUSIVE_MAX
#define Java_Main_E_OP_SUBGROUP_EXCLUSIVE_MAX 357L
#undef Java_Main_E_OP_SUBGROUP_EXCLUSIVE_AND
#define Java_Main_E_OP_SUBGROUP_EXCLUSIVE_AND 358L
#undef Java_Main_E_OP_SUBGROUP_EXCLUSIVE_OR
#define Java_Main_E_OP_SUBGROUP_EXCLUSIVE_OR 359L
#undef Java_Main_E_OP_SUBGROUP_EXCLUSIVE_XOR
#define Java_Main_E_OP_SUBGROUP_EXCLUSIVE_XOR 360L
#undef Java_Main_E_OP_SUBGROUP_CLUSTERED_ADD
#define Java_Main_E_OP_SUBGROUP_CLUSTERED_ADD 361L
#undef Java_Main_E_OP_SUBGROUP_CLUSTERED_MUL
#define Java_Main_E_OP_SUBGROUP_CLUSTERED_MUL 362L
#undef Java_Main_E_OP_SUBGROUP_CLUSTERED_MIN
#define Java_Main_E_OP_SUBGROUP_CLUSTERED_MIN 363L
#undef Java_Main_E_OP_SUBGROUP_CLUSTERED_MAX
#define Java_Main_E_OP_SUBGROUP_CLUSTERED_MAX 364L
#undef Java_Main_E_OP_SUBGROUP_CLUSTERED_AND
#define Java_Main_E_OP_SUBGROUP_CLUSTERED_AND 365L
#undef Java_Main_E_OP_SUBGROUP_CLUSTERED_OR
#define Java_Main_E_OP_SUBGROUP_CLUSTERED_OR 366L
#undef Java_Main_E_OP_SUBGROUP_CLUSTERED_XOR
#define Java_Main_E_OP_SUBGROUP_CLUSTERED_XOR 367L
#undef Java_Main_E_OP_SUBGROUP_QUAD_BROADCAST
#define Java_Main_E_OP_SUBGROUP_QUAD_BROADCAST 368L
#undef Java_Main_E_OP_SUBGROUP_QUAD_SWAP_HORIZONTAL
#define Java_Main_E_OP_SUBGROUP_QUAD_SWAP_HORIZONTAL 369L
#undef Java_Main_E_OP_SUBGROUP_QUAD_SWAP_VERTICAL
#define Java_Main_E_OP_SUBGROUP_QUAD_SWAP_VERTICAL 370L
#undef Java_Main_E_OP_SUBGROUP_QUAD_SWAP_DIAGONAL
#define Java_Main_E_OP_SUBGROUP_QUAD_SWAP_DIAGONAL 371L
#undef Java_Main_E_OP_SUBGROUP_PARTITION
#define Java_Main_E_OP_SUBGROUP_PARTITION 372L
#undef Java_Main_E_OP_SUBGROUP_PARTITIONED_ADD
#define Java_Main_E_OP_SUBGROUP_PARTITIONED_ADD 373L
#undef Java_Main_E_OP_SUBGROUP_PARTITIONED_MUL
#define Java_Main_E_OP_SUBGROUP_PARTITIONED_MUL 374L
#undef Java_Main_E_OP_SUBGROUP_PARTITIONED_MIN
#define Java_Main_E_OP_SUBGROUP_PARTITIONED_MIN 375L
#undef Java_Main_E_OP_SUBGROUP_PARTITIONED_MAX
#define Java_Main_E_OP_SUBGROUP_PARTITIONED_MAX 376L
#undef Java_Main_E_OP_SUBGROUP_PARTITIONED_AND
#define Java_Main_E_OP_SUBGROUP_PARTITIONED_AND 377L
#undef Java_Main_E_OP_SUBGROUP_PARTITIONED_OR
#define Java_Main_E_OP_SUBGROUP_PARTITIONED_OR 378L
#undef Java_Main_E_OP_SUBGROUP_PARTITIONED_XOR
#define Java_Main_E_OP_SUBGROUP_PARTITIONED_XOR 379L
#undef Java_Main_E_OP_SUBGROUP_PARTITIONED_INCLUSIVE_ADD
#define Java_Main_E_OP_SUBGROUP_PARTITIONED_INCLUSIVE_ADD 380L
#undef Java_Main_E_OP_SUBGROUP_PARTITIONED_INCLUSIVE_MUL
#define Java_Main_E_OP_SUBGROUP_PARTITIONED_INCLUSIVE_MUL 381L
#undef Java_Main_E_OP_SUBGROUP_PARTITIONED_INCLUSIVE_MIN
#define Java_Main_E_OP_SUBGROUP_PARTITIONED_INCLUSIVE_MIN 382L
#undef Java_Main_E_OP_SUBGROUP_PARTITIONED_INCLUSIVE_MAX
#define Java_Main_E_OP_SUBGROUP_PARTITIONED_INCLUSIVE_MAX 383L
#undef Java_Main_E_OP_SUBGROUP_PARTITIONED_INCLUSIVE_AND
#define Java_Main_E_OP_SUBGROUP_PARTITIONED_INCLUSIVE_AND 384L
#undef Java_Main_E_OP_SUBGROUP_PARTITIONED_INCLUSIVE_OR
#define Java_Main_E_OP_SUBGROUP_PARTITIONED_INCLUSIVE_OR 385L
#undef Java_Main_E_OP_SUBGROUP_PARTITIONED_INCLUSIVE_XOR
#define Java_Main_E_OP_SUBGROUP_PARTITIONED_INCLUSIVE_XOR 386L
#undef Java_Main_E_OP_SUBGROUP_PARTITIONED_EXCLUSIVE_ADD
#define Java_Main_E_OP_SUBGROUP_PARTITIONED_EXCLUSIVE_ADD 387L
#undef Java_Main_E_OP_SUBGROUP_PARTITIONED_EXCLUSIVE_MUL
#define Java_Main_E_OP_SUBGROUP_PARTITIONED_EXCLUSIVE_MUL 388L
#undef Java_Main_E_OP_SUBGROUP_PARTITIONED_EXCLUSIVE_MIN
#define Java_Main_E_OP_SUBGROUP_PARTITIONED_EXCLUSIVE_MIN 389L
#undef Java_Main_E_OP_SUBGROUP_PARTITIONED_EXCLUSIVE_MAX
#define Java_Main_E_OP_SUBGROUP_PARTITIONED_EXCLUSIVE_MAX 390L
#undef Java_Main_E_OP_SUBGROUP_PARTITIONED_EXCLUSIVE_AND
#define Java_Main_E_OP_SUBGROUP_PARTITIONED_EXCLUSIVE_AND 391L
#undef Java_Main_E_OP_SUBGROUP_PARTITIONED_EXCLUSIVE_OR
#define Java_Main_E_OP_SUBGROUP_PARTITIONED_EXCLUSIVE_OR 392L
#undef Java_Main_E_OP_SUBGROUP_PARTITIONED_EXCLUSIVE_XOR
#define Java_Main_E_OP_SUBGROUP_PARTITIONED_EXCLUSIVE_XOR 393L
#undef Java_Main_E_OP_SUBGROUP_GUARD_STOP
#define Java_Main_E_OP_SUBGROUP_GUARD_STOP 394L
#undef Java_Main_E_OP_MIN_INVOCATIONS
#define Java_Main_E_OP_MIN_INVOCATIONS 395L
#undef Java_Main_E_OP_MAX_INVOCATIONS
#define Java_Main_E_OP_MAX_INVOCATIONS 396L
#undef Java_Main_E_OP_ADD_INVOCATIONS
#define Java_Main_E_OP_ADD_INVOCATIONS 397L
#undef Java_Main_E_OP_MIN_INVOCATIONS_NON_UNIFORM
#define Java_Main_E_OP_MIN_INVOCATIONS_NON_UNIFORM 398L
#undef Java_Main_E_OP_MAX_INVOCATIONS_NON_UNIFORM
#define Java_Main_E_OP_MAX_INVOCATIONS_NON_UNIFORM 399L
#undef Java_Main_E_OP_ADD_INVOCATIONS_NON_UNIFORM
#define Java_Main_E_OP_ADD_INVOCATIONS_NON_UNIFORM 400L
#undef Java_Main_E_OP_MIN_INVOCATIONS_INCLUSIVE_SCAN
#define Java_Main_E_OP_MIN_INVOCATIONS_INCLUSIVE_SCAN 401L
#undef Java_Main_E_OP_MAX_INVOCATIONS_INCLUSIVE_SCAN
#define Java_Main_E_OP_MAX_INVOCATIONS_INCLUSIVE_SCAN 402L
#undef Java_Main_E_OP_ADD_INVOCATIONS_INCLUSIVE_SCAN
#define Java_Main_E_OP_ADD_INVOCATIONS_INCLUSIVE_SCAN 403L
#undef Java_Main_E_OP_MIN_INVOCATIONS_INCLUSIVE_SCAN_NON_UNIFORM
#define Java_Main_E_OP_MIN_INVOCATIONS_INCLUSIVE_SCAN_NON_UNIFORM 404L
#undef Java_Main_E_OP_MAX_INVOCATIONS_INCLUSIVE_SCAN_NON_UNIFORM
#define Java_Main_E_OP_MAX_INVOCATIONS_INCLUSIVE_SCAN_NON_UNIFORM 405L
#undef Java_Main_E_OP_ADD_INVOCATIONS_INCLUSIVE_SCAN_NON_UNIFORM
#define Java_Main_E_OP_ADD_INVOCATIONS_INCLUSIVE_SCAN_NON_UNIFORM 406L
#undef Java_Main_E_OP_MIN_INVOCATIONS_EXCLUSIVE_SCAN
#define Java_Main_E_OP_MIN_INVOCATIONS_EXCLUSIVE_SCAN 407L
#undef Java_Main_E_OP_MAX_INVOCATIONS_EXCLUSIVE_SCAN
#define Java_Main_E_OP_MAX_INVOCATIONS_EXCLUSIVE_SCAN 408L
#undef Java_Main_E_OP_ADD_INVOCATIONS_EXCLUSIVE_SCAN
#define Java_Main_E_OP_ADD_INVOCATIONS_EXCLUSIVE_SCAN 409L
#undef Java_Main_E_OP_MIN_INVOCATIONS_EXCLUSIVE_SCAN_NON_UNIFORM
#define Java_Main_E_OP_MIN_INVOCATIONS_EXCLUSIVE_SCAN_NON_UNIFORM 410L
#undef Java_Main_E_OP_MAX_INVOCATIONS_EXCLUSIVE_SCAN_NON_UNIFORM
#define Java_Main_E_OP_MAX_INVOCATIONS_EXCLUSIVE_SCAN_NON_UNIFORM 411L
#undef Java_Main_E_OP_ADD_INVOCATIONS_EXCLUSIVE_SCAN_NON_UNIFORM
#define Java_Main_E_OP_ADD_INVOCATIONS_EXCLUSIVE_SCAN_NON_UNIFORM 412L
#undef Java_Main_E_OP_SWIZZLE_INVOCATIONS
#define Java_Main_E_OP_SWIZZLE_INVOCATIONS 413L
#undef Java_Main_E_OP_SWIZZLE_INVOCATIONS_MASKED
#define Java_Main_E_OP_SWIZZLE_INVOCATIONS_MASKED 414L
#undef Java_Main_E_OP_WRITE_INVOCATION
#define Java_Main_E_OP_WRITE_INVOCATION 415L
#undef Java_Main_E_OP_MBCNT
#define Java_Main_E_OP_MBCNT 416L
#undef Java_Main_E_OP_CUBE_FACE_INDEX
#define Java_Main_E_OP_CUBE_FACE_INDEX 417L
#undef Java_Main_E_OP_CUBE_FACE_COORD
#define Java_Main_E_OP_CUBE_FACE_COORD 418L
#undef Java_Main_E_OP_TIME
#define Java_Main_E_OP_TIME 419L
#undef Java_Main_E_OP_ATOMIC_ADD
#define Java_Main_E_OP_ATOMIC_ADD 420L
#undef Java_Main_E_OP_ATOMIC_MIN
#define Java_Main_E_OP_ATOMIC_MIN 421L
#undef Java_Main_E_OP_ATOMIC_MAX
#define Java_Main_E_OP_ATOMIC_MAX 422L
#undef Java_Main_E_OP_ATOMIC_AND
#define Java_Main_E_OP_ATOMIC_AND 423L
#undef Java_Main_E_OP_ATOMIC_OR
#define Java_Main_E_OP_ATOMIC_OR 424L
#undef Java_Main_E_OP_ATOMIC_XOR
#define Java_Main_E_OP_ATOMIC_XOR 425L
#undef Java_Main_E_OP_ATOMIC_EXCHANGE
#define Java_Main_E_OP_ATOMIC_EXCHANGE 426L
#undef Java_Main_E_OP_ATOMIC_COMP_SWAP
#define Java_Main_E_OP_ATOMIC_COMP_SWAP 427L
#undef Java_Main_E_OP_ATOMIC_LOAD
#define Java_Main_E_OP_ATOMIC_LOAD 428L
#undef Java_Main_E_OP_ATOMIC_STORE
#define Java_Main_E_OP_ATOMIC_STORE 429L
#undef Java_Main_E_OP_ATOMIC_COUNTER_INCREMENT
#define Java_Main_E_OP_ATOMIC_COUNTER_INCREMENT 430L
#undef Java_Main_E_OP_ATOMIC_COUNTER_DECREMENT
#define Java_Main_E_OP_ATOMIC_COUNTER_DECREMENT 431L
#undef Java_Main_E_OP_ATOMIC_COUNTER
#define Java_Main_E_OP_ATOMIC_COUNTER 432L
#undef Java_Main_E_OP_ATOMIC_COUNTER_ADD
#define Java_Main_E_OP_ATOMIC_COUNTER_ADD 433L
#undef Java_Main_E_OP_ATOMIC_COUNTER_SUBTRACT
#define Java_Main_E_OP_ATOMIC_COUNTER_SUBTRACT 434L
#undef Java_Main_E_OP_ATOMIC_COUNTER_MIN
#define Java_Main_E_OP_ATOMIC_COUNTER_MIN 435L
#undef Java_Main_E_OP_ATOMIC_COUNTER_MAX
#define Java_Main_E_OP_ATOMIC_COUNTER_MAX 436L
#undef Java_Main_E_OP_ATOMIC_COUNTER_AND
#define Java_Main_E_OP_ATOMIC_COUNTER_AND 437L
#undef Java_Main_E_OP_ATOMIC_COUNTER_OR
#define Java_Main_E_OP_ATOMIC_COUNTER_OR 438L
#undef Java_Main_E_OP_ATOMIC_COUNTER_XOR
#define Java_Main_E_OP_ATOMIC_COUNTER_XOR 439L
#undef Java_Main_E_OP_ATOMIC_COUNTER_EXCHANGE
#define Java_Main_E_OP_ATOMIC_COUNTER_EXCHANGE 440L
#undef Java_Main_E_OP_ATOMIC_COUNTER_COMP_SWAP
#define Java_Main_E_OP_ATOMIC_COUNTER_COMP_SWAP 441L
#undef Java_Main_E_OP_ANY
#define Java_Main_E_OP_ANY 442L
#undef Java_Main_E_OP_ALL
#define Java_Main_E_OP_ALL 443L
#undef Java_Main_E_OP_COOPERATIVE_MATRIX_LOAD
#define Java_Main_E_OP_COOPERATIVE_MATRIX_LOAD 444L
#undef Java_Main_E_OP_COOPERATIVE_MATRIX_STORE
#define Java_Main_E_OP_COOPERATIVE_MATRIX_STORE 445L
#undef Java_Main_E_OP_COOPERATIVE_MATRIX_MUL_ADD
#define Java_Main_E_OP_COOPERATIVE_MATRIX_MUL_ADD 446L
#undef Java_Main_E_OP_BEGIN_INVOCATION_INTERLOCK
#define Java_Main_E_OP_BEGIN_INVOCATION_INTERLOCK 447L
#undef Java_Main_E_OP_END_INVOCATION_INTERLOCK
#define Java_Main_E_OP_END_INVOCATION_INTERLOCK 448L
#undef Java_Main_E_OP_IS_HELPER_INVOCATION
#define Java_Main_E_OP_IS_HELPER_INVOCATION 449L
#undef Java_Main_E_OP_DEBUG_PRINTF
#define Java_Main_E_OP_DEBUG_PRINTF 450L
#undef Java_Main_E_OP_KILL
#define Java_Main_E_OP_KILL 451L
#undef Java_Main_E_OP_RETURN
#define Java_Main_E_OP_RETURN 452L
#undef Java_Main_E_OP_BREAK
#define Java_Main_E_OP_BREAK 453L
#undef Java_Main_E_OP_CONTINUE
#define Java_Main_E_OP_CONTINUE 454L
#undef Java_Main_E_OP_CASE
#define Java_Main_E_OP_CASE 455L
#undef Java_Main_E_OP_DEFAULT
#define Java_Main_E_OP_DEFAULT 456L
#undef Java_Main_E_OP_DEMOTE
#define Java_Main_E_OP_DEMOTE 457L
#undef Java_Main_E_OP_CONSTRUCT_GUARD_START
#define Java_Main_E_OP_CONSTRUCT_GUARD_START 458L
#undef Java_Main_E_OP_CONSTRUCT_INT
#define Java_Main_E_OP_CONSTRUCT_INT 459L
#undef Java_Main_E_OP_CONSTRUCT_UINT
#define Java_Main_E_OP_CONSTRUCT_UINT 460L
#undef Java_Main_E_OP_CONSTRUCT_INT8
#define Java_Main_E_OP_CONSTRUCT_INT8 461L
#undef Java_Main_E_OP_CONSTRUCT_UINT8
#define Java_Main_E_OP_CONSTRUCT_UINT8 462L
#undef Java_Main_E_OP_CONSTRUCT_INT16
#define Java_Main_E_OP_CONSTRUCT_INT16 463L
#undef Java_Main_E_OP_CONSTRUCT_UINT16
#define Java_Main_E_OP_CONSTRUCT_UINT16 464L
#undef Java_Main_E_OP_CONSTRUCT_INT64
#define Java_Main_E_OP_CONSTRUCT_INT64 465L
#undef Java_Main_E_OP_CONSTRUCT_UINT64
#define Java_Main_E_OP_CONSTRUCT_UINT64 466L
#undef Java_Main_E_OP_CONSTRUCT_BOOL
#define Java_Main_E_OP_CONSTRUCT_BOOL 467L
#undef Java_Main_E_OP_CONSTRUCT_FLOAT
#define Java_Main_E_OP_CONSTRUCT_FLOAT 468L
#undef Java_Main_E_OP_CONSTRUCT_DOUBLE
#define Java_Main_E_OP_CONSTRUCT_DOUBLE 469L
#undef Java_Main_E_OP_CONSTRUCT_VEC2
#define Java_Main_E_OP_CONSTRUCT_VEC2 470L
#undef Java_Main_E_OP_CONSTRUCT_VEC3
#define Java_Main_E_OP_CONSTRUCT_VEC3 471L
#undef Java_Main_E_OP_CONSTRUCT_VEC4
#define Java_Main_E_OP_CONSTRUCT_VEC4 472L
#undef Java_Main_E_OP_CONSTRUCT_MAT2X2
#define Java_Main_E_OP_CONSTRUCT_MAT2X2 473L
#undef Java_Main_E_OP_CONSTRUCT_MAT2X3
#define Java_Main_E_OP_CONSTRUCT_MAT2X3 474L
#undef Java_Main_E_OP_CONSTRUCT_MAT2X4
#define Java_Main_E_OP_CONSTRUCT_MAT2X4 475L
#undef Java_Main_E_OP_CONSTRUCT_MAT3X2
#define Java_Main_E_OP_CONSTRUCT_MAT3X2 476L
#undef Java_Main_E_OP_CONSTRUCT_MAT3X3
#define Java_Main_E_OP_CONSTRUCT_MAT3X3 477L
#undef Java_Main_E_OP_Construct_Mat3x4
#define Java_Main_E_OP_Construct_Mat3x4 478L
#undef Java_Main_E_OP_CONSTRUCT_MAT4X2
#define Java_Main_E_OP_CONSTRUCT_MAT4X2 479L
#undef Java_Main_E_OP_CONSTRUCT_MAT4X3
#define Java_Main_E_OP_CONSTRUCT_MAT4X3 480L
#undef Java_Main_E_OP_CONSTRUCT_MAT4X4
#define Java_Main_E_OP_CONSTRUCT_MAT4X4 481L
#undef Java_Main_E_OP_CONSTRUCT_DVEC2
#define Java_Main_E_OP_CONSTRUCT_DVEC2 482L
#undef Java_Main_E_OP_CONSTRUCT_DVEC3
#define Java_Main_E_OP_CONSTRUCT_DVEC3 483L
#undef Java_Main_E_OP_CONSTRUCT_DVEC4
#define Java_Main_E_OP_CONSTRUCT_DVEC4 484L
#undef Java_Main_E_OP_CONSTRUCT_BVEC2
#define Java_Main_E_OP_CONSTRUCT_BVEC2 485L
#undef Java_Main_E_OP_CONSTRUCT_BVEC3
#define Java_Main_E_OP_CONSTRUCT_BVEC3 486L
#undef Java_Main_E_OP_CONSTRUCT_BVEC4
#define Java_Main_E_OP_CONSTRUCT_BVEC4 487L
#undef Java_Main_E_OP_CONSTRUCT_I8_VEC2
#define Java_Main_E_OP_CONSTRUCT_I8_VEC2 488L
#undef Java_Main_E_OP_CONSTRUCT_I8_VEC3
#define Java_Main_E_OP_CONSTRUCT_I8_VEC3 489L
#undef Java_Main_E_OP_CONSTRUCT_I8_VEC4
#define Java_Main_E_OP_CONSTRUCT_I8_VEC4 490L
#undef Java_Main_E_OP_CONSTRUCT_U8_VEC2
#define Java_Main_E_OP_CONSTRUCT_U8_VEC2 491L
#undef Java_Main_E_OP_CONSTRUCT_U8_VEC3
#define Java_Main_E_OP_CONSTRUCT_U8_VEC3 492L
#undef Java_Main_E_OP_CONSTRUCT_U8_VEC4
#define Java_Main_E_OP_CONSTRUCT_U8_VEC4 493L
#undef Java_Main_E_OP_CONSTRUCT_I16_VEC2
#define Java_Main_E_OP_CONSTRUCT_I16_VEC2 494L
#undef Java_Main_E_OP_CONSTRUCT_I16_VEC3
#define Java_Main_E_OP_CONSTRUCT_I16_VEC3 495L
#undef Java_Main_E_OP_CONSTRUCT_I16_VEC4
#define Java_Main_E_OP_CONSTRUCT_I16_VEC4 496L
#undef Java_Main_E_OP_CONSTRUCT_U16_VEC2
#define Java_Main_E_OP_CONSTRUCT_U16_VEC2 497L
#undef Java_Main_E_OP_CONSTRUCT_U16_VEC3
#define Java_Main_E_OP_CONSTRUCT_U16_VEC3 498L
#undef Java_Main_E_OP_CONSTRUCT_U16_VEC4
#define Java_Main_E_OP_CONSTRUCT_U16_VEC4 499L
#undef Java_Main_E_OP_CONSTRUCT_IVEC2
#define Java_Main_E_OP_CONSTRUCT_IVEC2 500L
#undef Java_Main_E_OP_CONSTRUCT_IVEC3
#define Java_Main_E_OP_CONSTRUCT_IVEC3 501L
#undef Java_Main_E_OP_CONSTRUCT_IVEC4
#define Java_Main_E_OP_CONSTRUCT_IVEC4 502L
#undef Java_Main_E_OP_CONSTRUCT_UVEC2
#define Java_Main_E_OP_CONSTRUCT_UVEC2 503L
#undef Java_Main_E_OP_CONSTRUCT_UVEC3
#define Java_Main_E_OP_CONSTRUCT_UVEC3 504L
#undef Java_Main_E_OP_CONSTRUCT_UVEC4
#define Java_Main_E_OP_CONSTRUCT_UVEC4 505L
#undef Java_Main_E_OP_CONSTRUCT_I64_VEC2
#define Java_Main_E_OP_CONSTRUCT_I64_VEC2 506L
#undef Java_Main_E_OP_CONSTRUCT_I64_VEC3
#define Java_Main_E_OP_CONSTRUCT_I64_VEC3 507L
#undef Java_Main_E_OP_CONSTRUCT_I64_VEC4
#define Java_Main_E_OP_CONSTRUCT_I64_VEC4 508L
#undef Java_Main_E_OP_CONSTRUCT_U64_VEC2
#define Java_Main_E_OP_CONSTRUCT_U64_VEC2 509L
#undef Java_Main_E_OP_CONSTRUCT_U64_VEC3
#define Java_Main_E_OP_CONSTRUCT_U64_VEC3 510L
#undef Java_Main_E_OP_CONSTRUCT_U64_VEC4
#define Java_Main_E_OP_CONSTRUCT_U64_VEC4 511L
#undef Java_Main_E_OP_CONSTRUCT_DMAT2X2
#define Java_Main_E_OP_CONSTRUCT_DMAT2X2 512L
#undef Java_Main_E_OP_CONSTRUCT_DMAT2X3
#define Java_Main_E_OP_CONSTRUCT_DMAT2X3 513L
#undef Java_Main_E_OP_CONSTRUCT_DMAT2X4
#define Java_Main_E_OP_CONSTRUCT_DMAT2X4 514L
#undef Java_Main_E_OP_CONSTRUCT_DMAT3X2
#define Java_Main_E_OP_CONSTRUCT_DMAT3X2 515L
#undef Java_Main_E_OP_CONSTRUCT_DMAT3X3
#define Java_Main_E_OP_CONSTRUCT_DMAT3X3 516L
#undef Java_Main_E_OP_CONSTRUCT_DMAT3X4
#define Java_Main_E_OP_CONSTRUCT_DMAT3X4 517L
#undef Java_Main_E_OP_CONSTRUCT_DMAT4X2
#define Java_Main_E_OP_CONSTRUCT_DMAT4X2 518L
#undef Java_Main_E_OP_CONSTRUCT_DMAT4X3
#define Java_Main_E_OP_CONSTRUCT_DMAT4X3 519L
#undef Java_Main_E_OP_CONSTRUCT_DMAT4X4
#define Java_Main_E_OP_CONSTRUCT_DMAT4X4 520L
#undef Java_Main_E_OP_CONSTRUCT_IMAT2X2
#define Java_Main_E_OP_CONSTRUCT_IMAT2X2 521L
#undef Java_Main_E_OP_CONSTRUCT_IMAT2X3
#define Java_Main_E_OP_CONSTRUCT_IMAT2X3 522L
#undef Java_Main_E_OP_CONSTRUCT_IMAT2X4
#define Java_Main_E_OP_CONSTRUCT_IMAT2X4 523L
#undef Java_Main_E_OP_CONSTRUCT_IMAT3X2
#define Java_Main_E_OP_CONSTRUCT_IMAT3X2 524L
#undef Java_Main_E_OP_CONSTRUCT_IMAT3X3
#define Java_Main_E_OP_CONSTRUCT_IMAT3X3 525L
#undef Java_Main_E_OP_CONSTRUCT_IMAT3X4
#define Java_Main_E_OP_CONSTRUCT_IMAT3X4 526L
#undef Java_Main_E_OP_CONSTRUCT_IMAT4X2
#define Java_Main_E_OP_CONSTRUCT_IMAT4X2 527L
#undef Java_Main_E_OP_CONSTRUCT_IMAT4X3
#define Java_Main_E_OP_CONSTRUCT_IMAT4X3 528L
#undef Java_Main_E_OP_CONSTRUCT_IMAT4X4
#define Java_Main_E_OP_CONSTRUCT_IMAT4X4 529L
#undef Java_Main_E_OP_CONSTRUCT_UMAT2X2
#define Java_Main_E_OP_CONSTRUCT_UMAT2X2 530L
#undef Java_Main_E_OP_CONSTRUCT_UMAT2X3
#define Java_Main_E_OP_CONSTRUCT_UMAT2X3 531L
#undef Java_Main_E_OP_CONSTRUCT_UMAT2X4
#define Java_Main_E_OP_CONSTRUCT_UMAT2X4 532L
#undef Java_Main_E_OP_CONSTRUCT_UMAT3X2
#define Java_Main_E_OP_CONSTRUCT_UMAT3X2 533L
#undef Java_Main_E_OP_CONSTRUCT_UMAT3X3
#define Java_Main_E_OP_CONSTRUCT_UMAT3X3 534L
#undef Java_Main_E_OP_CONSTRUCT_UMAT3X4
#define Java_Main_E_OP_CONSTRUCT_UMAT3X4 535L
#undef Java_Main_E_OP_CONSTRUCT_UMAT4X2
#define Java_Main_E_OP_CONSTRUCT_UMAT4X2 536L
#undef Java_Main_E_OP_CONSTRUCT_UMAT4X3
#define Java_Main_E_OP_CONSTRUCT_UMAT4X3 537L
#undef Java_Main_E_OP_CONSTRUCT_UMAT4X4
#define Java_Main_E_OP_CONSTRUCT_UMAT4X4 538L
#undef Java_Main_E_OP_CONSTRUCT_BMAT2X2
#define Java_Main_E_OP_CONSTRUCT_BMAT2X2 539L
#undef Java_Main_E_OP_CONSTRUCT_BMAT2X3
#define Java_Main_E_OP_CONSTRUCT_BMAT2X3 540L
#undef Java_Main_E_OP_CONSTRUCT_BMAT2X4
#define Java_Main_E_OP_CONSTRUCT_BMAT2X4 541L
#undef Java_Main_E_OP_CONSTRUCT_BMAT3X2
#define Java_Main_E_OP_CONSTRUCT_BMAT3X2 542L
#undef Java_Main_E_OP_CONSTRUCT_BMAT3X3
#define Java_Main_E_OP_CONSTRUCT_BMAT3X3 543L
#undef Java_Main_E_OP_CONSTRUCT_BMAT3X4
#define Java_Main_E_OP_CONSTRUCT_BMAT3X4 544L
#undef Java_Main_E_OP_CONSTRUCT_BMAT4X2
#define Java_Main_E_OP_CONSTRUCT_BMAT4X2 545L
#undef Java_Main_E_OP_CONSTRUCT_BMAT4X3
#define Java_Main_E_OP_CONSTRUCT_BMAT4X3 546L
#undef Java_Main_E_OP_CONSTRUCT_BMAT4X4
#define Java_Main_E_OP_CONSTRUCT_BMAT4X4 547L
#undef Java_Main_E_OP_CONSTRUCT_FLOAT16
#define Java_Main_E_OP_CONSTRUCT_FLOAT16 548L
#undef Java_Main_E_OP_CONSTRUCT_F16_VEC2
#define Java_Main_E_OP_CONSTRUCT_F16_VEC2 549L
#undef Java_Main_E_OP_CONSTRUCT_F16_VEC3
#define Java_Main_E_OP_CONSTRUCT_F16_VEC3 550L
#undef Java_Main_E_OP_CONSTRUCT_F16_VEC4
#define Java_Main_E_OP_CONSTRUCT_F16_VEC4 551L
#undef Java_Main_E_OP_CONSTRUCT_F16_MAT2X2
#define Java_Main_E_OP_CONSTRUCT_F16_MAT2X2 552L
#undef Java_Main_E_OP_CONSTRUCT_F16_MAT2X3
#define Java_Main_E_OP_CONSTRUCT_F16_MAT2X3 553L
#undef Java_Main_E_OP_CONSTRUCT_F16_MAT2X4
#define Java_Main_E_OP_CONSTRUCT_F16_MAT2X4 554L
#undef Java_Main_E_OP_CONSTRUCT_F16_MAT3X2
#define Java_Main_E_OP_CONSTRUCT_F16_MAT3X2 555L
#undef Java_Main_E_OP_CONSTRUCT_F16_MAT3X3
#define Java_Main_E_OP_CONSTRUCT_F16_MAT3X3 556L
#undef Java_Main_E_OP_CONSTRUCT_F16_MAT3X4
#define Java_Main_E_OP_CONSTRUCT_F16_MAT3X4 557L
#undef Java_Main_E_OP_CONSTRUCT_F16_MAT4X2
#define Java_Main_E_OP_CONSTRUCT_F16_MAT4X2 558L
#undef Java_Main_E_OP_CONSTRUCT_F16_MAT4X3
#define Java_Main_E_OP_CONSTRUCT_F16_MAT4X3 559L
#undef Java_Main_E_OP_CONSTRUCT_F16_MAT4X4
#define Java_Main_E_OP_CONSTRUCT_F16_MAT4X4 560L
#undef Java_Main_E_OP_CONSTRUCT_STRUCT
#define Java_Main_E_OP_CONSTRUCT_STRUCT 561L
#undef Java_Main_E_OP_CONSTRUCT_TEXTURE_SAMPLER
#define Java_Main_E_OP_CONSTRUCT_TEXTURE_SAMPLER 562L
#undef Java_Main_E_OP_CONSTRUCT_NONUNIFORM
#define Java_Main_E_OP_CONSTRUCT_NONUNIFORM 563L
#undef Java_Main_E_OP_CONSTRUCT_REFERENCE
#define Java_Main_E_OP_CONSTRUCT_REFERENCE 564L
#undef Java_Main_E_OP_CONSTRUCT_COOPERATIVE_MATRIX
#define Java_Main_E_OP_CONSTRUCT_COOPERATIVE_MATRIX 565L
#undef Java_Main_E_OP_CONSTRUCT_GUARD_END
#define Java_Main_E_OP_CONSTRUCT_GUARD_END 566L
#undef Java_Main_E_OP_ASSIGN
#define Java_Main_E_OP_ASSIGN 567L
#undef Java_Main_E_OP_ADD_ASSIGN
#define Java_Main_E_OP_ADD_ASSIGN 568L
#undef Java_Main_E_OP_SUB_ASSIGN
#define Java_Main_E_OP_SUB_ASSIGN 569L
#undef Java_Main_E_OP_MUL_ASSIGN
#define Java_Main_E_OP_MUL_ASSIGN 570L
#undef Java_Main_E_OP_VECTOR_TIMES_MATRIX_ASSIGN
#define Java_Main_E_OP_VECTOR_TIMES_MATRIX_ASSIGN 571L
#undef Java_Main_E_OP_VECTOR_TIMES_SCALAR_ASSIGN
#define Java_Main_E_OP_VECTOR_TIMES_SCALAR_ASSIGN 572L
#undef Java_Main_E_OP_MATRIX_TIMES_SCALAR_ASSIGN
#define Java_Main_E_OP_MATRIX_TIMES_SCALAR_ASSIGN 573L
#undef Java_Main_E_OP_MATRIX_TIMES_MATRIX_ASSIGN
#define Java_Main_E_OP_MATRIX_TIMES_MATRIX_ASSIGN 574L
#undef Java_Main_E_OP_DIV_ASSIGN
#define Java_Main_E_OP_DIV_ASSIGN 575L
#undef Java_Main_E_OP_MOD_ASSIGN
#define Java_Main_E_OP_MOD_ASSIGN 576L
#undef Java_Main_E_OP_AND_ASSIGN
#define Java_Main_E_OP_AND_ASSIGN 577L
#undef Java_Main_E_OP_INCLUSIVE_OR_ASSIGN
#define Java_Main_E_OP_INCLUSIVE_OR_ASSIGN 578L
#undef Java_Main_E_OP_EXCLUSIVE_OR_ASSIGN
#define Java_Main_E_OP_EXCLUSIVE_OR_ASSIGN 579L
#undef Java_Main_E_OP_LEFT_SHIFT_ASSIGN
#define Java_Main_E_OP_LEFT_SHIFT_ASSIGN 580L
#undef Java_Main_E_OP_RIGHT_SHIFT_ASSIGN
#define Java_Main_E_OP_RIGHT_SHIFT_ASSIGN 581L
#undef Java_Main_E_OP_ARRAY_LENGTH
#define Java_Main_E_OP_ARRAY_LENGTH 582L
#undef Java_Main_E_OP_IMAGE_GUARD_BEGIN
#define Java_Main_E_OP_IMAGE_GUARD_BEGIN 583L
#undef Java_Main_E_OP_IMAGE_QUERY_SIZE
#define Java_Main_E_OP_IMAGE_QUERY_SIZE 584L
#undef Java_Main_E_OP_IMAGE_QUERY_SAMPLES
#define Java_Main_E_OP_IMAGE_QUERY_SAMPLES 585L
#undef Java_Main_E_OP_IMAGE_LOAD
#define Java_Main_E_OP_IMAGE_LOAD 586L
#undef Java_Main_E_OP_IMAGE_STORE
#define Java_Main_E_OP_IMAGE_STORE 587L
#undef Java_Main_E_OP_IMAGE_LOAD_LOD
#define Java_Main_E_OP_IMAGE_LOAD_LOD 588L
#undef Java_Main_E_OP_IMAGE_STORE_LOD
#define Java_Main_E_OP_IMAGE_STORE_LOD 589L
#undef Java_Main_E_OP_IMAGE_ATOMIC_ADD
#define Java_Main_E_OP_IMAGE_ATOMIC_ADD 590L
#undef Java_Main_E_OP_IMAGE_ATOMIC_MIN
#define Java_Main_E_OP_IMAGE_ATOMIC_MIN 591L
#undef Java_Main_E_OP_IMAGE_ATOMIC_MAX
#define Java_Main_E_OP_IMAGE_ATOMIC_MAX 592L
#undef Java_Main_E_OP_IMAGE_ATOMIC_AND
#define Java_Main_E_OP_IMAGE_ATOMIC_AND 593L
#undef Java_Main_E_OP_IMAGE_ATOMIC_OR
#define Java_Main_E_OP_IMAGE_ATOMIC_OR 594L
#undef Java_Main_E_OP_IMAGE_ATOMIC_XOR
#define Java_Main_E_OP_IMAGE_ATOMIC_XOR 595L
#undef Java_Main_E_OP_IMAGE_ATOMIC_EXCHANGE
#define Java_Main_E_OP_IMAGE_ATOMIC_EXCHANGE 596L
#undef Java_Main_E_OP_IMAGE_ATOMIC_COMP_SWAP
#define Java_Main_E_OP_IMAGE_ATOMIC_COMP_SWAP 597L
#undef Java_Main_E_OP_IMAGE_ATOMIC_LOAD
#define Java_Main_E_OP_IMAGE_ATOMIC_LOAD 598L
#undef Java_Main_E_OP_IMAGE_ATOMIC_STORE
#define Java_Main_E_OP_IMAGE_ATOMIC_STORE 599L
#undef Java_Main_E_OP_SUBPASS_LOAD
#define Java_Main_E_OP_SUBPASS_LOAD 600L
#undef Java_Main_E_OP_SUBPASS_LOAD_MS
#define Java_Main_E_OP_SUBPASS_LOAD_MS 601L
#undef Java_Main_E_OP_SPARSE_IMAGE_LOAD
#define Java_Main_E_OP_SPARSE_IMAGE_LOAD 602L
#undef Java_Main_E_OP_SPARSE_IMAGE_LOAD_LOD
#define Java_Main_E_OP_SPARSE_IMAGE_LOAD_LOD 603L
#undef Java_Main_E_OP_IMAGE_GUARD_END
#define Java_Main_E_OP_IMAGE_GUARD_END 604L
#undef Java_Main_E_OP_TEXTURE_GUARD_BEGIN
#define Java_Main_E_OP_TEXTURE_GUARD_BEGIN 605L
#undef Java_Main_E_OP_TEXTURE_QUERY_SIZE
#define Java_Main_E_OP_TEXTURE_QUERY_SIZE 606L
#undef Java_Main_E_OP_TEXTURE_QUERY_LOD
#define Java_Main_E_OP_TEXTURE_QUERY_LOD 607L
#undef Java_Main_E_OP_TEXTURE_QUERY_LEVELS
#define Java_Main_E_OP_TEXTURE_QUERY_LEVELS 608L
#undef Java_Main_E_OP_TEXTURE_QUERY_SAMPLES
#define Java_Main_E_OP_TEXTURE_QUERY_SAMPLES 609L
#undef Java_Main_E_OP_SAMPLING_GUARD_BEGIN
#define Java_Main_E_OP_SAMPLING_GUARD_BEGIN 610L
#undef Java_Main_E_OP_TEXTURE
#define Java_Main_E_OP_TEXTURE 611L
#undef Java_Main_E_OP_TEXTURE_PROJ
#define Java_Main_E_OP_TEXTURE_PROJ 612L
#undef Java_Main_E_OP_TEXTURE_LOD
#define Java_Main_E_OP_TEXTURE_LOD 613L
#undef Java_Main_E_OP_TEXTURE_OFFSET
#define Java_Main_E_OP_TEXTURE_OFFSET 614L
#undef Java_Main_E_OP_TEXTURE_FETCH
#define Java_Main_E_OP_TEXTURE_FETCH 615L
#undef Java_Main_E_OP_TEXTURE_FETCH_OFFSET
#define Java_Main_E_OP_TEXTURE_FETCH_OFFSET 616L
#undef Java_Main_E_OP_TEXTURE_PROJ_OFFSET
#define Java_Main_E_OP_TEXTURE_PROJ_OFFSET 617L
#undef Java_Main_E_OP_TEXTURE_LOD_OFFSET
#define Java_Main_E_OP_TEXTURE_LOD_OFFSET 618L
#undef Java_Main_E_OP_TEXTURE_PROJ_LOD
#define Java_Main_E_OP_TEXTURE_PROJ_LOD 619L
#undef Java_Main_E_OP_TEXTURE_PROJ_LOD_OFFSET
#define Java_Main_E_OP_TEXTURE_PROJ_LOD_OFFSET 620L
#undef Java_Main_E_OP_TEXTURE_GRAD
#define Java_Main_E_OP_TEXTURE_GRAD 621L
#undef Java_Main_E_OP_TEXTURE_GRAD_OFFSET
#define Java_Main_E_OP_TEXTURE_GRAD_OFFSET 622L
#undef Java_Main_E_OP_TEXTURE_PROJ_GRAD
#define Java_Main_E_OP_TEXTURE_PROJ_GRAD 623L
#undef Java_Main_E_OP_TEXTURE_PROJ_GRAD_OFFSET
#define Java_Main_E_OP_TEXTURE_PROJ_GRAD_OFFSET 624L
#undef Java_Main_E_OP_TEXTURE_GATHER
#define Java_Main_E_OP_TEXTURE_GATHER 625L
#undef Java_Main_E_OP_TEXTURE_GATHER_OFFSET
#define Java_Main_E_OP_TEXTURE_GATHER_OFFSET 626L
#undef Java_Main_E_OP_TEXTURE_GATHER_OFFSETS
#define Java_Main_E_OP_TEXTURE_GATHER_OFFSETS 627L
#undef Java_Main_E_OP_TEXTURE_CLAMP
#define Java_Main_E_OP_TEXTURE_CLAMP 628L
#undef Java_Main_E_OP_TEXTURE_OFFSET_CLAMP
#define Java_Main_E_OP_TEXTURE_OFFSET_CLAMP 629L
#undef Java_Main_E_OP_TEXTURE_GRAD_CLAMP
#define Java_Main_E_OP_TEXTURE_GRAD_CLAMP 630L
#undef Java_Main_E_OP_TEXTURE_GRAD_OFFSET_CLAMP
#define Java_Main_E_OP_TEXTURE_GRAD_OFFSET_CLAMP 631L
#undef Java_Main_E_OP_TEXTURE_GATHER_LOD
#define Java_Main_E_OP_TEXTURE_GATHER_LOD 632L
#undef Java_Main_E_OP_TEXTURE_GATHER_LOD_OFFSET
#define Java_Main_E_OP_TEXTURE_GATHER_LOD_OFFSET 633L
#undef Java_Main_E_OP_TEXTURE_GATHER_LOD_OFFSETS
#define Java_Main_E_OP_TEXTURE_GATHER_LOD_OFFSETS 634L
#undef Java_Main_E_OP_FRAGMENT_MASK_FETCH
#define Java_Main_E_OP_FRAGMENT_MASK_FETCH 635L
#undef Java_Main_E_OP_FRAGMENT_FETCH
#define Java_Main_E_OP_FRAGMENT_FETCH 636L
#undef Java_Main_E_OP_SPARSE_TEXTURE_GUARD_BEGIN
#define Java_Main_E_OP_SPARSE_TEXTURE_GUARD_BEGIN 637L
#undef Java_Main_E_OP_SPARSE_TEXTURE
#define Java_Main_E_OP_SPARSE_TEXTURE 638L
#undef Java_Main_E_OP_SPARSE_TEXTURE_LOD
#define Java_Main_E_OP_SPARSE_TEXTURE_LOD 639L
#undef Java_Main_E_OP_SPARSE_TEXTURE_OFFSET
#define Java_Main_E_OP_SPARSE_TEXTURE_OFFSET 640L
#undef Java_Main_E_OP_SPARSE_TEXTURE_FETCH
#define Java_Main_E_OP_SPARSE_TEXTURE_FETCH 641L
#undef Java_Main_E_OP_SPARSE_TEXTURE_FETCH_OFFSET
#define Java_Main_E_OP_SPARSE_TEXTURE_FETCH_OFFSET 642L
#undef Java_Main_E_OP_SPARSE_TEXTURE_LOD_OFFSET
#define Java_Main_E_OP_SPARSE_TEXTURE_LOD_OFFSET 643L
#undef Java_Main_E_OP_SPARSE_TEXTURE_GRAD
#define Java_Main_E_OP_SPARSE_TEXTURE_GRAD 644L
#undef Java_Main_E_OP_SPARSE_TEXTURE_GRAD_OFFSET
#define Java_Main_E_OP_SPARSE_TEXTURE_GRAD_OFFSET 645L
#undef Java_Main_E_OP_SPARSE_TEXTURE_GATHER
#define Java_Main_E_OP_SPARSE_TEXTURE_GATHER 646L
#undef Java_Main_E_OP_SPARSE_TEXTURE_GATHER_OFFSET
#define Java_Main_E_OP_SPARSE_TEXTURE_GATHER_OFFSET 647L
#undef Java_Main_E_OP_SPARSE_TEXTURE_GATHER_OFFSETS
#define Java_Main_E_OP_SPARSE_TEXTURE_GATHER_OFFSETS 648L
#undef Java_Main_E_OP_SPARSE_TEXELS_RESIDENT
#define Java_Main_E_OP_SPARSE_TEXELS_RESIDENT 649L
#undef Java_Main_E_OP_SPARSE_TEXTURE_CLAMP
#define Java_Main_E_OP_SPARSE_TEXTURE_CLAMP 650L
#undef Java_Main_E_OP_SPARSE_TEXTURE_OFFSET_CLAMP
#define Java_Main_E_OP_SPARSE_TEXTURE_OFFSET_CLAMP 651L
#undef Java_Main_E_OP_SPARSE_TEXTURE_GRAD_CLAMP
#define Java_Main_E_OP_SPARSE_TEXTURE_GRAD_CLAMP 652L
#undef Java_Main_E_OP_SPARSE_TEXTURE_GRAD_OFFSET_CLAMP
#define Java_Main_E_OP_SPARSE_TEXTURE_GRAD_OFFSET_CLAMP 653L
#undef Java_Main_E_OP_SPARSE_TEXTURE_GATHER_LOD
#define Java_Main_E_OP_SPARSE_TEXTURE_GATHER_LOD 654L
#undef Java_Main_E_OP_SPARSE_TEXTURE_GATHER_LOD_OFFSET
#define Java_Main_E_OP_SPARSE_TEXTURE_GATHER_LOD_OFFSET 655L
#undef Java_Main_E_OP_SPARSE_TEXTURE_GATHER_LOD_OFFSETS
#define Java_Main_E_OP_SPARSE_TEXTURE_GATHER_LOD_OFFSETS 656L
#undef Java_Main_E_OP_SPARSE_TEXTURE_GUARD_END
#define Java_Main_E_OP_SPARSE_TEXTURE_GUARD_END 657L
#undef Java_Main_E_OP_IMAGE_FOOTPRINT_GUARD_BEGIN
#define Java_Main_E_OP_IMAGE_FOOTPRINT_GUARD_BEGIN 658L
#undef Java_Main_E_OP_IMAGE_SAMPLE_FOOTPRINT_NV
#define Java_Main_E_OP_IMAGE_SAMPLE_FOOTPRINT_NV 659L
#undef Java_Main_E_OP_IMAGE_SAMPLE_FOOTPRINT_CLAMP_NV
#define Java_Main_E_OP_IMAGE_SAMPLE_FOOTPRINT_CLAMP_NV 660L
#undef Java_Main_E_OP_IMAGE_SAMPLE_FOOTPRINT_LOD_NV
#define Java_Main_E_OP_IMAGE_SAMPLE_FOOTPRINT_LOD_NV 661L
#undef Java_Main_E_OP_IMAGE_SAMPLE_FOOTPRINT_GRAD_NV
#define Java_Main_E_OP_IMAGE_SAMPLE_FOOTPRINT_GRAD_NV 662L
#undef Java_Main_E_OP_IMAGE_SAMPLE_FOOTPRINT_GRAD_CLAMP_NV
#define Java_Main_E_OP_IMAGE_SAMPLE_FOOTPRINT_GRAD_CLAMP_NV 663L
#undef Java_Main_E_OP_IMAGE_FOOTPRINT_GUARD_END
#define Java_Main_E_OP_IMAGE_FOOTPRINT_GUARD_END 664L
#undef Java_Main_E_OP_SAMPLING_GUARD_END
#define Java_Main_E_OP_SAMPLING_GUARD_END 665L
#undef Java_Main_E_OP_TEXTURE_GUARD_END
#define Java_Main_E_OP_TEXTURE_GUARD_END 666L
#undef Java_Main_E_OP_ADD_CARRY
#define Java_Main_E_OP_ADD_CARRY 667L
#undef Java_Main_E_OP_SUB_BORROW
#define Java_Main_E_OP_SUB_BORROW 668L
#undef Java_Main_E_OP_UMULEXTENDED
#define Java_Main_E_OP_UMULEXTENDED 669L
#undef Java_Main_E_OP_IMULEXTENDED
#define Java_Main_E_OP_IMULEXTENDED 670L
#undef Java_Main_E_OP_BITFIELD_EXTRACT
#define Java_Main_E_OP_BITFIELD_EXTRACT 671L
#undef Java_Main_E_OP_BITFIELD_INSERT
#define Java_Main_E_OP_BITFIELD_INSERT 672L
#undef Java_Main_E_OP_BIT_FIELD_REVERSE
#define Java_Main_E_OP_BIT_FIELD_REVERSE 673L
#undef Java_Main_E_OP_BIT_COUNT
#define Java_Main_E_OP_BIT_COUNT 674L
#undef Java_Main_E_OP_FIND_LSB
#define Java_Main_E_OP_FIND_LSB 675L
#undef Java_Main_E_OP_FIND_MSB
#define Java_Main_E_OP_FIND_MSB 676L
#undef Java_Main_E_OP_COUNT_LEADING_ZEROS
#define Java_Main_E_OP_COUNT_LEADING_ZEROS 677L
#undef Java_Main_E_OP_COUNT_TRAILING_ZEROS
#define Java_Main_E_OP_COUNT_TRAILING_ZEROS 678L
#undef Java_Main_E_OP_ABS_DIFFERENCE
#define Java_Main_E_OP_ABS_DIFFERENCE 679L
#undef Java_Main_E_OP_ADD_SATURATE
#define Java_Main_E_OP_ADD_SATURATE 680L
#undef Java_Main_E_OP_SUB_SATURATE
#define Java_Main_E_OP_SUB_SATURATE 681L
#undef Java_Main_E_OP_AVERAGE
#define Java_Main_E_OP_AVERAGE 682L
#undef Java_Main_E_OP_AVERAGE_ROUNDED
#define Java_Main_E_OP_AVERAGE_ROUNDED 683L
#undef Java_Main_E_OP_MUL32X16
#define Java_Main_E_OP_MUL32X16 684L
#undef Java_Main_E_OP_TRACE
#define Java_Main_E_OP_TRACE 685L
#undef Java_Main_E_OP_REPORT_INTERSECTION
#define Java_Main_E_OP_REPORT_INTERSECTION 686L
#undef Java_Main_E_OP_IGNORE_INTERSECTION
#define Java_Main_E_OP_IGNORE_INTERSECTION 687L
#undef Java_Main_E_OP_TERMINATE_RAY
#define Java_Main_E_OP_TERMINATE_RAY 688L
#undef Java_Main_E_OP_EXECUTE_CALLABLE
#define Java_Main_E_OP_EXECUTE_CALLABLE 689L
#undef Java_Main_E_OP_WRITE_PACKED_PRIMITIVE_INDICES4X8_NV
#define Java_Main_E_OP_WRITE_PACKED_PRIMITIVE_INDICES4X8_NV 690L
#undef Java_Main_E_OP_RAY_QUERY_INITIALIZE
#define Java_Main_E_OP_RAY_QUERY_INITIALIZE 691L
#undef Java_Main_E_OP_RAY_QUERY_TERMINATE
#define Java_Main_E_OP_RAY_QUERY_TERMINATE 692L
#undef Java_Main_E_OP_RAY_QUERY_GENERATE_INTERSECTION
#define Java_Main_E_OP_RAY_QUERY_GENERATE_INTERSECTION 693L
#undef Java_Main_E_OP_RAY_QUERY_CONFIRM_INTERSECTION
#define Java_Main_E_OP_RAY_QUERY_CONFIRM_INTERSECTION 694L
#undef Java_Main_E_OP_RAY_QUERY_PROCEED
#define Java_Main_E_OP_RAY_QUERY_PROCEED 695L
#undef Java_Main_E_OP_RAY_QUERY_GET_INTERSECTION_TYPE
#define Java_Main_E_OP_RAY_QUERY_GET_INTERSECTION_TYPE 696L
#undef Java_Main_E_OP_RAY_QUERY_GET_RAY_TMIN
#define Java_Main_E_OP_RAY_QUERY_GET_RAY_TMIN 697L
#undef Java_Main_E_OP_RAY_QUERY_GET_RAY_FLAGS
#define Java_Main_E_OP_RAY_QUERY_GET_RAY_FLAGS 698L
#undef Java_Main_E_OP_RAY_QUERY_GET_INTERSECTIONT
#define Java_Main_E_OP_RAY_QUERY_GET_INTERSECTIONT 699L
#undef Java_Main_E_OP_RAY_QUERY_GET_INTERSECTION_INSTANCE_CUSTOM_INDEX
#define Java_Main_E_OP_RAY_QUERY_GET_INTERSECTION_INSTANCE_CUSTOM_INDEX 700L
#undef Java_Main_E_OP_RAY_QUERY_GET_INTERSECTION_INSTANCE_ID
#define Java_Main_E_OP_RAY_QUERY_GET_INTERSECTION_INSTANCE_ID 701L
#undef Java_Main_E_OP_RAY_QUERY_GET_INTERSECTION_INSTANCE_SHADER_BINDING_TABLE_RECORD_OFFSET
#define Java_Main_E_OP_RAY_QUERY_GET_INTERSECTION_INSTANCE_SHADER_BINDING_TABLE_RECORD_OFFSET 702L
#undef Java_Main_E_OP_RAY_QUERY_GET_INTERSECTION_GEOMETRY_INDEX
#define Java_Main_E_OP_RAY_QUERY_GET_INTERSECTION_GEOMETRY_INDEX 703L
#undef Java_Main_E_OP_RAY_QUERY_GET_INTERSECTION_PRIMITIVE_INDEX
#define Java_Main_E_OP_RAY_QUERY_GET_INTERSECTION_PRIMITIVE_INDEX 704L
#undef Java_Main_E_OP_RAY_QUERY_GET_INTERSECTION_BARYCENTRICS
#define Java_Main_E_OP_RAY_QUERY_GET_INTERSECTION_BARYCENTRICS 705L
#undef Java_Main_E_OP_RAY_QUERY_GET_INTERSECTION_FRONT_FACE
#define Java_Main_E_OP_RAY_QUERY_GET_INTERSECTION_FRONT_FACE 706L
#undef Java_Main_E_OP_RAY_QUERY_GET_INTERSECTION_CANDIDATE_AABBOPAQUE
#define Java_Main_E_OP_RAY_QUERY_GET_INTERSECTION_CANDIDATE_AABBOPAQUE 707L
#undef Java_Main_E_OP_RAY_QUERY_GET_INTERSECTION_OBJECT_RAY_DIRECTION
#define Java_Main_E_OP_RAY_QUERY_GET_INTERSECTION_OBJECT_RAY_DIRECTION 708L
#undef Java_Main_E_OP_RAY_QUERY_GET_INTERSECTION_OBJECT_RAY_ORIGIN
#define Java_Main_E_OP_RAY_QUERY_GET_INTERSECTION_OBJECT_RAY_ORIGIN 709L
#undef Java_Main_E_OP_RAY_QUERY_GET_WORLD_RAY_DIRECTION
#define Java_Main_E_OP_RAY_QUERY_GET_WORLD_RAY_DIRECTION 710L
#undef Java_Main_E_OP_RAY_QUERY_GET_WORLD_RAY_ORIGIN
#define Java_Main_E_OP_RAY_QUERY_GET_WORLD_RAY_ORIGIN 711L
#undef Java_Main_E_OP_RAY_QUERY_GET_INTERSECTION_OBJECT_TO_WORLD
#define Java_Main_E_OP_RAY_QUERY_GET_INTERSECTION_OBJECT_TO_WORLD 712L
#undef Java_Main_E_OP_RAY_QUERY_GET_INTERSECTION_WORLD_TO_OBJECT
#define Java_Main_E_OP_RAY_QUERY_GET_INTERSECTION_WORLD_TO_OBJECT 713L
#undef Java_Main_E_OP_CLIP
#define Java_Main_E_OP_CLIP 714L
#undef Java_Main_E_OP_IS_FINITE
#define Java_Main_E_OP_IS_FINITE 715L
#undef Java_Main_E_OP_LOG10
#define Java_Main_E_OP_LOG10 716L
#undef Java_Main_E_OP_RCP
#define Java_Main_E_OP_RCP 717L
#undef Java_Main_E_OP_SATURATE
#define Java_Main_E_OP_SATURATE 718L
#undef Java_Main_E_OP_SIN_COS
#define Java_Main_E_OP_SIN_COS 719L
#undef Java_Main_E_OP_GEN_MUL
#define Java_Main_E_OP_GEN_MUL 720L
#undef Java_Main_E_OP_DST
#define Java_Main_E_OP_DST 721L
#undef Java_Main_E_OP_INTERLOCKED_ADD
#define Java_Main_E_OP_INTERLOCKED_ADD 722L
#undef Java_Main_E_OP_INTERLOCKED_AND
#define Java_Main_E_OP_INTERLOCKED_AND 723L
#undef Java_Main_E_OP_INTERLOCKED_COMPARE_EXCHANGE
#define Java_Main_E_OP_INTERLOCKED_COMPARE_EXCHANGE 724L
#undef Java_Main_E_OP_INTERLOCKED_COMPARE_STORE
#define Java_Main_E_OP_INTERLOCKED_COMPARE_STORE 725L
#undef Java_Main_E_OP_INTERLOCKED_EXCHANGE
#define Java_Main_E_OP_INTERLOCKED_EXCHANGE 726L
#undef Java_Main_E_OP_INTERLOCKED_MAX
#define Java_Main_E_OP_INTERLOCKED_MAX 727L
#undef Java_Main_E_OP_INTERLOCKED_MIN
#define Java_Main_E_OP_INTERLOCKED_MIN 728L
#undef Java_Main_E_OP_INTERLOCKED_OR
#define Java_Main_E_OP_INTERLOCKED_OR 729L
#undef Java_Main_E_OP_INTERLOCKED_XOR
#define Java_Main_E_OP_INTERLOCKED_XOR 730L
#undef Java_Main_E_OP_ALL_MEMORY_BARRIER_WITH_GROUP_SYNC
#define Java_Main_E_OP_ALL_MEMORY_BARRIER_WITH_GROUP_SYNC 731L
#undef Java_Main_E_OP_DEVICE_MEMORY_BARRIER
#define Java_Main_E_OP_DEVICE_MEMORY_BARRIER 732L
#undef Java_Main_E_OP_DEVICE_MEMORY_BARRIER_WITH_GROUP_SYNC
#define Java_Main_E_OP_DEVICE_MEMORY_BARRIER_WITH_GROUP_SYNC 733L
#undef Java_Main_E_OP_WORKGROUP_MEMORY_BARRIER
#define Java_Main_E_OP_WORKGROUP_MEMORY_BARRIER 734L
#undef Java_Main_E_OP_WORKGROUP_MEMORY_BARRIER_WITH_GROUP_SYNC
#define Java_Main_E_OP_WORKGROUP_MEMORY_BARRIER_WITH_GROUP_SYNC 735L
#undef Java_Main_E_OP_EVALUATE_ATTRIBUTE_SNAPPED
#define Java_Main_E_OP_EVALUATE_ATTRIBUTE_SNAPPED 736L
#undef Java_Main_E_OP_F32TOF16
#define Java_Main_E_OP_F32TOF16 737L
#undef Java_Main_E_OP_F16TOF32
#define Java_Main_E_OP_F16TOF32 738L
#undef Java_Main_E_OP_LIT
#define Java_Main_E_OP_LIT 739L
#undef Java_Main_E_OP_TEXTURE_BIAS
#define Java_Main_E_OP_TEXTURE_BIAS 740L
#undef Java_Main_E_OP_AS_DOUBLE
#define Java_Main_E_OP_AS_DOUBLE 741L
#undef Java_Main_E_OP_D3D_COLOR_TO_UBYTE4
#define Java_Main_E_OP_D3D_COLOR_TO_UBYTE4 742L
#undef Java_Main_E_OP_METHOD_SAMPLE
#define Java_Main_E_OP_METHOD_SAMPLE 743L
#undef Java_Main_E_OP_METHOD_SAMPLE_BIAS
#define Java_Main_E_OP_METHOD_SAMPLE_BIAS 744L
#undef Java_Main_E_OP_METHOD_SAMPLE_CMP
#define Java_Main_E_OP_METHOD_SAMPLE_CMP 745L
#undef Java_Main_E_OP_METHOD_SAMPLE_CMP_LEVEL_ZERO
#define Java_Main_E_OP_METHOD_SAMPLE_CMP_LEVEL_ZERO 746L
#undef Java_Main_E_OP_METHOD_SAMPLE_GRAD
#define Java_Main_E_OP_METHOD_SAMPLE_GRAD 747L
#undef Java_Main_E_OP_METHOD_SAMPLE_LEVEL
#define Java_Main_E_OP_METHOD_SAMPLE_LEVEL 748L
#undef Java_Main_E_OP_METHOD_LOAD
#define Java_Main_E_OP_METHOD_LOAD 749L
#undef Java_Main_E_OP_METHOD_GET_DIMENSIONS
#define Java_Main_E_OP_METHOD_GET_DIMENSIONS 750L
#undef Java_Main_E_OP_METHOD_GET_SAMPLE_POSITION
#define Java_Main_E_OP_METHOD_GET_SAMPLE_POSITION 751L
#undef Java_Main_E_OP_METHOD_GATHER
#define Java_Main_E_OP_METHOD_GATHER 752L
#undef Java_Main_E_OP_METHOD_CALCULATE_LEVEL_OF_DETAIL
#define Java_Main_E_OP_METHOD_CALCULATE_LEVEL_OF_DETAIL 753L
#undef Java_Main_E_OP_METHOD_CALCULATE_LEVEL_OF_DETAIL_UNCLAMPED
#define Java_Main_E_OP_METHOD_CALCULATE_LEVEL_OF_DETAIL_UNCLAMPED 754L
#undef Java_Main_E_OP_METHOD_LOAD2
#define Java_Main_E_OP_METHOD_LOAD2 755L
#undef Java_Main_E_OP_METHOD_LOAD3
#define Java_Main_E_OP_METHOD_LOAD3 756L
#undef Java_Main_E_OP_METHOD_LOAD4
#define Java_Main_E_OP_METHOD_LOAD4 757L
#undef Java_Main_E_OP_METHOD_STORE
#define Java_Main_E_OP_METHOD_STORE 758L
#undef Java_Main_E_OP_METHOD_STORE2
#define Java_Main_E_OP_METHOD_STORE2 759L
#undef Java_Main_E_OP_METHOD_STORE3
#define Java_Main_E_OP_METHOD_STORE3 760L
#undef Java_Main_E_OP_METHOD_STORE4
#define Java_Main_E_OP_METHOD_STORE4 761L
#undef Java_Main_E_OP_METHOD_INCREMENT_COUNTER
#define Java_Main_E_OP_METHOD_INCREMENT_COUNTER 762L
#undef Java_Main_E_OP_METHOD_DECREMENT_COUNTER
#define Java_Main_E_OP_METHOD_DECREMENT_COUNTER 763L
#undef Java_Main_E_OP_METHOD_CONSUME
#define Java_Main_E_OP_METHOD_CONSUME 764L
#undef Java_Main_E_OP_METHOD_GATHER_RED
#define Java_Main_E_OP_METHOD_GATHER_RED 765L
#undef Java_Main_E_OP_METHOD_GATHER_GREEN
#define Java_Main_E_OP_METHOD_GATHER_GREEN 766L
#undef Java_Main_E_OP_METHOD_GATHER_BLUE
#define Java_Main_E_OP_METHOD_GATHER_BLUE 767L
#undef Java_Main_E_OP_METHOD_GATHER_ALPHA
#define Java_Main_E_OP_METHOD_GATHER_ALPHA 768L
#undef Java_Main_E_OP_METHOD_GATHER_CMP
#define Java_Main_E_OP_METHOD_GATHER_CMP 769L
#undef Java_Main_E_OP_METHOD_GATHER_CMP_RED
#define Java_Main_E_OP_METHOD_GATHER_CMP_RED 770L
#undef Java_Main_E_OP_METHOD_GATHER_CMP_GREEN
#define Java_Main_E_OP_METHOD_GATHER_CMP_GREEN 771L
#undef Java_Main_E_OP_METHOD_GATHER_CMP_BLUE
#define Java_Main_E_OP_METHOD_GATHER_CMP_BLUE 772L
#undef Java_Main_E_OP_METHOD_GATHER_CMP_ALPHA
#define Java_Main_E_OP_METHOD_GATHER_CMP_ALPHA 773L
#undef Java_Main_E_OP_METHOD_APPEND
#define Java_Main_E_OP_METHOD_APPEND 774L
#undef Java_Main_E_OP_METHOD_RESTART_STRIP
#define Java_Main_E_OP_METHOD_RESTART_STRIP 775L
#undef Java_Main_E_OP_MATRIX_SWIZZLE
#define Java_Main_E_OP_MATRIX_SWIZZLE 776L
#undef Java_Main_E_OP_WAVE_GET_LANE_COUNT
#define Java_Main_E_OP_WAVE_GET_LANE_COUNT 777L
#undef Java_Main_E_OP_WAVE_GET_LANE_INDEX
#define Java_Main_E_OP_WAVE_GET_LANE_INDEX 778L
#undef Java_Main_E_OP_WAVE_ACTIVE_COUNT_BITS
#define Java_Main_E_OP_WAVE_ACTIVE_COUNT_BITS 779L
#undef Java_Main_E_OP_WAVE_PREFIX_COUNT_BITS
#define Java_Main_E_OP_WAVE_PREFIX_COUNT_BITS 780L
#undef Java_Main_E_OP_READ_CLOCK_SUBGROUP_KHR
#define Java_Main_E_OP_READ_CLOCK_SUBGROUP_KHR 781L
#undef Java_Main_E_OP_READ_CLOCK_DEVICE_KHR
#define Java_Main_E_OP_READ_CLOCK_DEVICE_KHR 782L
#undef Java_Main_ELG_NONE
#define Java_Main_ELG_NONE 0L
#undef Java_Main_ELG_POINTS
#define Java_Main_ELG_POINTS 1L
#undef Java_Main_ELG_LINES
#define Java_Main_ELG_LINES 2L
#undef Java_Main_ELG_LINES_ADJACENCY
#define Java_Main_ELG_LINES_ADJACENCY 3L
#undef Java_Main_ELG_LINE_STRIP
#define Java_Main_ELG_LINE_STRIP 4L
#undef Java_Main_ELG_TRIANGLES
#define Java_Main_ELG_TRIANGLES 5L
#undef Java_Main_ELG_TRIANGLES_ADJACENCY
#define Java_Main_ELG_TRIANGLES_ADJACENCY 6L
#undef Java_Main_ELG_TRIANGLE_STRIP
#define Java_Main_ELG_TRIANGLE_STRIP 7L
#undef Java_Main_ELG_QUADS
#define Java_Main_ELG_QUADS 8L
#undef Java_Main_ELG_ISOLINES
#define Java_Main_ELG_ISOLINES 9L
#undef Java_Main_ELD_NONE
#define Java_Main_ELD_NONE 0L
#undef Java_Main_ELD_ANY
#define Java_Main_ELD_ANY 1L
#undef Java_Main_ELD_GREATER
#define Java_Main_ELD_GREATER 2L
#undef Java_Main_ELD_LESS
#define Java_Main_ELD_LESS 3L
#undef Java_Main_ELD_UNCHANGED
#define Java_Main_ELD_UNCHANGED 4L
#undef Java_Main_EIO_NONE
#define Java_Main_EIO_NONE 0L
#undef Java_Main_EIO_PIXEL_INTERLOCK_ORDERED
#define Java_Main_EIO_PIXEL_INTERLOCK_ORDERED 1L
#undef Java_Main_EIO_PIXEL_INTERLOCK_UNORDERED
#define Java_Main_EIO_PIXEL_INTERLOCK_UNORDERED 2L
#undef Java_Main_EIO_SAMPLE_INTERLOCK_ORDERED
#define Java_Main_EIO_SAMPLE_INTERLOCK_ORDERED 3L
#undef Java_Main_EIO_SAMPLE_INTERLOCK_UNORDERED
#define Java_Main_EIO_SAMPLE_INTERLOCK_UNORDERED 4L
#undef Java_Main_EIO_SHADING_RATE_INTERLOCK_ORDERED
#define Java_Main_EIO_SHADING_RATE_INTERLOCK_ORDERED 5L
#undef Java_Main_EIO_SHADING_RATE_INTERLOCK_UNORDERED
#define Java_Main_EIO_SHADING_RATE_INTERLOCK_UNORDERED 6L
#undef Java_Main_LAYOUT_DERIVATIVE_NONE
#define Java_Main_LAYOUT_DERIVATIVE_NONE 0L
#undef Java_Main_LAYOUT_DERIVATIVE_GROUP_QUADS
#define Java_Main_LAYOUT_DERIVATIVE_GROUP_QUADS 1L
#undef Java_Main_LAYOUT_DERIVATIVE_GROUP_LINEAR
#define Java_Main_LAYOUT_DERIVATIVE_GROUP_LINEAR 2L
#undef Java_Main_EVS_NONE
#define Java_Main_EVS_NONE 0L
#undef Java_Main_EVS_EQUAL
#define Java_Main_EVS_EQUAL 1L
#undef Java_Main_EVS_FRACTIONAL_EVEN
#define Java_Main_EVS_FRACTIONAL_EVEN 2L
#undef Java_Main_EVS_FRACTIONAL_ODD
#define Java_Main_EVS_FRACTIONAL_ODD 3L
#undef Java_Main_EVO_NONE
#define Java_Main_EVO_NONE 0L
#undef Java_Main_EVO_CW
#define Java_Main_EVO_CW 1L
#undef Java_Main_EVO_CCW
#define Java_Main_EVO_CCW 2L
#undef Java_Main_E_BLEND_MULTIPLY
#define Java_Main_E_BLEND_MULTIPLY 0L
#undef Java_Main_E_BLEND_SCREEN
#define Java_Main_E_BLEND_SCREEN 1L
#undef Java_Main_E_BLEND_OVERLAY
#define Java_Main_E_BLEND_OVERLAY 2L
#undef Java_Main_E_BLEND_DARKEN
#define Java_Main_E_BLEND_DARKEN 3L
#undef Java_Main_E_BLEND_LIGHTEN
#define Java_Main_E_BLEND_LIGHTEN 4L
#undef Java_Main_E_BLEND_COLORDODGE
#define Java_Main_E_BLEND_COLORDODGE 5L
#undef Java_Main_E_BLEND_COLORBURN
#define Java_Main_E_BLEND_COLORBURN 6L
#undef Java_Main_E_BLEND_HARDLIGHT
#define Java_Main_E_BLEND_HARDLIGHT 7L
#undef Java_Main_E_BLEND_SOFTLIGHT
#define Java_Main_E_BLEND_SOFTLIGHT 8L
#undef Java_Main_E_BLEND_DIFFERENCE
#define Java_Main_E_BLEND_DIFFERENCE 9L
#undef Java_Main_E_BLEND_EXCLUSION
#define Java_Main_E_BLEND_EXCLUSION 10L
#undef Java_Main_E_BLEND_HSL_HUE
#define Java_Main_E_BLEND_HSL_HUE 11L
#undef Java_Main_E_BLEND_HSL_SATURATION
#define Java_Main_E_BLEND_HSL_SATURATION 12L
#undef Java_Main_E_BLEND_HSL_COLOR
#define Java_Main_E_BLEND_HSL_COLOR 13L
#undef Java_Main_E_BLEND_HSL_LUMINOSITY
#define Java_Main_E_BLEND_HSL_LUMINOSITY 14L
#undef Java_Main_E_BLEND_ALL_EQUATIONS
#define Java_Main_E_BLEND_ALL_EQUATIONS 15L
#undef Java_Main_EVQ_TEMPORARY
#define Java_Main_EVQ_TEMPORARY 0L
#undef Java_Main_EVQ_GLOBAL
#define Java_Main_EVQ_GLOBAL 1L
#undef Java_Main_EVQ_CONST
#define Java_Main_EVQ_CONST 2L
#undef Java_Main_EVQ_VARYING_IN
#define Java_Main_EVQ_VARYING_IN 3L
#undef Java_Main_EVQ_VARYING_OUT
#define Java_Main_EVQ_VARYING_OUT 4L
#undef Java_Main_EVQ_UNIFORM
#define Java_Main_EVQ_UNIFORM 5L
#undef Java_Main_EVQ_BUFFER
#define Java_Main_EVQ_BUFFER 6L
#undef Java_Main_EVQ_SHARED
#define Java_Main_EVQ_SHARED 7L
#undef Java_Main_EVQ_PAYLOAD
#define Java_Main_EVQ_PAYLOAD 8L
#undef Java_Main_EVQ_PAYLOAD_IN
#define Java_Main_EVQ_PAYLOAD_IN 9L
#undef Java_Main_EVQ_HIT_ATTR
#define Java_Main_EVQ_HIT_ATTR 10L
#undef Java_Main_EVQ_CALLABLE_DATA
#define Java_Main_EVQ_CALLABLE_DATA 11L
#undef Java_Main_EVQ_CALLABLE_DATA_IN
#define Java_Main_EVQ_CALLABLE_DATA_IN 12L
#undef Java_Main_EVQ_IN
#define Java_Main_EVQ_IN 13L
#undef Java_Main_EVQ_OUT
#define Java_Main_EVQ_OUT 14L
#undef Java_Main_EVQ_IN_OUT
#define Java_Main_EVQ_IN_OUT 15L
#undef Java_Main_EVQ_CONST_READ_ONLY
#define Java_Main_EVQ_CONST_READ_ONLY 16L
#undef Java_Main_EVQ_VERTEX_ID
#define Java_Main_EVQ_VERTEX_ID 17L
#undef Java_Main_EVQ_INSTANCE_ID
#define Java_Main_EVQ_INSTANCE_ID 18L
#undef Java_Main_EVQ_POSITION
#define Java_Main_EVQ_POSITION 19L
#undef Java_Main_EVQ_POINT_SIZE
#define Java_Main_EVQ_POINT_SIZE 20L
#undef Java_Main_EVQ_CLIP_VERTEX
#define Java_Main_EVQ_CLIP_VERTEX 21L
#undef Java_Main_EVQ_FACE
#define Java_Main_EVQ_FACE 22L
#undef Java_Main_EVQ_FRAG_COORD
#define Java_Main_EVQ_FRAG_COORD 23L
#undef Java_Main_EVQ_POINT_COORD
#define Java_Main_EVQ_POINT_COORD 24L
#undef Java_Main_EVQ_FRAG_COLOR
#define Java_Main_EVQ_FRAG_COLOR 25L
#undef Java_Main_EVQ_FRAG_DEPTH
#define Java_Main_EVQ_FRAG_DEPTH 26L
#undef Java_Main_ESI_UNIFORM
#define Java_Main_ESI_UNIFORM 0L
#undef Java_Main_ESI_INPUT
#define Java_Main_ESI_INPUT 1L
#undef Java_Main_ESI_OUTPUT
#define Java_Main_ESI_OUTPUT 2L
#undef Java_Main_ESI_NONE
#define Java_Main_ESI_NONE 3L
#undef Java_Main_ESD_NONE
#define Java_Main_ESD_NONE 0L
#undef Java_Main_ESD_1D
#define Java_Main_ESD_1D 1L
#undef Java_Main_ESD_2D
#define Java_Main_ESD_2D 2L
#undef Java_Main_ESD_3D
#define Java_Main_ESD_3D 3L
#undef Java_Main_ESD_CUBE
#define Java_Main_ESD_CUBE 4L
#undef Java_Main_ESD_RECT
#define Java_Main_ESD_RECT 5L
#undef Java_Main_ESD_BUFFER
#define Java_Main_ESD_BUFFER 6L
#undef Java_Main_ESD_SUBPASS
#define Java_Main_ESD_SUBPASS 7L
#undef Java_Main_ELF_NONE
#define Java_Main_ELF_NONE 0L
#undef Java_Main_ELF_RGBA32F
#define Java_Main_ELF_RGBA32F 1L
#undef Java_Main_ELF_RGBA16F
#define Java_Main_ELF_RGBA16F 2L
#undef Java_Main_ELF_R32F
#define Java_Main_ELF_R32F 3L
#undef Java_Main_ELF_RGBA8
#define Java_Main_ELF_RGBA8 4L
#undef Java_Main_ELF_RGBA8_SNORM
#define Java_Main_ELF_RGBA8_SNORM 5L
#undef Java_Main_ELF_ES_FLOAT_GUARD
#define Java_Main_ELF_ES_FLOAT_GUARD 6L
#undef Java_Main_ELF_RG32F
#define Java_Main_ELF_RG32F 7L
#undef Java_Main_ELF_RG16F
#define Java_Main_ELF_RG16F 8L
#undef Java_Main_ELF_R11F_G11F_B10F
#define Java_Main_ELF_R11F_G11F_B10F 9L
#undef Java_Main_ELF_R16F
#define Java_Main_ELF_R16F 10L
#undef Java_Main_ELF_RGBA16
#define Java_Main_ELF_RGBA16 11L
#undef Java_Main_ELF_RGB10A2
#define Java_Main_ELF_RGB10A2 12L
#undef Java_Main_ELF_RG16
#define Java_Main_ELF_RG16 13L
#undef Java_Main_ELF_RG8
#define Java_Main_ELF_RG8 14L
#undef Java_Main_ELF_R16
#define Java_Main_ELF_R16 15L
#undef Java_Main_ELF_R8
#define Java_Main_ELF_R8 16L
#undef Java_Main_ELF_RGBA16_SNORM
#define Java_Main_ELF_RGBA16_SNORM 17L
#undef Java_Main_ELF_RG16_SNORM
#define Java_Main_ELF_RG16_SNORM 18L
#undef Java_Main_ELF_RG8_SNORM
#define Java_Main_ELF_RG8_SNORM 19L
#undef Java_Main_ELF_R16_SNORM
#define Java_Main_ELF_R16_SNORM 20L
#undef Java_Main_ELF_R8_SNORM
#define Java_Main_ELF_R8_SNORM 21L
#undef Java_Main_ELF_FLOAT_GUARD
#define Java_Main_ELF_FLOAT_GUARD 22L
#undef Java_Main_ELF_RGBA32I
#define Java_Main_ELF_RGBA32I 23L
#undef Java_Main_ELF_RGBA16I
#define Java_Main_ELF_RGBA16I 24L
#undef Java_Main_ELF_RGBA8I
#define Java_Main_ELF_RGBA8I 25L
#undef Java_Main_ELF_R32I
#define Java_Main_ELF_R32I 26L
#undef Java_Main_ELF_ES_INT_GUARD
#define Java_Main_ELF_ES_INT_GUARD 27L
#undef Java_Main_ELF_RG32I
#define Java_Main_ELF_RG32I 28L
#undef Java_Main_ELF_RG16I
#define Java_Main_ELF_RG16I 29L
#undef Java_Main_ELF_RG8I
#define Java_Main_ELF_RG8I 30L
#undef Java_Main_ELF_R16I
#define Java_Main_ELF_R16I 31L
#undef Java_Main_ELF_R8I
#define Java_Main_ELF_R8I 32L
#undef Java_Main_ELF_INT_GUARD
#define Java_Main_ELF_INT_GUARD 33L
#undef Java_Main_ELF_RGBA32UI
#define Java_Main_ELF_RGBA32UI 34L
#undef Java_Main_ELF_RGBA16UI
#define Java_Main_ELF_RGBA16UI 35L
#undef Java_Main_ELF_RGBA8UI
#define Java_Main_ELF_RGBA8UI 36L
#undef Java_Main_ELF_R32UI
#define Java_Main_ELF_R32UI 37L
#undef Java_Main_ELF_ES_UINT_GUARD
#define Java_Main_ELF_ES_UINT_GUARD 38L
#undef Java_Main_ELF_RG32UI
#define Java_Main_ELF_RG32UI 39L
#undef Java_Main_ELF_RG16UI
#define Java_Main_ELF_RG16UI 40L
#undef Java_Main_ELF_RGB10A2UI
#define Java_Main_ELF_RGB10A2UI 41L
#undef Java_Main_ELF_RG8UI
#define Java_Main_ELF_RG8UI 42L
#undef Java_Main_ELF_R16UI
#define Java_Main_ELF_R16UI 43L
#undef Java_Main_ELF_R8UI
#define Java_Main_ELF_R8UI 44L
#undef Java_Main_EBV_NONE
#define Java_Main_EBV_NONE 0L
#undef Java_Main_EBV_NUM_WORK_GROUPS
#define Java_Main_EBV_NUM_WORK_GROUPS 1L
#undef Java_Main_EBV_WORK_GROUP_SIZE
#define Java_Main_EBV_WORK_GROUP_SIZE 2L
#undef Java_Main_EBV_WORK_GROUP_ID
#define Java_Main_EBV_WORK_GROUP_ID 3L
#undef Java_Main_EBV_LOCAL_INVOCATION_ID
#define Java_Main_EBV_LOCAL_INVOCATION_ID 4L
#undef Java_Main_EBV_GLOBAL_INVOCATION_ID
#define Java_Main_EBV_GLOBAL_INVOCATION_ID 5L
#undef Java_Main_EBV_LOCAL_INVOCATION_INDEX
#define Java_Main_EBV_LOCAL_INVOCATION_INDEX 6L
#undef Java_Main_EBV_NUM_SUBGROUPS
#define Java_Main_EBV_NUM_SUBGROUPS 7L
#undef Java_Main_EBV_SUBGROUP_ID
#define Java_Main_EBV_SUBGROUP_ID 8L
#undef Java_Main_EBV_SUB_GROUP_SIZE
#define Java_Main_EBV_SUB_GROUP_SIZE 9L
#undef Java_Main_EBV_SUB_GROUP_INVOCATION
#define Java_Main_EBV_SUB_GROUP_INVOCATION 10L
#undef Java_Main_EBV_SUB_GROUP_EQ_MASK
#define Java_Main_EBV_SUB_GROUP_EQ_MASK 11L
#undef Java_Main_EBV_SUB_GROUP_GE_MASK
#define Java_Main_EBV_SUB_GROUP_GE_MASK 12L
#undef Java_Main_EBV_SUB_GROUP_GT_MASK
#define Java_Main_EBV_SUB_GROUP_GT_MASK 13L
#undef Java_Main_EBV_SUB_GROUP_LE_MASK
#define Java_Main_EBV_SUB_GROUP_LE_MASK 14L
#undef Java_Main_EBV_SUB_GROUP_LT_MASK
#define Java_Main_EBV_SUB_GROUP_LT_MASK 15L
#undef Java_Main_EBV_SUBGROUP_SIZE2
#define Java_Main_EBV_SUBGROUP_SIZE2 16L
#undef Java_Main_EBV_SUBGROUP_INVOCATION2
#define Java_Main_EBV_SUBGROUP_INVOCATION2 17L
#undef Java_Main_EBV_SUBGROUP_EQ_MASK2
#define Java_Main_EBV_SUBGROUP_EQ_MASK2 18L
#undef Java_Main_EBV_SUBGROUP_GE_MASK2
#define Java_Main_EBV_SUBGROUP_GE_MASK2 19L
#undef Java_Main_EBV_SUBGROUP_GT_MASK2
#define Java_Main_EBV_SUBGROUP_GT_MASK2 20L
#undef Java_Main_EBV_SUBGROUP_LE_MASK2
#define Java_Main_EBV_SUBGROUP_LE_MASK2 21L
#undef Java_Main_EBV_SUBGROUP_LT_MASK2
#define Java_Main_EBV_SUBGROUP_LT_MASK2 22L
#undef Java_Main_EBV_VERTEX_ID
#define Java_Main_EBV_VERTEX_ID 23L
#undef Java_Main_EBV_INSTANCE_ID
#define Java_Main_EBV_INSTANCE_ID 24L
#undef Java_Main_EBV_VERTEX_INDEX
#define Java_Main_EBV_VERTEX_INDEX 25L
#undef Java_Main_EBV_INSTANCE_INDEX
#define Java_Main_EBV_INSTANCE_INDEX 26L
#undef Java_Main_EBV_BASE_VERTEX
#define Java_Main_EBV_BASE_VERTEX 27L
#undef Java_Main_EBV_BASE_INSTANCE
#define Java_Main_EBV_BASE_INSTANCE 28L
#undef Java_Main_EBV_DRAW_ID
#define Java_Main_EBV_DRAW_ID 29L
#undef Java_Main_EBV_POSITION
#define Java_Main_EBV_POSITION 30L
#undef Java_Main_EBV_POINT_SIZE
#define Java_Main_EBV_POINT_SIZE 31L
#undef Java_Main_EBV_CLIP_VERTEX
#define Java_Main_EBV_CLIP_VERTEX 32L
#undef Java_Main_EBV_CLIP_DISTANCE
#define Java_Main_EBV_CLIP_DISTANCE 33L
#undef Java_Main_EBV_CULL_DISTANCE
#define Java_Main_EBV_CULL_DISTANCE 34L
#undef Java_Main_EBV_NORMAL
#define Java_Main_EBV_NORMAL 35L
#undef Java_Main_EBV_VERTEX
#define Java_Main_EBV_VERTEX 36L
#undef Java_Main_EBV_MULTI_TEX_COOR0
#define Java_Main_EBV_MULTI_TEX_COOR0 37L
#undef Java_Main_EBV_MULTI_TEX_COORD1
#define Java_Main_EBV_MULTI_TEX_COORD1 38L
#undef Java_Main_EBV_MULTI_TEX_COORD2
#define Java_Main_EBV_MULTI_TEX_COORD2 39L
#undef Java_Main_EBV_MULTI_TEX_COORD3
#define Java_Main_EBV_MULTI_TEX_COORD3 40L
#undef Java_Main_EBV_MULTI_TEX_COORD4
#define Java_Main_EBV_MULTI_TEX_COORD4 41L
#undef Java_Main_EBV_MULTI_TEX_COORD5
#define Java_Main_EBV_MULTI_TEX_COORD5 42L
#undef Java_Main_EBV_MULTI_TEX_COORD6
#define Java_Main_EBV_MULTI_TEX_COORD6 43L
#undef Java_Main_EBV_MULTI_TEX_COORD7
#define Java_Main_EBV_MULTI_TEX_COORD7 44L
#undef Java_Main_EBV_FRONT_COLOR
#define Java_Main_EBV_FRONT_COLOR 45L
#undef Java_Main_EBV_BACK_COLOR
#define Java_Main_EBV_BACK_COLOR 46L
#undef Java_Main_EBV_FRONT_SECONDARY_COLOR
#define Java_Main_EBV_FRONT_SECONDARY_COLOR 47L
#undef Java_Main_EBV_BACK_SECONDARY_COLOR
#define Java_Main_EBV_BACK_SECONDARY_COLOR 48L
#undef Java_Main_EBV_TEX_COORD
#define Java_Main_EBV_TEX_COORD 49L
#undef Java_Main_EBV_FOG_FRAG_COORD
#define Java_Main_EBV_FOG_FRAG_COORD 50L
#undef Java_Main_EBV_INVOCATION_ID
#define Java_Main_EBV_INVOCATION_ID 51L
#undef Java_Main_EBV_PRIMITIVE_ID
#define Java_Main_EBV_PRIMITIVE_ID 52L
#undef Java_Main_EBV_LAYER
#define Java_Main_EBV_LAYER 53L
#undef Java_Main_EBV_VIEWPORT_INDEX
#define Java_Main_EBV_VIEWPORT_INDEX 54L
#undef Java_Main_EBV_PATCH_VERTICES
#define Java_Main_EBV_PATCH_VERTICES 55L
#undef Java_Main_EBV_TESS_LEVEL_OUTER
#define Java_Main_EBV_TESS_LEVEL_OUTER 56L
#undef Java_Main_EBV_TESS_LEVEL_INNER
#define Java_Main_EBV_TESS_LEVEL_INNER 57L
#undef Java_Main_EBV_BOUNDING_BOX
#define Java_Main_EBV_BOUNDING_BOX 58L
#undef Java_Main_EBV_TESS_COORD
#define Java_Main_EBV_TESS_COORD 59L
#undef Java_Main_EBV_COLOR
#define Java_Main_EBV_COLOR 60L
#undef Java_Main_EBV_SECONDARY_COLOR
#define Java_Main_EBV_SECONDARY_COLOR 61L
#undef Java_Main_EBV_FACE
#define Java_Main_EBV_FACE 62L
#undef Java_Main_EBV_FRAG_COORD
#define Java_Main_EBV_FRAG_COORD 63L
#undef Java_Main_EBV_POINT_COORD
#define Java_Main_EBV_POINT_COORD 64L
#undef Java_Main_EBV_FRAG_COLOR
#define Java_Main_EBV_FRAG_COLOR 65L
#undef Java_Main_EBV_FRAG_DATA
#define Java_Main_EBV_FRAG_DATA 66L
#undef Java_Main_EBV_FRAG_DEPTH
#define Java_Main_EBV_FRAG_DEPTH 67L
#undef Java_Main_EBV_FRAG_STENCIL_REF
#define Java_Main_EBV_FRAG_STENCIL_REF 68L
#undef Java_Main_EBV_SAMPLE_ID
#define Java_Main_EBV_SAMPLE_ID 69L
#undef Java_Main_EBV_SAMPLE_POSITION
#define Java_Main_EBV_SAMPLE_POSITION 70L
#undef Java_Main_EBV_SAMPLE_MASK
#define Java_Main_EBV_SAMPLE_MASK 71L
#undef Java_Main_EBV_HELPER_INVOCATION
#define Java_Main_EBV_HELPER_INVOCATION 72L
#undef Java_Main_EBV_BARY_COORD_NO_PERSP
#define Java_Main_EBV_BARY_COORD_NO_PERSP 73L
#undef Java_Main_EBV_BARY_COORD_NO_PERSP_CENTROID
#define Java_Main_EBV_BARY_COORD_NO_PERSP_CENTROID 74L
#undef Java_Main_EBV_BARY_COORD_NO_PERSP_SAMPLE
#define Java_Main_EBV_BARY_COORD_NO_PERSP_SAMPLE 75L
#undef Java_Main_EBV_BARY_COORD_SMOOTH
#define Java_Main_EBV_BARY_COORD_SMOOTH 76L
#undef Java_Main_EBV_BARY_COORD_SMOOTH_CENTROID
#define Java_Main_EBV_BARY_COORD_SMOOTH_CENTROID 77L
#undef Java_Main_EBV_BARY_COORD_SMOOTH_SAMPLE
#define Java_Main_EBV_BARY_COORD_SMOOTH_SAMPLE 78L
#undef Java_Main_EBV_BARY_COORD_PULL_MODEL
#define Java_Main_EBV_BARY_COORD_PULL_MODEL 79L
#undef Java_Main_EBV_VIEW_INDEX
#define Java_Main_EBV_VIEW_INDEX 80L
#undef Java_Main_EBV_DEVICE_INDEX
#define Java_Main_EBV_DEVICE_INDEX 81L
#undef Java_Main_EBV_FRAG_SIZE_EXT
#define Java_Main_EBV_FRAG_SIZE_EXT 82L
#undef Java_Main_EBV_FRAG_INVOCATION_COUNT_EXT
#define Java_Main_EBV_FRAG_INVOCATION_COUNT_EXT 83L
#undef Java_Main_EBV_SECONDARY_FRAG_DATA_EXT
#define Java_Main_EBV_SECONDARY_FRAG_DATA_EXT 84L
#undef Java_Main_EBV_SECONDARY_FRAG_COLOR_EXT
#define Java_Main_EBV_SECONDARY_FRAG_COLOR_EXT 85L
#undef Java_Main_EBV_VIEWPORT_MASK_NV
#define Java_Main_EBV_VIEWPORT_MASK_NV 86L
#undef Java_Main_EBV_SECONDARY_POSITION_NV
#define Java_Main_EBV_SECONDARY_POSITION_NV 87L
#undef Java_Main_EBV_SECONDARY_VIEWPORT_MASK_NV
#define Java_Main_EBV_SECONDARY_VIEWPORT_MASK_NV 88L
#undef Java_Main_EBV_POSITIONPER_VIEW_NV
#define Java_Main_EBV_POSITIONPER_VIEW_NV 89L
#undef Java_Main_EBV_VIEWPORT_MASK_PER_VIEW_NV
#define Java_Main_EBV_VIEWPORT_MASK_PER_VIEW_NV 90L
#undef Java_Main_EBV_FRAG_FULLY_COVERED_NV
#define Java_Main_EBV_FRAG_FULLY_COVERED_NV 91L
#undef Java_Main_EBV_FRAGMENT_SIZE_NV
#define Java_Main_EBV_FRAGMENT_SIZE_NV 92L
#undef Java_Main_EBV_INVOCATIONS_PER_PIXEL_NV
#define Java_Main_EBV_INVOCATIONS_PER_PIXEL_NV 93L
#undef Java_Main_EBV_LAUNCH_ID
#define Java_Main_EBV_LAUNCH_ID 94L
#undef Java_Main_EBV_LAUNCH_SIZE
#define Java_Main_EBV_LAUNCH_SIZE 95L
#undef Java_Main_EBV_INSTANCE_CUSTOM_INDEX
#define Java_Main_EBV_INSTANCE_CUSTOM_INDEX 96L
#undef Java_Main_EBV_GEOMETRY_INDEX
#define Java_Main_EBV_GEOMETRY_INDEX 97L
#undef Java_Main_EBV_WORLD_RAY_ORIGIN
#define Java_Main_EBV_WORLD_RAY_ORIGIN 98L
#undef Java_Main_EBV_WORLD_RAY_DIRECTION
#define Java_Main_EBV_WORLD_RAY_DIRECTION 99L
#undef Java_Main_EBV_OBJECT_RAY_ORIGIN
#define Java_Main_EBV_OBJECT_RAY_ORIGIN 100L
#undef Java_Main_EBV_OBJECT_RAY_DIRECTION
#define Java_Main_EBV_OBJECT_RAY_DIRECTION 101L
#undef Java_Main_EBV_RAY_TMIN
#define Java_Main_EBV_RAY_TMIN 102L
#undef Java_Main_EBV_RAY_TMAX
#define Java_Main_EBV_RAY_TMAX 103L
#undef Java_Main_EBV_HIT_T
#define Java_Main_EBV_HIT_T 104L
#undef Java_Main_EBV_HIT_KIND
#define Java_Main_EBV_HIT_KIND 105L
#undef Java_Main_EBV_OBJECT_TO_WORLD
#define Java_Main_EBV_OBJECT_TO_WORLD 106L
#undef Java_Main_EBV_OBJECT_TO_WORLD3X4
#define Java_Main_EBV_OBJECT_TO_WORLD3X4 107L
#undef Java_Main_EBV_WORLD_TO_OBJECT
#define Java_Main_EBV_WORLD_TO_OBJECT 108L
#undef Java_Main_EBV_WORLD_TO_OBJECT3X4
#define Java_Main_EBV_WORLD_TO_OBJECT3X4 109L
#undef Java_Main_EBV_INCOMING_RAY_FLAGS
#define Java_Main_EBV_INCOMING_RAY_FLAGS 110L
#undef Java_Main_EBV_BARY_COORD_NV
#define Java_Main_EBV_BARY_COORD_NV 111L
#undef Java_Main_EBV_BARY_COORD_NO_PERSP_NV
#define Java_Main_EBV_BARY_COORD_NO_PERSP_NV 112L
#undef Java_Main_EBV_TASK_COUNT_NV
#define Java_Main_EBV_TASK_COUNT_NV 113L
#undef Java_Main_EBV_PRIMITIVE_COUNT_NV
#define Java_Main_EBV_PRIMITIVE_COUNT_NV 114L
#undef Java_Main_EBV_PRIMITIVE_INDICES_NV
#define Java_Main_EBV_PRIMITIVE_INDICES_NV 115L
#undef Java_Main_EBV_CLIP_DISTANCE_PER_VIEW_NV
#define Java_Main_EBV_CLIP_DISTANCE_PER_VIEW_NV 116L
#undef Java_Main_EBV_CULL_DISTANCE_PER_VIEW_NV
#define Java_Main_EBV_CULL_DISTANCE_PER_VIEW_NV 117L
#undef Java_Main_EBV_LAYER_PER_VIEW_NV
#define Java_Main_EBV_LAYER_PER_VIEW_NV 118L
#undef Java_Main_EBV_MESH_VIEW_COUNT_NV
#define Java_Main_EBV_MESH_VIEW_COUNT_NV 119L
#undef Java_Main_EBV_MESH_VIEW_INDICES_NV
#define Java_Main_EBV_MESH_VIEW_INDICES_NV 120L
#undef Java_Main_EBV_WARPS_PER_SM
#define Java_Main_EBV_WARPS_PER_SM 121L
#undef Java_Main_EBV_SM_COUNT
#define Java_Main_EBV_SM_COUNT 122L
#undef Java_Main_EBV_WARP_ID
#define Java_Main_EBV_WARP_ID 123L
#undef Java_Main_EBV_SM_ID
#define Java_Main_EBV_SM_ID 124L
#undef Java_Main_EBV_FRAG_DEPTH_GREATER
#define Java_Main_EBV_FRAG_DEPTH_GREATER 125L
#undef Java_Main_EBV_FRAG_DEPTH_LESSER
#define Java_Main_EBV_FRAG_DEPTH_LESSER 126L
#undef Java_Main_EBV_GS_OUTPUT_STREAM
#define Java_Main_EBV_GS_OUTPUT_STREAM 127L
#undef Java_Main_EBV_OUTPUT_PATCH
#define Java_Main_EBV_OUTPUT_PATCH 128L
#undef Java_Main_EBV_INPUT_PATCH
#define Java_Main_EBV_INPUT_PATCH 129L
#undef Java_Main_EBV_APPEND_CONSUME
#define Java_Main_EBV_APPEND_CONSUME 130L
#undef Java_Main_EBV_RW_STRUCTURED_BUFFER
#define Java_Main_EBV_RW_STRUCTURED_BUFFER 131L
#undef Java_Main_EBV_STRUCTURED_BUFFER
#define Java_Main_EBV_STRUCTURED_BUFFER 132L
#undef Java_Main_EBV_BYTE_ADDRESS_BUFFER
#define Java_Main_EBV_BYTE_ADDRESS_BUFFER 133L
#undef Java_Main_EBV_RW_BYTE_ADDRESS_BUFFER
#define Java_Main_EBV_RW_BYTE_ADDRESS_BUFFER 134L
#undef Java_Main_EAT_NONE
#define Java_Main_EAT_NONE 0L
#undef Java_Main_EAT_ALLOW_UAV_CONDITION
#define Java_Main_EAT_ALLOW_UAV_CONDITION 1L
#undef Java_Main_EAT_BRANCH
#define Java_Main_EAT_BRANCH 2L
#undef Java_Main_EAT_CALL
#define Java_Main_EAT_CALL 3L
#undef Java_Main_EAT_DOMAIN
#define Java_Main_EAT_DOMAIN 4L
#undef Java_Main_EAT_EARLY_DEPTH_STENCIL
#define Java_Main_EAT_EARLY_DEPTH_STENCIL 5L
#undef Java_Main_EAT_FAST_OPT
#define Java_Main_EAT_FAST_OPT 6L
#undef Java_Main_EAT_FLATTEN
#define Java_Main_EAT_FLATTEN 7L
#undef Java_Main_EAT_FORCE_CASE
#define Java_Main_EAT_FORCE_CASE 8L
#undef Java_Main_EAT_INSTANCE
#define Java_Main_EAT_INSTANCE 9L
#undef Java_Main_EAT_MAX_TESS_FACTOR
#define Java_Main_EAT_MAX_TESS_FACTOR 10L
#undef Java_Main_EAT_NUM_THREADS
#define Java_Main_EAT_NUM_THREADS 11L
#undef Java_Main_EAT_MAX_VERTEX_COUNT
#define Java_Main_EAT_MAX_VERTEX_COUNT 12L
#undef Java_Main_EAT_OUTPUT_CONTROL_POINTS
#define Java_Main_EAT_OUTPUT_CONTROL_POINTS 13L
#undef Java_Main_EAT_OUTPUT_TOPOLOGY
#define Java_Main_EAT_OUTPUT_TOPOLOGY 14L
#undef Java_Main_EAT_PARTITIONING
#define Java_Main_EAT_PARTITIONING 15L
#undef Java_Main_EAT_PATCH_CONSTANT_FUNC
#define Java_Main_EAT_PATCH_CONSTANT_FUNC 16L
#undef Java_Main_EAT_PATCH_SIZE
#define Java_Main_EAT_PATCH_SIZE 17L
#undef Java_Main_EAT_UNROLL
#define Java_Main_EAT_UNROLL 18L
#undef Java_Main_EAT_LOOP
#define Java_Main_EAT_LOOP 19L
#undef Java_Main_EAT_BINDING
#define Java_Main_EAT_BINDING 20L
#undef Java_Main_EAT_GLOBAL_BINDING
#define Java_Main_EAT_GLOBAL_BINDING 21L
#undef Java_Main_EAT_LOCATION
#define Java_Main_EAT_LOCATION 22L
#undef Java_Main_EAT_INPUT_ATTACHMENT
#define Java_Main_EAT_INPUT_ATTACHMENT 23L
#undef Java_Main_EAT_BUILTIN
#define Java_Main_EAT_BUILTIN 24L
#undef Java_Main_EAT_PUSH_CONSTANT
#define Java_Main_EAT_PUSH_CONSTANT 25L
#undef Java_Main_EAT_CONSTANT_ID
#define Java_Main_EAT_CONSTANT_ID 26L
#undef Java_Main_EAT_DEPENDENCY_INFINITE
#define Java_Main_EAT_DEPENDENCY_INFINITE 27L
#undef Java_Main_EAT_DEPENDENCY_LENGTH
#define Java_Main_EAT_DEPENDENCY_LENGTH 28L
#undef Java_Main_EAT_MIN_ITERATIONS
#define Java_Main_EAT_MIN_ITERATIONS 29L
#undef Java_Main_EAT_MAX_ITERATIONS
#define Java_Main_EAT_MAX_ITERATIONS 30L
#undef Java_Main_EAT_ITERATION_MULTIPLE
#define Java_Main_EAT_ITERATION_MULTIPLE 31L
#undef Java_Main_EAT_PEEL_COUNT
#define Java_Main_EAT_PEEL_COUNT 32L
#undef Java_Main_EAT_PARTIAL_COUNT
#define Java_Main_EAT_PARTIAL_COUNT 33L
#undef Java_Main_EAT_FORMAT_RGBA32F
#define Java_Main_EAT_FORMAT_RGBA32F 34L
#undef Java_Main_EAT_FORMAT_RGBA16F
#define Java_Main_EAT_FORMAT_RGBA16F 35L
#undef Java_Main_EAT_FORMAT_R32F
#define Java_Main_EAT_FORMAT_R32F 36L
#undef Java_Main_EAT_FORMAT_RGBA8
#define Java_Main_EAT_FORMAT_RGBA8 37L
#undef Java_Main_EAT_FORMAT_RGBA8_SNORM
#define Java_Main_EAT_FORMAT_RGBA8_SNORM 38L
#undef Java_Main_EAT_FORMAT_RG32F
#define Java_Main_EAT_FORMAT_RG32F 39L
#undef Java_Main_EAT_FORMAT_RG16F
#define Java_Main_EAT_FORMAT_RG16F 40L
#undef Java_Main_EAT_FORMAT_R11F_G11F_B10F
#define Java_Main_EAT_FORMAT_R11F_G11F_B10F 41L
#undef Java_Main_EAT_FORMAT_R16F
#define Java_Main_EAT_FORMAT_R16F 42L
#undef Java_Main_EAT_FORMAT_RGBA16
#define Java_Main_EAT_FORMAT_RGBA16 43L
#undef Java_Main_EAT_FORMAT_RGB10_A2
#define Java_Main_EAT_FORMAT_RGB10_A2 44L
#undef Java_Main_EAT_FORMAT_RG16
#define Java_Main_EAT_FORMAT_RG16 45L
#undef Java_Main_EAT_FORMAT_RG8
#define Java_Main_EAT_FORMAT_RG8 46L
#undef Java_Main_EAT_FORMAT_R16
#define Java_Main_EAT_FORMAT_R16 47L
#undef Java_Main_EAT_FORMAT_R8
#define Java_Main_EAT_FORMAT_R8 48L
#undef Java_Main_EAT_FORMAT_RGBA16_SNORM
#define Java_Main_EAT_FORMAT_RGBA16_SNORM 49L
#undef Java_Main_EAT_FORMAT_RG16_SNORM
#define Java_Main_EAT_FORMAT_RG16_SNORM 50L
#undef Java_Main_EAT_FORMAT_RG8_SNORM
#define Java_Main_EAT_FORMAT_RG8_SNORM 51L
#undef Java_Main_EAT_FORMAT_R16_SNORM
#define Java_Main_EAT_FORMAT_R16_SNORM 52L
#undef Java_Main_EAT_FORMAT_R8_SNORM
#define Java_Main_EAT_FORMAT_R8_SNORM 53L
#undef Java_Main_EAT_FORMAT_RGBA32I
#define Java_Main_EAT_FORMAT_RGBA32I 54L
#undef Java_Main_EAT_FORMAT_RGBA16I
#define Java_Main_EAT_FORMAT_RGBA16I 55L
#undef Java_Main_EAT_FORMAT_RGBA8I
#define Java_Main_EAT_FORMAT_RGBA8I 56L
#undef Java_Main_EAT_FORMAT_R32I
#define Java_Main_EAT_FORMAT_R32I 57L
#undef Java_Main_EAT_FORMAT_RG32I
#define Java_Main_EAT_FORMAT_RG32I 58L
#undef Java_Main_EAT_FORMAT_RG16I
#define Java_Main_EAT_FORMAT_RG16I 59L
#undef Java_Main_EAT_FORMAT_RG8I
#define Java_Main_EAT_FORMAT_RG8I 60L
#undef Java_Main_EAT_FORMAT_R16I
#define Java_Main_EAT_FORMAT_R16I 61L
#undef Java_Main_EAT_FORMAT_R8I
#define Java_Main_EAT_FORMAT_R8I 62L
#undef Java_Main_EAT_FORMAT_RGBA32UI
#define Java_Main_EAT_FORMAT_RGBA32UI 63L
#undef Java_Main_EAT_FORMAT_RGBA16UI
#define Java_Main_EAT_FORMAT_RGBA16UI 64L
#undef Java_Main_EAT_FORMAT_RGBA8UI
#define Java_Main_EAT_FORMAT_RGBA8UI 65L
#undef Java_Main_EAT_FORMAT_R32UI
#define Java_Main_EAT_FORMAT_R32UI 66L
#undef Java_Main_EAT_FORMAT_RGB10A2UI
#define Java_Main_EAT_FORMAT_RGB10A2UI 67L
#undef Java_Main_EAT_FORMAT_RG32UI
#define Java_Main_EAT_FORMAT_RG32UI 68L
#undef Java_Main_EAT_FORMAT_RG16UI
#define Java_Main_EAT_FORMAT_RG16UI 69L
#undef Java_Main_EAT_FORMAT_RG8UI
#define Java_Main_EAT_FORMAT_RG8UI 70L
#undef Java_Main_EAT_FORMAT_R16UI
#define Java_Main_EAT_FORMAT_R16UI 71L
#undef Java_Main_EAT_FORMAT_R8UI
#define Java_Main_EAT_FORMAT_R8UI 72L
#undef Java_Main_EAT_FORMAT_UNKNOWN
#define Java_Main_EAT_FORMAT_UNKNOWN 73L
#undef Java_Main_EAT_NON_WRITABLE
#define Java_Main_EAT_NON_WRITABLE 74L
#undef Java_Main_EAT_NON_READABLE
#define Java_Main_EAT_NON_READABLE 75L
#undef Java_Main_PL_BAD
#define Java_Main_PL_BAD 0L
#undef Java_Main_PL_LOGICAL_OR
#define Java_Main_PL_LOGICAL_OR 1L
#undef Java_Main_PL_LOGICAL_XOR
#define Java_Main_PL_LOGICAL_XOR 2L
#undef Java_Main_PL_LOGICAL_AND
#define Java_Main_PL_LOGICAL_AND 3L
#undef Java_Main_PL_BITWISE_OR
#define Java_Main_PL_BITWISE_OR 4L
#undef Java_Main_PL_BITWISE_XOR
#define Java_Main_PL_BITWISE_XOR 5L
#undef Java_Main_PL_BITWISE_AND
#define Java_Main_PL_BITWISE_AND 6L
#undef Java_Main_PL_EQUALITY
#define Java_Main_PL_EQUALITY 7L
#undef Java_Main_PL_RELATIONAL
#define Java_Main_PL_RELATIONAL 8L
#undef Java_Main_PL_SHIFT
#define Java_Main_PL_SHIFT 9L
#undef Java_Main_PL_ADD
#define Java_Main_PL_ADD 10L
#undef Java_Main_PL_MUL
#define Java_Main_PL_MUL 11L
#undef Java_Main_E_H_TOK_NONE
#define Java_Main_E_H_TOK_NONE 0L
#undef Java_Main_E_H_TOK_STATIC
#define Java_Main_E_H_TOK_STATIC 1L
#undef Java_Main_E_H_TOK_CONST
#define Java_Main_E_H_TOK_CONST 2L
#undef Java_Main_E_H_TOK_SNORM
#define Java_Main_E_H_TOK_SNORM 3L
#undef Java_Main_E_H_TOK_UNORM
#define Java_Main_E_H_TOK_UNORM 4L
#undef Java_Main_E_H_TOK_EXTERN
#define Java_Main_E_H_TOK_EXTERN 5L
#undef Java_Main_E_H_TOK_UNIFORM
#define Java_Main_E_H_TOK_UNIFORM 6L
#undef Java_Main_E_H_TOK_VOLATILE
#define Java_Main_E_H_TOK_VOLATILE 7L
#undef Java_Main_E_H_TOK_PRECISE
#define Java_Main_E_H_TOK_PRECISE 8L
#undef Java_Main_E_H_TOK_SHARED
#define Java_Main_E_H_TOK_SHARED 9L
#undef Java_Main_E_H_TOK_GROUP_SHARED
#define Java_Main_E_H_TOK_GROUP_SHARED 10L
#undef Java_Main_E_H_TOK_LINEAR
#define Java_Main_E_H_TOK_LINEAR 11L
#undef Java_Main_E_H_TOK_CENTROID
#define Java_Main_E_H_TOK_CENTROID 12L
#undef Java_Main_E_H_TOK_NOINTERPOLATION
#define Java_Main_E_H_TOK_NOINTERPOLATION 13L
#undef Java_Main_E_H_TOK_NOPERSPECTIVE
#define Java_Main_E_H_TOK_NOPERSPECTIVE 14L
#undef Java_Main_E_H_TOK_SAMPLE
#define Java_Main_E_H_TOK_SAMPLE 15L
#undef Java_Main_E_H_TOK_ROW_MAJOR
#define Java_Main_E_H_TOK_ROW_MAJOR 16L
#undef Java_Main_E_H_TOK_COLUMN_MAJOR
#define Java_Main_E_H_TOK_COLUMN_MAJOR 17L
#undef Java_Main_E_H_TOK_PACK_OFFSET
#define Java_Main_E_H_TOK_PACK_OFFSET 18L
#undef Java_Main_E_H_TOK_IN
#define Java_Main_E_H_TOK_IN 19L
#undef Java_Main_E_H_TOK_OUT
#define Java_Main_E_H_TOK_OUT 20L
#undef Java_Main_E_H_TOK_IN_OUT
#define Java_Main_E_H_TOK_IN_OUT 21L
#undef Java_Main_E_H_TOK_LAYOUT
#define Java_Main_E_H_TOK_LAYOUT 22L
#undef Java_Main_E_H_TOK_GLOBALLY_COHERENT
#define Java_Main_E_H_TOK_GLOBALLY_COHERENT 23L
#undef Java_Main_E_H_TOK_INLINE
#define Java_Main_E_H_TOK_INLINE 24L
#undef Java_Main_E_H_TOK_POINT
#define Java_Main_E_H_TOK_POINT 25L
#undef Java_Main_E_H_TOK_LINE
#define Java_Main_E_H_TOK_LINE 26L
#undef Java_Main_E_H_TOK_TRIANGLE
#define Java_Main_E_H_TOK_TRIANGLE 27L
#undef Java_Main_E_H_TOK_LINEADJ
#define Java_Main_E_H_TOK_LINEADJ 28L
#undef Java_Main_E_H_TOK_TRIANGLE_ADJ
#define Java_Main_E_H_TOK_TRIANGLE_ADJ 29L
#undef Java_Main_E_H_TOK_POINT_STREAM
#define Java_Main_E_H_TOK_POINT_STREAM 30L
#undef Java_Main_E_H_TOK_LINE_STREAM
#define Java_Main_E_H_TOK_LINE_STREAM 31L
#undef Java_Main_E_H_TOK_TRIANGLE_STREAM
#define Java_Main_E_H_TOK_TRIANGLE_STREAM 32L
#undef Java_Main_E_H_TOK_INPUT_PATCH
#define Java_Main_E_H_TOK_INPUT_PATCH 33L
#undef Java_Main_E_H_TOK_OUTPUT_PATCH
#define Java_Main_E_H_TOK_OUTPUT_PATCH 34L
#undef Java_Main_E_H_TOK_BUFFER
#define Java_Main_E_H_TOK_BUFFER 35L
#undef Java_Main_E_H_TOK_VECTOR
#define Java_Main_E_H_TOK_VECTOR 36L
#undef Java_Main_E_H_TOK_MATRIX
#define Java_Main_E_H_TOK_MATRIX 37L
#undef Java_Main_E_H_TOK_VOID
#define Java_Main_E_H_TOK_VOID 38L
#undef Java_Main_E_H_TOK_STRING
#define Java_Main_E_H_TOK_STRING 39L
#undef Java_Main_E_H_TOK_BOOL
#define Java_Main_E_H_TOK_BOOL 40L
#undef Java_Main_E_H_TOK_INT
#define Java_Main_E_H_TOK_INT 41L
#undef Java_Main_E_H_TOK_UINT
#define Java_Main_E_H_TOK_UINT 42L
#undef Java_Main_E_H_TOK_UINT64
#define Java_Main_E_H_TOK_UINT64 43L
#undef Java_Main_E_H_TOK_DWORD
#define Java_Main_E_H_TOK_DWORD 44L
#undef Java_Main_E_H_TOK_HALF
#define Java_Main_E_H_TOK_HALF 45L
#undef Java_Main_E_H_TOK_FLOAT
#define Java_Main_E_H_TOK_FLOAT 46L
#undef Java_Main_E_H_TOK_DOUBLE
#define Java_Main_E_H_TOK_DOUBLE 47L
#undef Java_Main_E_H_TOK_MIN16FLOAT
#define Java_Main_E_H_TOK_MIN16FLOAT 48L
#undef Java_Main_E_H_TOK_MIN10FLOAT
#define Java_Main_E_H_TOK_MIN10FLOAT 49L
#undef Java_Main_E_H_TOK_MIN16INT
#define Java_Main_E_H_TOK_MIN16INT 50L
#undef Java_Main_E_H_TOK_MIN12INT
#define Java_Main_E_H_TOK_MIN12INT 51L
#undef Java_Main_E_H_TOK_MIN16UINT
#define Java_Main_E_H_TOK_MIN16UINT 52L
#undef Java_Main_E_H_TOK_BOOL1
#define Java_Main_E_H_TOK_BOOL1 53L
#undef Java_Main_E_H_TOK_BOOL2
#define Java_Main_E_H_TOK_BOOL2 54L
#undef Java_Main_E_H_TOK_BOOL3
#define Java_Main_E_H_TOK_BOOL3 55L
#undef Java_Main_E_H_TOK_BOOL4
#define Java_Main_E_H_TOK_BOOL4 56L
#undef Java_Main_E_H_TOK_FLOAT1
#define Java_Main_E_H_TOK_FLOAT1 57L
#undef Java_Main_E_H_TOK_FLOAT2
#define Java_Main_E_H_TOK_FLOAT2 58L
#undef Java_Main_E_H_TOK_FLOAT3
#define Java_Main_E_H_TOK_FLOAT3 59L
#undef Java_Main_E_H_TOK_FLOAT4
#define Java_Main_E_H_TOK_FLOAT4 60L
#undef Java_Main_E_H_TOK_INT1
#define Java_Main_E_H_TOK_INT1 61L
#undef Java_Main_E_H_TOK_INT2
#define Java_Main_E_H_TOK_INT2 62L
#undef Java_Main_E_H_TOK_INT3
#define Java_Main_E_H_TOK_INT3 63L
#undef Java_Main_E_H_TOK_INT4
#define Java_Main_E_H_TOK_INT4 64L
#undef Java_Main_E_H_TOK_DOUBLE1
#define Java_Main_E_H_TOK_DOUBLE1 65L
#undef Java_Main_E_H_TOK_DOUBLE2
#define Java_Main_E_H_TOK_DOUBLE2 66L
#undef Java_Main_E_H_TOK_DOUBLE3
#define Java_Main_E_H_TOK_DOUBLE3 67L
#undef Java_Main_E_H_TOK_DOUBLE4
#define Java_Main_E_H_TOK_DOUBLE4 68L
#undef Java_Main_E_H_TOK_UINT1
#define Java_Main_E_H_TOK_UINT1 69L
#undef Java_Main_E_H_TOK_UINT2
#define Java_Main_E_H_TOK_UINT2 70L
#undef Java_Main_E_H_TOK_UINT3
#define Java_Main_E_H_TOK_UINT3 71L
#undef Java_Main_E_H_TOK_UINT4
#define Java_Main_E_H_TOK_UINT4 72L
#undef Java_Main_E_H_TOK_HALF1
#define Java_Main_E_H_TOK_HALF1 73L
#undef Java_Main_E_H_TOK_HALF2
#define Java_Main_E_H_TOK_HALF2 74L
#undef Java_Main_E_H_TOK_HALF3
#define Java_Main_E_H_TOK_HALF3 75L
#undef Java_Main_E_H_TOK_HALF4
#define Java_Main_E_H_TOK_HALF4 76L
#undef Java_Main_E_H_TOK_MIN16FLOAT1
#define Java_Main_E_H_TOK_MIN16FLOAT1 77L
#undef Java_Main_E_H_TOK_MIN16FLOAT2
#define Java_Main_E_H_TOK_MIN16FLOAT2 78L
#undef Java_Main_E_H_TOK_MIN16FLOAT3
#define Java_Main_E_H_TOK_MIN16FLOAT3 79L
#undef Java_Main_E_H_TOK_MIN16FLOAT4
#define Java_Main_E_H_TOK_MIN16FLOAT4 80L
#undef Java_Main_E_H_TOK_MIN10FLOAT1
#define Java_Main_E_H_TOK_MIN10FLOAT1 81L
#undef Java_Main_E_H_TOK_MIN10FLOAT2
#define Java_Main_E_H_TOK_MIN10FLOAT2 82L
#undef Java_Main_E_H_TOK_MIN10FLOAT3
#define Java_Main_E_H_TOK_MIN10FLOAT3 83L
#undef Java_Main_E_H_TOK_MIN10FLOAT4
#define Java_Main_E_H_TOK_MIN10FLOAT4 84L
#undef Java_Main_E_H_TOK_MIN16INT1
#define Java_Main_E_H_TOK_MIN16INT1 85L
#undef Java_Main_E_H_TOK_MIN16INT2
#define Java_Main_E_H_TOK_MIN16INT2 86L
#undef Java_Main_E_H_TOK_MIN16INT3
#define Java_Main_E_H_TOK_MIN16INT3 87L
#undef Java_Main_E_H_TOK_MIN16INT4
#define Java_Main_E_H_TOK_MIN16INT4 88L
#undef Java_Main_E_H_TOK_MIN12INT1
#define Java_Main_E_H_TOK_MIN12INT1 89L
#undef Java_Main_E_H_TOK_MIN12INT2
#define Java_Main_E_H_TOK_MIN12INT2 90L
#undef Java_Main_E_H_TOK_MIN12INT3
#define Java_Main_E_H_TOK_MIN12INT3 91L
#undef Java_Main_E_H_TOK_MIN12INT4
#define Java_Main_E_H_TOK_MIN12INT4 92L
#undef Java_Main_E_H_TOK_MIN16UINT1
#define Java_Main_E_H_TOK_MIN16UINT1 93L
#undef Java_Main_E_H_TOK_MIN16UINT2
#define Java_Main_E_H_TOK_MIN16UINT2 94L
#undef Java_Main_E_H_TOK_MIN16UINT3
#define Java_Main_E_H_TOK_MIN16UINT3 95L
#undef Java_Main_E_H_TOK_MIN16UINT4
#define Java_Main_E_H_TOK_MIN16UINT4 96L
#undef Java_Main_E_H_TOK_INT1X1
#define Java_Main_E_H_TOK_INT1X1 97L
#undef Java_Main_E_H_TOK_INT1X2
#define Java_Main_E_H_TOK_INT1X2 98L
#undef Java_Main_E_H_TOK_INT1X3
#define Java_Main_E_H_TOK_INT1X3 99L
#undef Java_Main_E_H_TOK_INT1X4
#define Java_Main_E_H_TOK_INT1X4 100L
#undef Java_Main_E_H_TOK_INT2X1
#define Java_Main_E_H_TOK_INT2X1 101L
#undef Java_Main_E_H_TOK_INT2X2
#define Java_Main_E_H_TOK_INT2X2 102L
#undef Java_Main_E_H_TOK_INT2X3
#define Java_Main_E_H_TOK_INT2X3 103L
#undef Java_Main_E_H_TOK_INT2X4
#define Java_Main_E_H_TOK_INT2X4 104L
#undef Java_Main_E_H_TOK_INT3X1
#define Java_Main_E_H_TOK_INT3X1 105L
#undef Java_Main_E_H_TOK_INT3X2
#define Java_Main_E_H_TOK_INT3X2 106L
#undef Java_Main_E_H_TOK_INT3X3
#define Java_Main_E_H_TOK_INT3X3 107L
#undef Java_Main_E_H_TOK_INT3X4
#define Java_Main_E_H_TOK_INT3X4 108L
#undef Java_Main_E_H_TOK_INT4X1
#define Java_Main_E_H_TOK_INT4X1 109L
#undef Java_Main_E_H_TOK_INT4X2
#define Java_Main_E_H_TOK_INT4X2 110L
#undef Java_Main_E_H_TOK_INT4X3
#define Java_Main_E_H_TOK_INT4X3 111L
#undef Java_Main_E_H_TOK_INT4X4
#define Java_Main_E_H_TOK_INT4X4 112L
#undef Java_Main_E_H_TOK_UINT1X1
#define Java_Main_E_H_TOK_UINT1X1 113L
#undef Java_Main_E_H_TOK_UINT1X2
#define Java_Main_E_H_TOK_UINT1X2 114L
#undef Java_Main_E_H_TOK_UINT1X3
#define Java_Main_E_H_TOK_UINT1X3 115L
#undef Java_Main_E_H_TOK_UINT1X4
#define Java_Main_E_H_TOK_UINT1X4 116L
#undef Java_Main_E_H_TOK_UINT2X1
#define Java_Main_E_H_TOK_UINT2X1 117L
#undef Java_Main_E_H_TOK_UINT2X2
#define Java_Main_E_H_TOK_UINT2X2 118L
#undef Java_Main_E_H_TOK_UINT2X3
#define Java_Main_E_H_TOK_UINT2X3 119L
#undef Java_Main_E_H_TOK_UINT2X4
#define Java_Main_E_H_TOK_UINT2X4 120L
#undef Java_Main_E_H_TOK_UINT3X1
#define Java_Main_E_H_TOK_UINT3X1 121L
#undef Java_Main_E_H_TOK_UINT3X2
#define Java_Main_E_H_TOK_UINT3X2 122L
#undef Java_Main_E_H_TOK_UINT3X3
#define Java_Main_E_H_TOK_UINT3X3 123L
#undef Java_Main_E_H_TOK_UINT3X4
#define Java_Main_E_H_TOK_UINT3X4 124L
#undef Java_Main_E_H_TOK_UINT4X1
#define Java_Main_E_H_TOK_UINT4X1 125L
#undef Java_Main_E_H_TOK_UINT4X2
#define Java_Main_E_H_TOK_UINT4X2 126L
#undef Java_Main_E_H_TOK_UINT4X3
#define Java_Main_E_H_TOK_UINT4X3 127L
#undef Java_Main_E_H_TOK_UINT4X4
#define Java_Main_E_H_TOK_UINT4X4 128L
#undef Java_Main_E_H_TOK_BOOL1X1
#define Java_Main_E_H_TOK_BOOL1X1 129L
#undef Java_Main_E_H_TOK_BOOL1X2
#define Java_Main_E_H_TOK_BOOL1X2 130L
#undef Java_Main_E_H_TOK_BOOL1X3
#define Java_Main_E_H_TOK_BOOL1X3 131L
#undef Java_Main_E_H_TOK_BOOL1X4
#define Java_Main_E_H_TOK_BOOL1X4 132L
#undef Java_Main_E_H_TOK_BOOL2X1
#define Java_Main_E_H_TOK_BOOL2X1 133L
#undef Java_Main_E_H_TOK_BOOL2X2
#define Java_Main_E_H_TOK_BOOL2X2 134L
#undef Java_Main_E_H_TOK_BOOL2X3
#define Java_Main_E_H_TOK_BOOL2X3 135L
#undef Java_Main_E_H_TOK_BOOL2X4
#define Java_Main_E_H_TOK_BOOL2X4 136L
#undef Java_Main_E_H_TOK_BOOL3X1
#define Java_Main_E_H_TOK_BOOL3X1 137L
#undef Java_Main_E_H_TOK_BOOL3X2
#define Java_Main_E_H_TOK_BOOL3X2 138L
#undef Java_Main_E_H_TOK_BOOL3X3
#define Java_Main_E_H_TOK_BOOL3X3 139L
#undef Java_Main_E_H_TOK_BOOL3X4
#define Java_Main_E_H_TOK_BOOL3X4 140L
#undef Java_Main_E_H_TOK_BOOL4X1
#define Java_Main_E_H_TOK_BOOL4X1 141L
#undef Java_Main_E_H_TOK_BOOL4X2
#define Java_Main_E_H_TOK_BOOL4X2 142L
#undef Java_Main_E_H_TOK_BOOL4X3
#define Java_Main_E_H_TOK_BOOL4X3 143L
#undef Java_Main_E_H_TOK_BOOL4X4
#define Java_Main_E_H_TOK_BOOL4X4 144L
#undef Java_Main_E_H_TOK_FLOAT1X1
#define Java_Main_E_H_TOK_FLOAT1X1 145L
#undef Java_Main_E_H_TOK_FLOAT1X2
#define Java_Main_E_H_TOK_FLOAT1X2 146L
#undef Java_Main_E_H_TOK_FLOAT1X3
#define Java_Main_E_H_TOK_FLOAT1X3 147L
#undef Java_Main_E_H_TOK_FLOAT1X4
#define Java_Main_E_H_TOK_FLOAT1X4 148L
#undef Java_Main_E_H_TOK_FLOAT2X1
#define Java_Main_E_H_TOK_FLOAT2X1 149L
#undef Java_Main_E_H_TOK_FLOAT2X2
#define Java_Main_E_H_TOK_FLOAT2X2 150L
#undef Java_Main_E_H_TOK_FLOAT2X3
#define Java_Main_E_H_TOK_FLOAT2X3 151L
#undef Java_Main_E_H_TOK_FLOAT2X4
#define Java_Main_E_H_TOK_FLOAT2X4 152L
#undef Java_Main_E_H_TOK_FLOAT3X1
#define Java_Main_E_H_TOK_FLOAT3X1 153L
#undef Java_Main_E_H_TOK_FLOAT3X2
#define Java_Main_E_H_TOK_FLOAT3X2 154L
#undef Java_Main_E_H_TOK_FLOAT3X3
#define Java_Main_E_H_TOK_FLOAT3X3 155L
#undef Java_Main_E_H_TOK_FLOAT3X4
#define Java_Main_E_H_TOK_FLOAT3X4 156L
#undef Java_Main_E_H_TOK_FLOAT4X1
#define Java_Main_E_H_TOK_FLOAT4X1 157L
#undef Java_Main_E_H_TOK_FLOAT4X2
#define Java_Main_E_H_TOK_FLOAT4X2 158L
#undef Java_Main_E_H_TOK_FLOAT4X3
#define Java_Main_E_H_TOK_FLOAT4X3 159L
#undef Java_Main_E_H_TOK_FLOAT4X4
#define Java_Main_E_H_TOK_FLOAT4X4 160L
#undef Java_Main_E_H_TOK_HALF1X1
#define Java_Main_E_H_TOK_HALF1X1 161L
#undef Java_Main_E_H_TOK_HALF1X2
#define Java_Main_E_H_TOK_HALF1X2 162L
#undef Java_Main_E_H_TOK_HALF1X3
#define Java_Main_E_H_TOK_HALF1X3 163L
#undef Java_Main_E_H_TOK_HALF1X4
#define Java_Main_E_H_TOK_HALF1X4 164L
#undef Java_Main_E_H_TOK_HALF2X1
#define Java_Main_E_H_TOK_HALF2X1 165L
#undef Java_Main_E_H_TOK_HALF2X2
#define Java_Main_E_H_TOK_HALF2X2 166L
#undef Java_Main_E_H_TOK_HALF2X3
#define Java_Main_E_H_TOK_HALF2X3 167L
#undef Java_Main_E_H_TOK_HALF2X4
#define Java_Main_E_H_TOK_HALF2X4 168L
#undef Java_Main_E_H_TOK_HALF3X1
#define Java_Main_E_H_TOK_HALF3X1 169L
#undef Java_Main_E_H_TOK_HALF3X2
#define Java_Main_E_H_TOK_HALF3X2 170L
#undef Java_Main_E_H_TOK_HALF3X3
#define Java_Main_E_H_TOK_HALF3X3 171L
#undef Java_Main_E_H_TOK_HALF3X4
#define Java_Main_E_H_TOK_HALF3X4 172L
#undef Java_Main_E_H_TOK_HALF4X1
#define Java_Main_E_H_TOK_HALF4X1 173L
#undef Java_Main_E_H_TOK_HALF4X2
#define Java_Main_E_H_TOK_HALF4X2 174L
#undef Java_Main_E_H_TOK_HALF4X3
#define Java_Main_E_H_TOK_HALF4X3 175L
#undef Java_Main_E_H_TOK_HALF4X4
#define Java_Main_E_H_TOK_HALF4X4 176L
#undef Java_Main_E_H_TOK_DOUBLE1X1
#define Java_Main_E_H_TOK_DOUBLE1X1 177L
#undef Java_Main_E_H_TOK_DOUBLE1X2
#define Java_Main_E_H_TOK_DOUBLE1X2 178L
#undef Java_Main_E_H_TOK_DOUBLE1X3
#define Java_Main_E_H_TOK_DOUBLE1X3 179L
#undef Java_Main_E_H_TOK_DOUBLE1X4
#define Java_Main_E_H_TOK_DOUBLE1X4 180L
#undef Java_Main_E_H_TOK_DOUBLE2X1
#define Java_Main_E_H_TOK_DOUBLE2X1 181L
#undef Java_Main_E_H_TOK_DOUBLE2X2
#define Java_Main_E_H_TOK_DOUBLE2X2 182L
#undef Java_Main_E_H_TOK_DOUBLE2X3
#define Java_Main_E_H_TOK_DOUBLE2X3 183L
#undef Java_Main_E_H_TOK_DOUBLE2X4
#define Java_Main_E_H_TOK_DOUBLE2X4 184L
#undef Java_Main_E_H_TOK_DOUBLE3X1
#define Java_Main_E_H_TOK_DOUBLE3X1 185L
#undef Java_Main_E_H_TOK_DOUBLE3X2
#define Java_Main_E_H_TOK_DOUBLE3X2 186L
#undef Java_Main_E_H_TOK_DOUBLE3X3
#define Java_Main_E_H_TOK_DOUBLE3X3 187L
#undef Java_Main_E_H_TOK_DOUBLE3X4
#define Java_Main_E_H_TOK_DOUBLE3X4 188L
#undef Java_Main_E_H_TOK_DOUBLE4X1
#define Java_Main_E_H_TOK_DOUBLE4X1 189L
#undef Java_Main_E_H_TOK_DOUBLE4X2
#define Java_Main_E_H_TOK_DOUBLE4X2 190L
#undef Java_Main_E_H_TOK_DOUBLE4X3
#define Java_Main_E_H_TOK_DOUBLE4X3 191L
#undef Java_Main_E_H_TOK_DOUBLE4X4
#define Java_Main_E_H_TOK_DOUBLE4X4 192L
#undef Java_Main_E_H_TOK_SAMPLER
#define Java_Main_E_H_TOK_SAMPLER 193L
#undef Java_Main_E_H_TOK_SAMPLER1D
#define Java_Main_E_H_TOK_SAMPLER1D 194L
#undef Java_Main_E_H_TOK_SAMPLER2D
#define Java_Main_E_H_TOK_SAMPLER2D 195L
#undef Java_Main_E_H_TOK_SAMPLER3D
#define Java_Main_E_H_TOK_SAMPLER3D 196L
#undef Java_Main_E_H_TOK_SAMPLER_CUBE
#define Java_Main_E_H_TOK_SAMPLER_CUBE 197L
#undef Java_Main_E_H_TOK_SAMPLER_STATE
#define Java_Main_E_H_TOK_SAMPLER_STATE 198L
#undef Java_Main_E_H_TOK_SAMPLER_COMPARISON_STATE
#define Java_Main_E_H_TOK_SAMPLER_COMPARISON_STATE 199L
#undef Java_Main_E_H_TOK_TEXTURE
#define Java_Main_E_H_TOK_TEXTURE 200L
#undef Java_Main_E_H_TOK_TEXTURE1D
#define Java_Main_E_H_TOK_TEXTURE1D 201L
#undef Java_Main_E_H_TOK_TEXTURE1DARRAY
#define Java_Main_E_H_TOK_TEXTURE1DARRAY 202L
#undef Java_Main_E_H_TOK_TEXTURE2D
#define Java_Main_E_H_TOK_TEXTURE2D 203L
#undef Java_Main_E_H_TOK_TEXTURE2DARRAY
#define Java_Main_E_H_TOK_TEXTURE2DARRAY 204L
#undef Java_Main_E_H_TOK_TEXTURE3D
#define Java_Main_E_H_TOK_TEXTURE3D 205L
#undef Java_Main_E_H_TOK_TEXTURE_CUBE
#define Java_Main_E_H_TOK_TEXTURE_CUBE 206L
#undef Java_Main_E_H_TOK_TEXTURE_CUBEARRAY
#define Java_Main_E_H_TOK_TEXTURE_CUBEARRAY 207L
#undef Java_Main_E_H_TOK_TEXTURE2D_MS
#define Java_Main_E_H_TOK_TEXTURE2D_MS 208L
#undef Java_Main_E_H_TOK_TEXTURE2D_MSARRAY
#define Java_Main_E_H_TOK_TEXTURE2D_MSARRAY 209L
#undef Java_Main_E_H_TOK_RW_TEXTURE1D
#define Java_Main_E_H_TOK_RW_TEXTURE1D 210L
#undef Java_Main_E_H_TOK_RW_TEXTURE1DARRAY
#define Java_Main_E_H_TOK_RW_TEXTURE1DARRAY 211L
#undef Java_Main_E_H_TOK_RW_TEXTURE2D
#define Java_Main_E_H_TOK_RW_TEXTURE2D 212L
#undef Java_Main_E_H_TOK_RW_TEXTURE2DARRAY
#define Java_Main_E_H_TOK_RW_TEXTURE2DARRAY 213L
#undef Java_Main_E_H_TOK_RW_TEXTURE3D
#define Java_Main_E_H_TOK_RW_TEXTURE3D 214L
#undef Java_Main_E_H_TOK_RW_BUFFER
#define Java_Main_E_H_TOK_RW_BUFFER 215L
#undef Java_Main_E_H_TOK_SUBPASS_INPUT
#define Java_Main_E_H_TOK_SUBPASS_INPUT 216L
#undef Java_Main_E_H_TOK_SUBPASS_INPUT_MS
#define Java_Main_E_H_TOK_SUBPASS_INPUT_MS 217L
#undef Java_Main_E_H_TOK_APPEND_STRUCTURED_BUFFER
#define Java_Main_E_H_TOK_APPEND_STRUCTURED_BUFFER 218L
#undef Java_Main_E_H_TOK_BYTE_ADDRESS_BUFFER
#define Java_Main_E_H_TOK_BYTE_ADDRESS_BUFFER 219L
#undef Java_Main_E_H_TOK_CONSUME_STRUCTURED_BUFFER
#define Java_Main_E_H_TOK_CONSUME_STRUCTURED_BUFFER 220L
#undef Java_Main_E_H_TOK_RW_BYTE_ADDRESS_BUFFER
#define Java_Main_E_H_TOK_RW_BYTE_ADDRESS_BUFFER 221L
#undef Java_Main_E_H_TOK_RW_STRUCTURED_BUFFER
#define Java_Main_E_H_TOK_RW_STRUCTURED_BUFFER 222L
#undef Java_Main_E_H_TOK_STRUCTURED_BUFFER
#define Java_Main_E_H_TOK_STRUCTURED_BUFFER 223L
#undef Java_Main_E_H_TOK_TEXTURE_BUFFER
#define Java_Main_E_H_TOK_TEXTURE_BUFFER 224L
#undef Java_Main_E_H_TOK_IDENTIFIER
#define Java_Main_E_H_TOK_IDENTIFIER 225L
#undef Java_Main_E_H_TOK_CLASS
#define Java_Main_E_H_TOK_CLASS 226L
#undef Java_Main_E_H_TOK_STRUCT
#define Java_Main_E_H_TOK_STRUCT 227L
#undef Java_Main_E_H_TOK_CBUFFER
#define Java_Main_E_H_TOK_CBUFFER 228L
#undef Java_Main_E_H_TOK_TBUFFER
#define Java_Main_E_H_TOK_TBUFFER 229L
#undef Java_Main_E_H_TOK_TYPEDEF
#define Java_Main_E_H_TOK_TYPEDEF 230L
#undef Java_Main_E_H_TOK_THIS
#define Java_Main_E_H_TOK_THIS 231L
#undef Java_Main_E_H_TOK_NAMESPACE
#define Java_Main_E_H_TOK_NAMESPACE 232L
#undef Java_Main_E_H_TOK_CONSTANT_BUFFER
#define Java_Main_E_H_TOK_CONSTANT_BUFFER 233L
#undef Java_Main_E_H_TOK_FLOAT16_CONSTANT
#define Java_Main_E_H_TOK_FLOAT16_CONSTANT 234L
#undef Java_Main_E_H_TOK_FLOAT_CONSTANT
#define Java_Main_E_H_TOK_FLOAT_CONSTANT 235L
#undef Java_Main_E_H_TOK_DOUBLE_CONSTANT
#define Java_Main_E_H_TOK_DOUBLE_CONSTANT 236L
#undef Java_Main_E_H_TOK_INT_CONSTANT
#define Java_Main_E_H_TOK_INT_CONSTANT 237L
#undef Java_Main_E_H_TOK_UINT_CONSTANT
#define Java_Main_E_H_TOK_UINT_CONSTANT 238L
#undef Java_Main_E_H_TOK_BOOL_CONSTANT
#define Java_Main_E_H_TOK_BOOL_CONSTANT 239L
#undef Java_Main_E_H_TOK_STRING_CONSTANT
#define Java_Main_E_H_TOK_STRING_CONSTANT 240L
#undef Java_Main_E_H_TOK_FOR
#define Java_Main_E_H_TOK_FOR 241L
#undef Java_Main_E_H_TOK_DO
#define Java_Main_E_H_TOK_DO 242L
#undef Java_Main_E_H_TOK_WHILE
#define Java_Main_E_H_TOK_WHILE 243L
#undef Java_Main_E_H_TOK_BREAK
#define Java_Main_E_H_TOK_BREAK 244L
#undef Java_Main_E_H_TOK_CONTINUE
#define Java_Main_E_H_TOK_CONTINUE 245L
#undef Java_Main_E_H_TOK_IF
#define Java_Main_E_H_TOK_IF 246L
#undef Java_Main_E_H_TOK_ELSE
#define Java_Main_E_H_TOK_ELSE 247L
#undef Java_Main_E_H_TOK_DISCARD
#define Java_Main_E_H_TOK_DISCARD 248L
#undef Java_Main_E_H_TOK_RETURN
#define Java_Main_E_H_TOK_RETURN 249L
#undef Java_Main_E_H_TOK_SWITCH
#define Java_Main_E_H_TOK_SWITCH 250L
#undef Java_Main_E_H_TOK_CASE
#define Java_Main_E_H_TOK_CASE 251L
#undef Java_Main_E_H_TOK_DEFAULT
#define Java_Main_E_H_TOK_DEFAULT 252L
#undef Java_Main_E_H_TOK_LEFT_OP
#define Java_Main_E_H_TOK_LEFT_OP 253L
#undef Java_Main_E_H_TOK_RIGHT_OP
#define Java_Main_E_H_TOK_RIGHT_OP 254L
#undef Java_Main_E_H_TOK_INC_OP
#define Java_Main_E_H_TOK_INC_OP 255L
#undef Java_Main_E_H_TOK_DEC_OP
#define Java_Main_E_H_TOK_DEC_OP 256L
#undef Java_Main_E_H_TOK_LE_OP
#define Java_Main_E_H_TOK_LE_OP 257L
#undef Java_Main_E_H_TOK_GE_OP
#define Java_Main_E_H_TOK_GE_OP 258L
#undef Java_Main_E_H_TOK_EQ_OP
#define Java_Main_E_H_TOK_EQ_OP 259L
#undef Java_Main_E_H_TOK_NE_OP
#define Java_Main_E_H_TOK_NE_OP 260L
#undef Java_Main_E_H_TOK_AND_OP
#define Java_Main_E_H_TOK_AND_OP 261L
#undef Java_Main_E_H_TOK_OR_OP
#define Java_Main_E_H_TOK_OR_OP 262L
#undef Java_Main_E_H_TOK_XOR_OP
#define Java_Main_E_H_TOK_XOR_OP 263L
#undef Java_Main_E_H_TOK_ASSIGN
#define Java_Main_E_H_TOK_ASSIGN 264L
#undef Java_Main_E_H_TOK_MUL_ASSIGN
#define Java_Main_E_H_TOK_MUL_ASSIGN 265L
#undef Java_Main_E_H_TOK_DIV_ASSIGN
#define Java_Main_E_H_TOK_DIV_ASSIGN 266L
#undef Java_Main_E_H_TOK_ADD_ASSIGN
#define Java_Main_E_H_TOK_ADD_ASSIGN 267L
#undef Java_Main_E_H_TOK_MOD_ASSIGN
#define Java_Main_E_H_TOK_MOD_ASSIGN 268L
#undef Java_Main_E_H_TOK_LEFT_ASSIGN
#define Java_Main_E_H_TOK_LEFT_ASSIGN 269L
#undef Java_Main_E_H_TOK_RIGHT_ASSIGN
#define Java_Main_E_H_TOK_RIGHT_ASSIGN 270L
#undef Java_Main_E_H_TOK_AND_ASSIGN
#define Java_Main_E_H_TOK_AND_ASSIGN 271L
#undef Java_Main_E_H_TOK_XOR_ASSIGN
#define Java_Main_E_H_TOK_XOR_ASSIGN 272L
#undef Java_Main_E_H_TOK_OR_ASSIGN
#define Java_Main_E_H_TOK_OR_ASSIGN 273L
#undef Java_Main_E_H_TOK_SUB_ASSIGN
#define Java_Main_E_H_TOK_SUB_ASSIGN 274L
#undef Java_Main_E_H_TOK_LEFT_PAREN
#define Java_Main_E_H_TOK_LEFT_PAREN 275L
#undef Java_Main_E_H_TOK_RIGHT_PAREN
#define Java_Main_E_H_TOK_RIGHT_PAREN 276L
#undef Java_Main_E_H_TOK_LEFT_BRACKET
#define Java_Main_E_H_TOK_LEFT_BRACKET 277L
#undef Java_Main_E_H_TOK_RIGHT_BRACKET
#define Java_Main_E_H_TOK_RIGHT_BRACKET 278L
#undef Java_Main_E_H_TOK_LEFT_BRACE
#define Java_Main_E_H_TOK_LEFT_BRACE 279L
#undef Java_Main_E_H_TOK_RIGHT_BRACE
#define Java_Main_E_H_TOK_RIGHT_BRACE 280L
#undef Java_Main_E_H_TOK_DOT
#define Java_Main_E_H_TOK_DOT 281L
#undef Java_Main_E_H_TOK_COMMA
#define Java_Main_E_H_TOK_COMMA 282L
#undef Java_Main_E_H_TOK_COLON
#define Java_Main_E_H_TOK_COLON 283L
#undef Java_Main_E_H_TOK_COLON_COLON
#define Java_Main_E_H_TOK_COLON_COLON 284L
#undef Java_Main_E_H_TOK_SEMICOLON
#define Java_Main_E_H_TOK_SEMICOLON 285L
#undef Java_Main_E_H_TOK_BANG
#define Java_Main_E_H_TOK_BANG 286L
#undef Java_Main_E_H_TOK_DASH
#define Java_Main_E_H_TOK_DASH 287L
#undef Java_Main_E_H_TOK_TILDE
#define Java_Main_E_H_TOK_TILDE 288L
#undef Java_Main_E_H_TOK_PLUS
#define Java_Main_E_H_TOK_PLUS 289L
#undef Java_Main_E_H_TOK_STAR
#define Java_Main_E_H_TOK_STAR 290L
#undef Java_Main_E_H_TOK_SLASH
#define Java_Main_E_H_TOK_SLASH 291L
#undef Java_Main_E_H_TOK_PERCENT
#define Java_Main_E_H_TOK_PERCENT 292L
#undef Java_Main_E_H_TOK_LEFT_ANGLE
#define Java_Main_E_H_TOK_LEFT_ANGLE 293L
#undef Java_Main_E_H_TOK_RIGHT_ANGLE
#define Java_Main_E_H_TOK_RIGHT_ANGLE 294L
#undef Java_Main_E_H_TOK_VERTICAL_BAR
#define Java_Main_E_H_TOK_VERTICAL_BAR 295L
#undef Java_Main_E_H_TOK_CARET
#define Java_Main_E_H_TOK_CARET 296L
#undef Java_Main_E_H_TOK_AMPERSAND
#define Java_Main_E_H_TOK_AMPERSAND 297L
#undef Java_Main_E_H_TOK_QUESTION
#define Java_Main_E_H_TOK_QUESTION 298L
#undef Java_Main_EV_PRE_VISIT
#define Java_Main_EV_PRE_VISIT 0L
#undef Java_Main_EV_IN_VISIT
#define Java_Main_EV_IN_VISIT 1L
#undef Java_Main_EV_POST_VISIT
#define Java_Main_EV_POST_VISIT 2L
#undef Java_Main_ELP_NONE
#define Java_Main_ELP_NONE 0L
#undef Java_Main_ELP_SHARED
#define Java_Main_ELP_SHARED 1L
#undef Java_Main_ELP_STD140
#define Java_Main_ELP_STD140 2L
#undef Java_Main_ELP_STD430
#define Java_Main_ELP_STD430 3L
#undef Java_Main_ELP_PACKED
#define Java_Main_ELP_PACKED 4L
#undef Java_Main_ELP_SCALAR
#define Java_Main_ELP_SCALAR 5L
#undef Java_Main_ELM_NONE
#define Java_Main_ELM_NONE 0L
#undef Java_Main_ELM_ROW_MAJOR
#define Java_Main_ELM_ROW_MAJOR 1L
#undef Java_Main_ELM_COLUMN_MAJOR
#define Java_Main_ELM_COLUMN_MAJOR 2L
#undef Java_Main_TNUMERICFEATURES_FEATURE_SHADER_EXPLICIT_ARITHMETIC_TYPES
#define Java_Main_TNUMERICFEATURES_FEATURE_SHADER_EXPLICIT_ARITHMETIC_TYPES 1L
#undef Java_Main_TNUMERICFEATURES_FEATURE_SHADER_EXPLICIT_ARITHMETIC_TYPES_INT8
#define Java_Main_TNUMERICFEATURES_FEATURE_SHADER_EXPLICIT_ARITHMETIC_TYPES_INT8 2L
#undef Java_Main_TNUMERICFEATURES_FEATURE_SHADER_EXPLICIT_ARITHMETIC_TYPES_INT16
#define Java_Main_TNUMERICFEATURES_FEATURE_SHADER_EXPLICIT_ARITHMETIC_TYPES_INT16 4L
#undef Java_Main_TNUMERICFEATURES_FEATURE_SHADER_EXPLICIT_ARITHMETIC_TYPES_INT32
#define Java_Main_TNUMERICFEATURES_FEATURE_SHADER_EXPLICIT_ARITHMETIC_TYPES_INT32 8L
#undef Java_Main_TNUMERICFEATURES_FEATURE_SHADER_EXPLICIT_ARITHMETIC_TYPES_INT64
#define Java_Main_TNUMERICFEATURES_FEATURE_SHADER_EXPLICIT_ARITHMETIC_TYPES_INT64 16L
#undef Java_Main_TNUMERICFEATURES_FEATURE_SHADER_EXPLICIT_ARITHMETIC_TYPES_FLOAT16
#define Java_Main_TNUMERICFEATURES_FEATURE_SHADER_EXPLICIT_ARITHMETIC_TYPES_FLOAT16 32L
#undef Java_Main_TNUMERICFEATURES_FEATURE_SHADER_EXPLICIT_ARITHMETIC_TYPES_FLOAT32
#define Java_Main_TNUMERICFEATURES_FEATURE_SHADER_EXPLICIT_ARITHMETIC_TYPES_FLOAT32 64L
#undef Java_Main_TNUMERICFEATURES_FEATURE_SHADER_EXPLICIT_ARITHMETIC_TYPES_FLOAT64
#define Java_Main_TNUMERICFEATURES_FEATURE_SHADER_EXPLICIT_ARITHMETIC_TYPES_FLOAT64 128L
#undef Java_Main_TNUMERICFEATURES_FEATURE_SHADER_IMPLICIT_CONVERSIONS
#define Java_Main_TNUMERICFEATURES_FEATURE_SHADER_IMPLICIT_CONVERSIONS 256L
#undef Java_Main_TNUMERICFEATURES_FEATURE_GPU_SHADER_FP64
#define Java_Main_TNUMERICFEATURES_FEATURE_GPU_SHADER_FP64 512L
#undef Java_Main_TNUMERICFEATURES_FEATURE_GPU_SHADER_INT16
#define Java_Main_TNUMERICFEATURES_FEATURE_GPU_SHADER_INT16 1024L
#undef Java_Main_TNUMERICFEATURES_FEATURE_GPU_SHADER_HALF_FLOAT
#define Java_Main_TNUMERICFEATURES_FEATURE_GPU_SHADER_HALF_FLOAT 2048L
#undef Java_Main_SPIRVBIN_BASE_T_OPTIONS_NONE
#define Java_Main_SPIRVBIN_BASE_T_OPTIONS_NONE 0L
#undef Java_Main_SPIRVBIN_BASE_T_OPTIONS_STRIP
#define Java_Main_SPIRVBIN_BASE_T_OPTIONS_STRIP 1L
#undef Java_Main_SPIRVBIN_BASE_T_OPTIONS_MAP_TYPES
#define Java_Main_SPIRVBIN_BASE_T_OPTIONS_MAP_TYPES 2L
#undef Java_Main_SPIRVBIN_BASE_T_OPTIONS_MAP_NAMES
#define Java_Main_SPIRVBIN_BASE_T_OPTIONS_MAP_NAMES 4L
#undef Java_Main_SPIRVBIN_BASE_T_OPTIONS_MAP_FUNCS
#define Java_Main_SPIRVBIN_BASE_T_OPTIONS_MAP_FUNCS 8L
#undef Java_Main_SPIRVBIN_BASE_T_OPTIONS_DCE_FUNCS
#define Java_Main_SPIRVBIN_BASE_T_OPTIONS_DCE_FUNCS 16L
#undef Java_Main_SPIRVBIN_BASE_T_OPTIONS_DCE_VARS
#define Java_Main_SPIRVBIN_BASE_T_OPTIONS_DCE_VARS 32L
#undef Java_Main_SPIRVBIN_BASE_T_OPTIONS_DCE_TYPES
#define Java_Main_SPIRVBIN_BASE_T_OPTIONS_DCE_TYPES 64L
#undef Java_Main_SPIRVBIN_BASE_T_OPTIONS_OPT_LOADSTORE
#define Java_Main_SPIRVBIN_BASE_T_OPTIONS_OPT_LOADSTORE 128L
#undef Java_Main_SPIRVBIN_BASE_T_OPTIONS_OPT_FWD_LS
#define Java_Main_SPIRVBIN_BASE_T_OPTIONS_OPT_FWD_LS 256L
#undef Java_Main_SPIRVBIN_BASE_T_OPTIONS_MAP_ALL
#define Java_Main_SPIRVBIN_BASE_T_OPTIONS_MAP_ALL 14L
#undef Java_Main_SPIRVBIN_BASE_T_OPTIONS_DCE_ALL
#define Java_Main_SPIRVBIN_BASE_T_OPTIONS_DCE_ALL 112L
#undef Java_Main_SPIRVBIN_BASE_T_OPTIONS_OPT_ALL
#define Java_Main_SPIRVBIN_BASE_T_OPTIONS_OPT_ALL 128L
#undef Java_Main_SPIRVBIN_BASE_T_OPTIONS_ALL_BUT_STRIP
#define Java_Main_SPIRVBIN_BASE_T_OPTIONS_ALL_BUT_STRIP 254L
#undef Java_Main_SPIRVBIN_BASE_T_OPTIONS_DO_EVERYTHING
#define Java_Main_SPIRVBIN_BASE_T_OPTIONS_DO_EVERYTHING 255L
#undef Java_Main_OP_CLASS_MISC
#define Java_Main_OP_CLASS_MISC 0L
#undef Java_Main_OP_CLASS_DEBUG
#define Java_Main_OP_CLASS_DEBUG 1L
#undef Java_Main_OP_CLASS_ANNOTATE
#define Java_Main_OP_CLASS_ANNOTATE 2L
#undef Java_Main_OP_CLASS_EXTENSION
#define Java_Main_OP_CLASS_EXTENSION 3L
#undef Java_Main_OP_CLASS_MODE
#define Java_Main_OP_CLASS_MODE 4L
#undef Java_Main_OP_CLASS_TYPE
#define Java_Main_OP_CLASS_TYPE 5L
#undef Java_Main_OP_CLASS_CONSTANT
#define Java_Main_OP_CLASS_CONSTANT 6L
#undef Java_Main_OP_CLASS_MEMORY
#define Java_Main_OP_CLASS_MEMORY 7L
#undef Java_Main_OP_CLASS_FUNCTION
#define Java_Main_OP_CLASS_FUNCTION 8L
#undef Java_Main_OP_CLASS_IMAGE
#define Java_Main_OP_CLASS_IMAGE 9L
#undef Java_Main_OP_CLASS_CONVERT
#define Java_Main_OP_CLASS_CONVERT 10L
#undef Java_Main_OP_CLASS_COMPOSITE
#define Java_Main_OP_CLASS_COMPOSITE 11L
#undef Java_Main_OP_CLASS_ARITHMETIC
#define Java_Main_OP_CLASS_ARITHMETIC 12L
#undef Java_Main_OP_CLASS_BIT
#define Java_Main_OP_CLASS_BIT 13L
#undef Java_Main_OP_CLASS_RELATIONAL_LOGICAL
#define Java_Main_OP_CLASS_RELATIONAL_LOGICAL 14L
#undef Java_Main_OP_CLASS_DERIVATIVE
#define Java_Main_OP_CLASS_DERIVATIVE 15L
#undef Java_Main_OP_CLASS_FLOW_CONTROL
#define Java_Main_OP_CLASS_FLOW_CONTROL 16L
#undef Java_Main_OP_CLASS_ATOMIC
#define Java_Main_OP_CLASS_ATOMIC 17L
#undef Java_Main_OP_CLASS_PRIMITIVE
#define Java_Main_OP_CLASS_PRIMITIVE 18L
#undef Java_Main_OP_CLASS_BARRIER
#define Java_Main_OP_CLASS_BARRIER 19L
#undef Java_Main_OP_CLASS_GROUP
#define Java_Main_OP_CLASS_GROUP 20L
#undef Java_Main_OP_CLASS_DEVICE_SIDE_ENQUEUE
#define Java_Main_OP_CLASS_DEVICE_SIDE_ENQUEUE 21L
#undef Java_Main_OP_CLASS_PIPE
#define Java_Main_OP_CLASS_PIPE 22L
#undef Java_Main_OP_CLASS_COUNT
#define Java_Main_OP_CLASS_COUNT 23L
#undef Java_Main_OP_CLASS_MISSING
#define Java_Main_OP_CLASS_MISSING 24L
#undef Java_Main_OPERAND_NONE
#define Java_Main_OPERAND_NONE 0L
#undef Java_Main_OPERAND_ID
#define Java_Main_OPERAND_ID 1L
#undef Java_Main_OPERAND_VARIABLE_IDS
#define Java_Main_OPERAND_VARIABLE_IDS 2L
#undef Java_Main_OPERAND_OPTIONAL_LITERAL
#define Java_Main_OPERAND_OPTIONAL_LITERAL 3L
#undef Java_Main_OPERAND_OPTIONAL_LITERAL_STRING
#define Java_Main_OPERAND_OPTIONAL_LITERAL_STRING 4L
#undef Java_Main_OPERAND_VARIABLE_LITERALS
#define Java_Main_OPERAND_VARIABLE_LITERALS 5L
#undef Java_Main_OPERAND_VARIABLE_ID_LITERAL
#define Java_Main_OPERAND_VARIABLE_ID_LITERAL 6L
#undef Java_Main_OPERAND_VARIABLE_LITERAL_ID
#define Java_Main_OPERAND_VARIABLE_LITERAL_ID 7L
#undef Java_Main_OPERAND_LITERAL_NUMBER
#define Java_Main_OPERAND_LITERAL_NUMBER 8L
#undef Java_Main_OPERAND_LITERAL_STRING
#define Java_Main_OPERAND_LITERAL_STRING 9L
#undef Java_Main_OPERAND_SOURCE
#define Java_Main_OPERAND_SOURCE 10L
#undef Java_Main_OPERAND_EXECUTION_MODEL
#define Java_Main_OPERAND_EXECUTION_MODEL 11L
#undef Java_Main_OPERAND_ADDRESSING
#define Java_Main_OPERAND_ADDRESSING 12L
#undef Java_Main_OPERAND_MEMORY
#define Java_Main_OPERAND_MEMORY 13L
#undef Java_Main_OPERAND_EXECUTION_MODE
#define Java_Main_OPERAND_EXECUTION_MODE 14L
#undef Java_Main_OPERAND_STORAGE
#define Java_Main_OPERAND_STORAGE 15L
#undef Java_Main_OPERAND_DIMENSIONALITY
#define Java_Main_OPERAND_DIMENSIONALITY 16L
#undef Java_Main_OPERAND_SAMPLER_ADDRESSING_MODE
#define Java_Main_OPERAND_SAMPLER_ADDRESSING_MODE 17L
#undef Java_Main_OPERAND_SAMPLER_FILTER_MODE
#define Java_Main_OPERAND_SAMPLER_FILTER_MODE 18L
#undef Java_Main_OPERAND_SAMPLER_IMAGE_FORMAT
#define Java_Main_OPERAND_SAMPLER_IMAGE_FORMAT 19L
#undef Java_Main_OPERAND_IMAGE_CHANNEL_ORDER
#define Java_Main_OPERAND_IMAGE_CHANNEL_ORDER 20L
#undef Java_Main_OPERAND_IMAGE_CHANNEL_DATA_TYPE
#define Java_Main_OPERAND_IMAGE_CHANNEL_DATA_TYPE 21L
#undef Java_Main_OPERAND_IMAGE_OPERANDS
#define Java_Main_OPERAND_IMAGE_OPERANDS 22L
#undef Java_Main_OPERAND_FP_FAST_MATH
#define Java_Main_OPERAND_FP_FAST_MATH 23L
#undef Java_Main_OPERAND_FP_ROUNDING_MODE
#define Java_Main_OPERAND_FP_ROUNDING_MODE 24L
#undef Java_Main_OPERAND_LINKAGE_TYPE
#define Java_Main_OPERAND_LINKAGE_TYPE 25L
#undef Java_Main_OPERAND_ACCESS_QUALIFIER
#define Java_Main_OPERAND_ACCESS_QUALIFIER 26L
#undef Java_Main_OPERAND_FUNC_PARAM_ATTR
#define Java_Main_OPERAND_FUNC_PARAM_ATTR 27L
#undef Java_Main_OPERAND_DECORATION
#define Java_Main_OPERAND_DECORATION 28L
#undef Java_Main_OPERAND_BUILT_IN
#define Java_Main_OPERAND_BUILT_IN 29L
#undef Java_Main_OPERAND_SELECT
#define Java_Main_OPERAND_SELECT 30L
#undef Java_Main_OPERAND_LOOP
#define Java_Main_OPERAND_LOOP 31L
#undef Java_Main_OPERAND_FUNCTION
#define Java_Main_OPERAND_FUNCTION 32L
#undef Java_Main_OPERAND_MEMORY_SEMANTICS
#define Java_Main_OPERAND_MEMORY_SEMANTICS 33L
#undef Java_Main_OPERAND_MEMORY_ACCESS
#define Java_Main_OPERAND_MEMORY_ACCESS 34L
#undef Java_Main_OPERAND_SCOPE
#define Java_Main_OPERAND_SCOPE 35L
#undef Java_Main_OPERAND_GROUP_OPERATION
#define Java_Main_OPERAND_GROUP_OPERATION 36L
#undef Java_Main_OPERAND_KERNEL_ENQUEUE_FLAGS
#define Java_Main_OPERAND_KERNEL_ENQUEUE_FLAGS 37L
#undef Java_Main_OPERAND_KERNEL_PROFILING_INFO
#define Java_Main_OPERAND_KERNEL_PROFILING_INFO 38L
#undef Java_Main_OPERAND_CAPABILITY
#define Java_Main_OPERAND_CAPABILITY 39L
#undef Java_Main_OPERAND_OPCODE
#define Java_Main_OPERAND_OPCODE 40L
#undef Java_Main_SHADER_BALLOT_BAD_AMD
#define Java_Main_SHADER_BALLOT_BAD_AMD 0L
#undef Java_Main_SWIZZLE_INVOCATIONS_AMD
#define Java_Main_SWIZZLE_INVOCATIONS_AMD 1L
#undef Java_Main_SWIZZLE_INVOCATIONS_MASKED_AMD
#define Java_Main_SWIZZLE_INVOCATIONS_MASKED_AMD 2L
#undef Java_Main_WRITE_INVOCATION_AMD
#define Java_Main_WRITE_INVOCATION_AMD 3L
#undef Java_Main_MBCNT_AMD
#define Java_Main_MBCNT_AMD 4L
#undef Java_Main_SHADER_TRINARY_MIN_MAX_BAD_AMD
#define Java_Main_SHADER_TRINARY_MIN_MAX_BAD_AMD 0L
#undef Java_Main_F_MIN3_AMD
#define Java_Main_F_MIN3_AMD 1L
#undef Java_Main_U_MIN3_AMD
#define Java_Main_U_MIN3_AMD 2L
#undef Java_Main_S_MIN3_AMD
#define Java_Main_S_MIN3_AMD 3L
#undef Java_Main_F_MAX3_AMD
#define Java_Main_F_MAX3_AMD 4L
#undef Java_Main_U_MAX3_AMD
#define Java_Main_U_MAX3_AMD 5L
#undef Java_Main_S_MAX3_AMD
#define Java_Main_S_MAX3_AMD 6L
#undef Java_Main_F_MID3_AMD
#define Java_Main_F_MID3_AMD 7L
#undef Java_Main_U_MID3_AMD
#define Java_Main_U_MID3_AMD 8L
#undef Java_Main_S_MID3_AMD
#define Java_Main_S_MID3_AMD 9L
#undef Java_Main_SHADER_EXPLICIT_VERTEX_PARAMETER_BAD_AMD
#define Java_Main_SHADER_EXPLICIT_VERTEX_PARAMETER_BAD_AMD 0L
#undef Java_Main_INTERPOLATE_AT_VERTEX_AMD
#define Java_Main_INTERPOLATE_AT_VERTEX_AMD 1L
#undef Java_Main_GCN_SHADER_BAD_AMD
#define Java_Main_GCN_SHADER_BAD_AMD 0L
#undef Java_Main_CUBE_FACE_INDEX_AMD
#define Java_Main_CUBE_FACE_INDEX_AMD 1L
#undef Java_Main_CUBE_FACE_COORD_AMD
#define Java_Main_CUBE_FACE_COORD_AMD 2L
#undef Java_Main_TIME_AMD
#define Java_Main_TIME_AMD 3L
#undef Java_Main_GLSL_STD_450_BAD
#define Java_Main_GLSL_STD_450_BAD 0L
#undef Java_Main_GLSL_STD_450_ROUND
#define Java_Main_GLSL_STD_450_ROUND 1L
#undef Java_Main_GLSL_STD_450_ROUND_EVEN
#define Java_Main_GLSL_STD_450_ROUND_EVEN 2L
#undef Java_Main_GLSL_STD_450_TRUNC
#define Java_Main_GLSL_STD_450_TRUNC 3L
#undef Java_Main_GLSL_STD_450_F_ABS
#define Java_Main_GLSL_STD_450_F_ABS 4L
#undef Java_Main_GLSL_STD_450_S_ABS
#define Java_Main_GLSL_STD_450_S_ABS 5L
#undef Java_Main_GLSL_STD_450_F_SIGN
#define Java_Main_GLSL_STD_450_F_SIGN 6L
#undef Java_Main_GLSL_STD_450_S_SIGN
#define Java_Main_GLSL_STD_450_S_SIGN 7L
#undef Java_Main_GLSL_STD_450_FLOOR
#define Java_Main_GLSL_STD_450_FLOOR 8L
#undef Java_Main_GLSL_STD_450_CEIL
#define Java_Main_GLSL_STD_450_CEIL 9L
#undef Java_Main_GLSL_STD_450_FRACT
#define Java_Main_GLSL_STD_450_FRACT 10L
#undef Java_Main_GLSL_STD_450_RADIANS
#define Java_Main_GLSL_STD_450_RADIANS 11L
#undef Java_Main_GLSL_STD_450_DEGREES
#define Java_Main_GLSL_STD_450_DEGREES 12L
#undef Java_Main_GLSL_STD_450_SIN
#define Java_Main_GLSL_STD_450_SIN 13L
#undef Java_Main_GLSL_STD_450_COS
#define Java_Main_GLSL_STD_450_COS 14L
#undef Java_Main_GLSL_STD_450_TAN
#define Java_Main_GLSL_STD_450_TAN 15L
#undef Java_Main_GLSL_STD_450_ASIN
#define Java_Main_GLSL_STD_450_ASIN 16L
#undef Java_Main_GLSL_STD_450_ACOS
#define Java_Main_GLSL_STD_450_ACOS 17L
#undef Java_Main_GLSL_STD_450_ATAN
#define Java_Main_GLSL_STD_450_ATAN 18L
#undef Java_Main_GLSL_STD_450_SINH
#define Java_Main_GLSL_STD_450_SINH 19L
#undef Java_Main_GLSL_STD_450_COSH
#define Java_Main_GLSL_STD_450_COSH 20L
#undef Java_Main_GLSL_STD_450_TANH
#define Java_Main_GLSL_STD_450_TANH 21L
#undef Java_Main_GLSL_STD_450_ASINH
#define Java_Main_GLSL_STD_450_ASINH 22L
#undef Java_Main_GLSL_STD_450_ACOSH
#define Java_Main_GLSL_STD_450_ACOSH 23L
#undef Java_Main_GLSL_STD_450_ATANH
#define Java_Main_GLSL_STD_450_ATANH 24L
#undef Java_Main_GLSL_STD_450_ATAN2
#define Java_Main_GLSL_STD_450_ATAN2 25L
#undef Java_Main_GLSL_STD_450_POW
#define Java_Main_GLSL_STD_450_POW 26L
#undef Java_Main_GLSL_STD_450_EXP
#define Java_Main_GLSL_STD_450_EXP 27L
#undef Java_Main_GLSL_STD_450_LOG
#define Java_Main_GLSL_STD_450_LOG 28L
#undef Java_Main_GLSL_STD_450_EXP2
#define Java_Main_GLSL_STD_450_EXP2 29L
#undef Java_Main_GLSL_STD_450_LOG2
#define Java_Main_GLSL_STD_450_LOG2 30L
#undef Java_Main_GLSL_STD_450_SQRT
#define Java_Main_GLSL_STD_450_SQRT 31L
#undef Java_Main_GLSL_STD_450_INVERSE_SQRT
#define Java_Main_GLSL_STD_450_INVERSE_SQRT 32L
#undef Java_Main_GLSL_STD_450_DETERMINANT
#define Java_Main_GLSL_STD_450_DETERMINANT 33L
#undef Java_Main_GLSL_STD_450_MATRIX_INVERSE
#define Java_Main_GLSL_STD_450_MATRIX_INVERSE 34L
#undef Java_Main_GLSL_STD_450_MODF
#define Java_Main_GLSL_STD_450_MODF 35L
#undef Java_Main_GLSL_STD_450_MODF_STRUCT
#define Java_Main_GLSL_STD_450_MODF_STRUCT 36L
#undef Java_Main_GLSL_STD_450_F_MIN
#define Java_Main_GLSL_STD_450_F_MIN 37L
#undef Java_Main_GLSL_STD_450_U_MIN
#define Java_Main_GLSL_STD_450_U_MIN 38L
#undef Java_Main_GLSL_STD_450_S_MIN
#define Java_Main_GLSL_STD_450_S_MIN 39L
#undef Java_Main_GLSL_STD_450_F_MAX
#define Java_Main_GLSL_STD_450_F_MAX 40L
#undef Java_Main_GLSL_STD_450_U_MAX
#define Java_Main_GLSL_STD_450_U_MAX 41L
#undef Java_Main_GLSL_STD_450_S_MAX
#define Java_Main_GLSL_STD_450_S_MAX 42L
#undef Java_Main_GLSL_STD_450_F_CLAMP
#define Java_Main_GLSL_STD_450_F_CLAMP 43L
#undef Java_Main_GLSL_STD_450_U_CLAMP
#define Java_Main_GLSL_STD_450_U_CLAMP 44L
#undef Java_Main_GLSL_STD_450_S_CLAMP
#define Java_Main_GLSL_STD_450_S_CLAMP 45L
#undef Java_Main_GLSL_STD_450_F_MIX
#define Java_Main_GLSL_STD_450_F_MIX 46L
#undef Java_Main_GLSL_STD_450_I_MIX
#define Java_Main_GLSL_STD_450_I_MIX 47L
#undef Java_Main_GLSL_STD_450_STEP
#define Java_Main_GLSL_STD_450_STEP 48L
#undef Java_Main_GLSL_STD_450_SMOOTH_STEP
#define Java_Main_GLSL_STD_450_SMOOTH_STEP 49L
#undef Java_Main_GLSL_STD_450_FMA
#define Java_Main_GLSL_STD_450_FMA 50L
#undef Java_Main_GLSL_STD_450_FREXP
#define Java_Main_GLSL_STD_450_FREXP 51L
#undef Java_Main_GLSL_STD_450_FREXP_STRUCT
#define Java_Main_GLSL_STD_450_FREXP_STRUCT 52L
#undef Java_Main_GLSL_STD_450_LDEXP
#define Java_Main_GLSL_STD_450_LDEXP 53L
#undef Java_Main_GLSL_STD_450_PACK_SNORM_4X8
#define Java_Main_GLSL_STD_450_PACK_SNORM_4X8 54L
#undef Java_Main_GLSL_STD_450_PACK_UNORM_4X8
#define Java_Main_GLSL_STD_450_PACK_UNORM_4X8 55L
#undef Java_Main_GLSL_STD_450_PACK_SNORM_2X16
#define Java_Main_GLSL_STD_450_PACK_SNORM_2X16 56L
#undef Java_Main_GLSL_STD_450_PACK_UNORM_2X16
#define Java_Main_GLSL_STD_450_PACK_UNORM_2X16 57L
#undef Java_Main_GLSL_STD_450_PACK_HALF_2X16
#define Java_Main_GLSL_STD_450_PACK_HALF_2X16 58L
#undef Java_Main_GLSL_STD_450_PACK_DOUBLE_2X32
#define Java_Main_GLSL_STD_450_PACK_DOUBLE_2X32 59L
#undef Java_Main_GLSL_STD_450_UNPACK_SNORM_2X16
#define Java_Main_GLSL_STD_450_UNPACK_SNORM_2X16 60L
#undef Java_Main_GLSL_STD_450_UNPACK_UNORM_2X16
#define Java_Main_GLSL_STD_450_UNPACK_UNORM_2X16 61L
#undef Java_Main_GLSL_STD_450_UNPACK_HALF_2X16
#define Java_Main_GLSL_STD_450_UNPACK_HALF_2X16 62L
#undef Java_Main_GLSL_STD_450_UNPACK_SNORM_4X8
#define Java_Main_GLSL_STD_450_UNPACK_SNORM_4X8 63L
#undef Java_Main_GLSL_STD_450_UNPACK_UNORM_4X8
#define Java_Main_GLSL_STD_450_UNPACK_UNORM_4X8 64L
#undef Java_Main_GLSL_STD_450_UNPACK_DOUBLE_2X32
#define Java_Main_GLSL_STD_450_UNPACK_DOUBLE_2X32 65L
#undef Java_Main_GLSL_STD_450_LENGTH
#define Java_Main_GLSL_STD_450_LENGTH 66L
#undef Java_Main_GLSL_STD_450_DISTANCE
#define Java_Main_GLSL_STD_450_DISTANCE 67L
#undef Java_Main_GLSL_STD_450_CROSS
#define Java_Main_GLSL_STD_450_CROSS 68L
#undef Java_Main_GLSL_STD_450_NORMALIZE
#define Java_Main_GLSL_STD_450_NORMALIZE 69L
#undef Java_Main_GLSL_STD_450_FACE_FORWARD
#define Java_Main_GLSL_STD_450_FACE_FORWARD 70L
#undef Java_Main_GLSL_STD_450_REFLECT
#define Java_Main_GLSL_STD_450_REFLECT 71L
#undef Java_Main_GLSL_STD_450_REFRACT
#define Java_Main_GLSL_STD_450_REFRACT 72L
#undef Java_Main_GLSL_STD_450_FIND_I_LSB
#define Java_Main_GLSL_STD_450_FIND_I_LSB 73L
#undef Java_Main_GLSL_STD_450_FIND_S_MSB
#define Java_Main_GLSL_STD_450_FIND_S_MSB 74L
#undef Java_Main_GLSL_STD_450_FIND_U_MSB
#define Java_Main_GLSL_STD_450_FIND_U_MSB 75L
#undef Java_Main_GLSL_STD_450_INTERPOLATE_AT_CENTROID
#define Java_Main_GLSL_STD_450_INTERPOLATE_AT_CENTROID 76L
#undef Java_Main_GLSL_STD_450_INTERPOLATE_AT_SAMPLE
#define Java_Main_GLSL_STD_450_INTERPOLATE_AT_SAMPLE 77L
#undef Java_Main_GLSL_STD_450_INTERPOLATE_AT_OFFSET
#define Java_Main_GLSL_STD_450_INTERPOLATE_AT_OFFSET 78L
#undef Java_Main_GLSL_STD_450_N_MIN
#define Java_Main_GLSL_STD_450_N_MIN 79L
#undef Java_Main_GLSL_STD_450_N_MAX
#define Java_Main_GLSL_STD_450_N_MAX 80L
#undef Java_Main_GLSL_STD_450_N_CLAMP
#define Java_Main_GLSL_STD_450_N_CLAMP 81L
#undef Java_Main_KROUND_TO_ZERO
#define Java_Main_KROUND_TO_ZERO 0L
#undef Java_Main_KROUND_TO_NEAREST_EVEN
#define Java_Main_KROUND_TO_NEAREST_EVEN 1L
#undef Java_Main_KROUND_TO_POSITIVE_INFINITY
#define Java_Main_KROUND_TO_POSITIVE_INFINITY 2L
#undef Java_Main_KROUND_TO_NEGATIVE_INFINITY
#define Java_Main_KROUND_TO_NEGATIVE_INFINITY 3L
#undef Java_Main_SOURCE_LANGUAGE_UNKNOWN
#define Java_Main_SOURCE_LANGUAGE_UNKNOWN 0L
#undef Java_Main_SOURCE_LANGUAGE_ESSL
#define Java_Main_SOURCE_LANGUAGE_ESSL 1L
#undef Java_Main_SOURCE_LANGUAGE_GLSL
#define Java_Main_SOURCE_LANGUAGE_GLSL 2L
#undef Java_Main_SOURCE_LANGUAGE_OPEN_CL_C
#define Java_Main_SOURCE_LANGUAGE_OPEN_CL_C 3L
#undef Java_Main_SOURCE_LANGUAGE_OPEN_CL_CPP
#define Java_Main_SOURCE_LANGUAGE_OPEN_CL_CPP 4L
#undef Java_Main_SOURCE_LANGUAGE_HLSL
#define Java_Main_SOURCE_LANGUAGE_HLSL 5L
#undef Java_Main_SOURCE_LANGUAGE_MAX
#define Java_Main_SOURCE_LANGUAGE_MAX 2147483647L
#undef Java_Main_EXECUTION_MODEL_VERTEX
#define Java_Main_EXECUTION_MODEL_VERTEX 0L
#undef Java_Main_EXECUTION_MODEL_TESSELLATION_CONTROL
#define Java_Main_EXECUTION_MODEL_TESSELLATION_CONTROL 1L
#undef Java_Main_EXECUTION_MODEL_TESSELLATION_EVALUATION
#define Java_Main_EXECUTION_MODEL_TESSELLATION_EVALUATION 2L
#undef Java_Main_EXECUTION_MODEL_GEOMETRY
#define Java_Main_EXECUTION_MODEL_GEOMETRY 3L
#undef Java_Main_EXECUTION_MODEL_FRAGMENT
#define Java_Main_EXECUTION_MODEL_FRAGMENT 4L
#undef Java_Main_EXECUTION_MODEL_GLCOMPUTE
#define Java_Main_EXECUTION_MODEL_GLCOMPUTE 5L
#undef Java_Main_EXECUTION_MODEL_KERNEL
#define Java_Main_EXECUTION_MODEL_KERNEL 6L
#undef Java_Main_EXECUTION_MODEL_TASKNV
#define Java_Main_EXECUTION_MODEL_TASKNV 5267L
#undef Java_Main_EXECUTION_MODEL_MESHNV
#define Java_Main_EXECUTION_MODEL_MESHNV 5268L
#undef Java_Main_EXECUTION_MODEL_RAYGENERATION_KHR
#define Java_Main_EXECUTION_MODEL_RAYGENERATION_KHR 5313L
#undef Java_Main_EXECUTION_MODEL_RAYGENERATION_NV
#define Java_Main_EXECUTION_MODEL_RAYGENERATION_NV 5313L
#undef Java_Main_EXECUTION_MODEL_INTERSECTION_KHR
#define Java_Main_EXECUTION_MODEL_INTERSECTION_KHR 5314L
#undef Java_Main_EXECUTION_MODEL_INTERSECTION_NV
#define Java_Main_EXECUTION_MODEL_INTERSECTION_NV 5314L
#undef Java_Main_EXECUTION_MODEL_ANY_HIT_KHR
#define Java_Main_EXECUTION_MODEL_ANY_HIT_KHR 5315L
#undef Java_Main_EXECUTION_MODEL_ANY_HIT_NV
#define Java_Main_EXECUTION_MODEL_ANY_HIT_NV 5315L
#undef Java_Main_EXECUTION_MODEL_CLOSEST_HIT_KHR
#define Java_Main_EXECUTION_MODEL_CLOSEST_HIT_KHR 5316L
#undef Java_Main_EXECUTION_MODEL_CLOSEST_HIT_NV
#define Java_Main_EXECUTION_MODEL_CLOSEST_HIT_NV 5316L
#undef Java_Main_EXECUTION_MODEL_MISS_KHR
#define Java_Main_EXECUTION_MODEL_MISS_KHR 5317L
#undef Java_Main_EXECUTION_MODEL_MISS_NV
#define Java_Main_EXECUTION_MODEL_MISS_NV 5317L
#undef Java_Main_EXECUTION_MODEL_CALLABLE_KHR
#define Java_Main_EXECUTION_MODEL_CALLABLE_KHR 5318L
#undef Java_Main_EXECUTION_MODEL_CALLABLE_NV
#define Java_Main_EXECUTION_MODEL_CALLABLE_NV 5318L
#undef Java_Main_EXECUTION_MODEL_MAX
#define Java_Main_EXECUTION_MODEL_MAX 2147483647L
#undef Java_Main_ADDRESSING_MODEL_LOGICAL
#define Java_Main_ADDRESSING_MODEL_LOGICAL 0L
#undef Java_Main_ADDRESSING_MODEL_PHYSICAL_32
#define Java_Main_ADDRESSING_MODEL_PHYSICAL_32 1L
#undef Java_Main_ADDRESSING_MODEL_PHYSICAL_64
#define Java_Main_ADDRESSING_MODEL_PHYSICAL_64 2L
#undef Java_Main_ADDRESSING_MODEL_PHYSICAL_STORAGE_BUFFER_64
#define Java_Main_ADDRESSING_MODEL_PHYSICAL_STORAGE_BUFFER_64 5348L
#undef Java_Main_ADDRESSING_MODEL_PHYSICAL_STORAGE_BUFFER_64_EXT
#define Java_Main_ADDRESSING_MODEL_PHYSICAL_STORAGE_BUFFER_64_EXT 5348L
#undef Java_Main_ADDRESSING_MODEL_MAX
#define Java_Main_ADDRESSING_MODEL_MAX 2147483647L
#undef Java_Main_MEMORY_MODEL_SIMPLE
#define Java_Main_MEMORY_MODEL_SIMPLE 0L
#undef Java_Main_MEMORY_MODEL_GLSL_450
#define Java_Main_MEMORY_MODEL_GLSL_450 1L
#undef Java_Main_MEMORY_MODEL_OPEN_CL
#define Java_Main_MEMORY_MODEL_OPEN_CL 2L
#undef Java_Main_MEMORY_MODEL_VULKAN
#define Java_Main_MEMORY_MODEL_VULKAN 3L
#undef Java_Main_MEMORY_MODEL_VULKAN_KHR
#define Java_Main_MEMORY_MODEL_VULKAN_KHR 3L
#undef Java_Main_MEMORY_MODEL_MAX
#define Java_Main_MEMORY_MODEL_MAX 2147483647L
#undef Java_Main_EXECUTION_MODE_INVOCATIONS
#define Java_Main_EXECUTION_MODE_INVOCATIONS 0L
#undef Java_Main_EXECUTION_MODE_SPACING_EQUAL
#define Java_Main_EXECUTION_MODE_SPACING_EQUAL 1L
#undef Java_Main_EXECUTION_MODE_SPACING_FRACTIONAL_EVEN
#define Java_Main_EXECUTION_MODE_SPACING_FRACTIONAL_EVEN 2L
#undef Java_Main_EXECUTION_MODE_SPACING_FRACTIONAL_ODD
#define Java_Main_EXECUTION_MODE_SPACING_FRACTIONAL_ODD 3L
#undef Java_Main_EXECUTION_MODE_VERTEX_ORDER_CW
#define Java_Main_EXECUTION_MODE_VERTEX_ORDER_CW 4L
#undef Java_Main_EXECUTION_MODE_VERTEX_ORDER_CCW
#define Java_Main_EXECUTION_MODE_VERTEX_ORDER_CCW 5L
#undef Java_Main_EXECUTION_MODE_PIXEL_CENTER_INTEGER
#define Java_Main_EXECUTION_MODE_PIXEL_CENTER_INTEGER 6L
#undef Java_Main_EXECUTION_MODE_ORIGIN_UPPER_LEFT
#define Java_Main_EXECUTION_MODE_ORIGIN_UPPER_LEFT 7L
#undef Java_Main_EXECUTION_MODE_ORIGIN_LOWER_LEFT
#define Java_Main_EXECUTION_MODE_ORIGIN_LOWER_LEFT 8L
#undef Java_Main_EXECUTION_MODE_EARLY_FRAGMENT_TESTS
#define Java_Main_EXECUTION_MODE_EARLY_FRAGMENT_TESTS 9L
#undef Java_Main_EXECUTION_MODE_POINT_MODE
#define Java_Main_EXECUTION_MODE_POINT_MODE 10L
#undef Java_Main_EXECUTION_MODE_XFB
#define Java_Main_EXECUTION_MODE_XFB 11L
#undef Java_Main_EXECUTION_MODE_DEPTH_REPLACING
#define Java_Main_EXECUTION_MODE_DEPTH_REPLACING 12L
#undef Java_Main_EXECUTION_MODE_DEPTH_GREATER
#define Java_Main_EXECUTION_MODE_DEPTH_GREATER 14L
#undef Java_Main_EXECUTION_MODE_DEPTH_LESS
#define Java_Main_EXECUTION_MODE_DEPTH_LESS 15L
#undef Java_Main_EXECUTION_MODE_DEPTH_UNCHANGED
#define Java_Main_EXECUTION_MODE_DEPTH_UNCHANGED 16L
#undef Java_Main_EXECUTION_MODE_LOCAL_SIZE
#define Java_Main_EXECUTION_MODE_LOCAL_SIZE 17L
#undef Java_Main_EXECUTION_MODE_LOCAL_SIZE_HINT
#define Java_Main_EXECUTION_MODE_LOCAL_SIZE_HINT 18L
#undef Java_Main_EXECUTION_MODE_INPUT_POINTS
#define Java_Main_EXECUTION_MODE_INPUT_POINTS 19L
#undef Java_Main_EXECUTION_MODE_INPUT_LINES
#define Java_Main_EXECUTION_MODE_INPUT_LINES 20L
#undef Java_Main_EXECUTION_MODE_INPUT_LINES_ADJACENCY
#define Java_Main_EXECUTION_MODE_INPUT_LINES_ADJACENCY 21L
#undef Java_Main_EXECUTION_MODE_TRIANGLES
#define Java_Main_EXECUTION_MODE_TRIANGLES 22L
#undef Java_Main_EXECUTION_MODE_INPUT_TRIANGLES_ADJACENCY
#define Java_Main_EXECUTION_MODE_INPUT_TRIANGLES_ADJACENCY 23L
#undef Java_Main_EXECUTION_MODE_QUADS
#define Java_Main_EXECUTION_MODE_QUADS 24L
#undef Java_Main_EXECUTION_MODE_ISOLINES
#define Java_Main_EXECUTION_MODE_ISOLINES 25L
#undef Java_Main_EXECUTION_MODE_OUTPUT_VERTICES
#define Java_Main_EXECUTION_MODE_OUTPUT_VERTICES 26L
#undef Java_Main_EXECUTION_MODE_OUTPUT_POINTS
#define Java_Main_EXECUTION_MODE_OUTPUT_POINTS 27L
#undef Java_Main_EXECUTION_MODE_OUTPUT_LINE_STRIP
#define Java_Main_EXECUTION_MODE_OUTPUT_LINE_STRIP 28L
#undef Java_Main_EXECUTION_MODE_OUTPUT_TRIANGLE_STRIP
#define Java_Main_EXECUTION_MODE_OUTPUT_TRIANGLE_STRIP 29L
#undef Java_Main_EXECUTION_MODE_VEC_TYPE_HINT
#define Java_Main_EXECUTION_MODE_VEC_TYPE_HINT 30L
#undef Java_Main_EXECUTION_MODE_CONTRACTION_OFF
#define Java_Main_EXECUTION_MODE_CONTRACTION_OFF 31L
#undef Java_Main_EXECUTION_MODE_INITIALIZER
#define Java_Main_EXECUTION_MODE_INITIALIZER 33L
#undef Java_Main_EXECUTION_MODE_FINALIZER
#define Java_Main_EXECUTION_MODE_FINALIZER 34L
#undef Java_Main_EXECUTION_MODE_SUBGROUP_SIZE
#define Java_Main_EXECUTION_MODE_SUBGROUP_SIZE 35L
#undef Java_Main_EXECUTION_MODE_SUBGROUPS_PER_WORKGROUP
#define Java_Main_EXECUTION_MODE_SUBGROUPS_PER_WORKGROUP 36L
#undef Java_Main_EXECUTION_MODE_SUBGROUPS_PER_WORKGROUP_ID
#define Java_Main_EXECUTION_MODE_SUBGROUPS_PER_WORKGROUP_ID 37L
#undef Java_Main_EXECUTION_MODE_LOCAL_SIZE_ID
#define Java_Main_EXECUTION_MODE_LOCAL_SIZE_ID 38L
#undef Java_Main_EXECUTION_MODE_LOCAL_SIZE_HINT_ID
#define Java_Main_EXECUTION_MODE_LOCAL_SIZE_HINT_ID 39L
#undef Java_Main_EXECUTION_MODE_POST_DEPTH_COVERAGE
#define Java_Main_EXECUTION_MODE_POST_DEPTH_COVERAGE 4446L
#undef Java_Main_EXECUTION_MODE_DENORM_PRESERVE
#define Java_Main_EXECUTION_MODE_DENORM_PRESERVE 4459L
#undef Java_Main_EXECUTION_MODE_DENORM_FLUSH_TO_ZERO
#define Java_Main_EXECUTION_MODE_DENORM_FLUSH_TO_ZERO 4460L
#undef Java_Main_EXECUTION_MODE_SIGNED_ZERO_INF_NAN_PRESERVE
#define Java_Main_EXECUTION_MODE_SIGNED_ZERO_INF_NAN_PRESERVE 4461L
#undef Java_Main_EXECUTION_MODE_ROUNDING_MODE_RTE
#define Java_Main_EXECUTION_MODE_ROUNDING_MODE_RTE 4462L
#undef Java_Main_EXECUTION_MODE_ROUNDING_MODE_RTZ
#define Java_Main_EXECUTION_MODE_ROUNDING_MODE_RTZ 4463L
#undef Java_Main_EXECUTION_MODE_STENCIL_REF_REPLACING_EXT
#define Java_Main_EXECUTION_MODE_STENCIL_REF_REPLACING_EXT 5027L
#undef Java_Main_EXECUTION_MODE_OUTPUT_LINES_NV
#define Java_Main_EXECUTION_MODE_OUTPUT_LINES_NV 5269L
#undef Java_Main_EXECUTION_MODE_OUTPUT_PRIMITIVES_NV
#define Java_Main_EXECUTION_MODE_OUTPUT_PRIMITIVES_NV 5270L
#undef Java_Main_EXECUTION_MODE_DERIVATIVE_GROUP_QUADS_NV
#define Java_Main_EXECUTION_MODE_DERIVATIVE_GROUP_QUADS_NV 5289L
#undef Java_Main_EXECUTION_MODE_DERIVATIVE_GROUP_LINEAR_NV
#define Java_Main_EXECUTION_MODE_DERIVATIVE_GROUP_LINEAR_NV 5290L
#undef Java_Main_EXECUTION_MODE_OUTPUT_TRIANGLES_NV
#define Java_Main_EXECUTION_MODE_OUTPUT_TRIANGLES_NV 5298L
#undef Java_Main_EXECUTION_MODE_PIXEL_INTERLOCK_ORDERED_EXT
#define Java_Main_EXECUTION_MODE_PIXEL_INTERLOCK_ORDERED_EXT 5366L
#undef Java_Main_EXECUTION_MODE_PIXEL_INTERLOCK_UNORDERED_EXT
#define Java_Main_EXECUTION_MODE_PIXEL_INTERLOCK_UNORDERED_EXT 5367L
#undef Java_Main_EXECUTION_MODE_SAMPLE_INTERLOCK_ORDERED_EXT
#define Java_Main_EXECUTION_MODE_SAMPLE_INTERLOCK_ORDERED_EXT 5368L
#undef Java_Main_EXECUTION_MODE_SAMPLE_INTERLOCK_UNORDERED_EXT
#define Java_Main_EXECUTION_MODE_SAMPLE_INTERLOCK_UNORDERED_EXT 5369L
#undef Java_Main_EXECUTION_MODE_SHADING_RATE_INTERLOCK_ORDERED_EXT
#define Java_Main_EXECUTION_MODE_SHADING_RATE_INTERLOCK_ORDERED_EXT 5370L
#undef Java_Main_EXECUTION_MODE_SHADING_RATE_INTERLOCK_UNORDERED_EXT
#define Java_Main_EXECUTION_MODE_SHADING_RATE_INTERLOCK_UNORDERED_EXT 5371L
#undef Java_Main_EXECUTION_MODE_MAX_WORKGROUP_SIZE_INTEL
#define Java_Main_EXECUTION_MODE_MAX_WORKGROUP_SIZE_INTEL 5893L
#undef Java_Main_EXECUTION_MODE_MAX_WORK_DIM_INTEL
#define Java_Main_EXECUTION_MODE_MAX_WORK_DIM_INTEL 5894L
#undef Java_Main_EXECUTION_MODE_NO_GLOBAL_OFFSET_INTEL
#define Java_Main_EXECUTION_MODE_NO_GLOBAL_OFFSET_INTEL 5895L
#undef Java_Main_EXECUTION_MODE_NUM_SIMD_WORKITEMS_INTEL
#define Java_Main_EXECUTION_MODE_NUM_SIMD_WORKITEMS_INTEL 5896L
#undef Java_Main_EXECUTION_MODE_MAX
#define Java_Main_EXECUTION_MODE_MAX 2147483647L
#undef Java_Main_STORAGE_CLASS_UNIFORM_CONSTANT
#define Java_Main_STORAGE_CLASS_UNIFORM_CONSTANT 0L
#undef Java_Main_STORAGE_CLASS_INPUT
#define Java_Main_STORAGE_CLASS_INPUT 1L
#undef Java_Main_STORAGE_CLASS_UNIFORM
#define Java_Main_STORAGE_CLASS_UNIFORM 2L
#undef Java_Main_STORAGE_CLASS_OUTPUT
#define Java_Main_STORAGE_CLASS_OUTPUT 3L
#undef Java_Main_STORAGE_CLASS_WORKGROUP
#define Java_Main_STORAGE_CLASS_WORKGROUP 4L
#undef Java_Main_STORAGE_CLASS_CROSS_WORKGROUP
#define Java_Main_STORAGE_CLASS_CROSS_WORKGROUP 5L
#undef Java_Main_STORAGE_CLASS_PRIVATE
#define Java_Main_STORAGE_CLASS_PRIVATE 6L
#undef Java_Main_STORAGE_CLASS_FUNCTION
#define Java_Main_STORAGE_CLASS_FUNCTION 7L
#undef Java_Main_STORAGE_CLASS_GENERIC
#define Java_Main_STORAGE_CLASS_GENERIC 8L
#undef Java_Main_STORAGE_CLASS_PUSH_CONSTANT
#define Java_Main_STORAGE_CLASS_PUSH_CONSTANT 9L
#undef Java_Main_STORAGE_CLASS_ATOMIC_COUNTER
#define Java_Main_STORAGE_CLASS_ATOMIC_COUNTER 10L
#undef Java_Main_STORAGE_CLASS_IMAGE
#define Java_Main_STORAGE_CLASS_IMAGE 11L
#undef Java_Main_STORAGE_CLASS_STORAGE_BUFFER
#define Java_Main_STORAGE_CLASS_STORAGE_BUFFER 12L
#undef Java_Main_STORAGE_CLASS_CALLABLE_DATA_KHR
#define Java_Main_STORAGE_CLASS_CALLABLE_DATA_KHR 5328L
#undef Java_Main_STORAGE_CLASS_CALLABLE_DATA_NV
#define Java_Main_STORAGE_CLASS_CALLABLE_DATA_NV 5328L
#undef Java_Main_STORAGE_CLASS_INCOMING_CALLABLE_DATA_KHR
#define Java_Main_STORAGE_CLASS_INCOMING_CALLABLE_DATA_KHR 5329L
#undef Java_Main_STORAGE_CLASS_INCOMING_CALLABLE_DATA_NV
#define Java_Main_STORAGE_CLASS_INCOMING_CALLABLE_DATA_NV 5329L
#undef Java_Main_STORAGE_CLASS_RAY_PAYLOAD_KHR
#define Java_Main_STORAGE_CLASS_RAY_PAYLOAD_KHR 5338L
#undef Java_Main_STORAGE_CLASS_RAY_PAYLOAD_NV
#define Java_Main_STORAGE_CLASS_RAY_PAYLOAD_NV 5338L
#undef Java_Main_STORAGE_CLASS_HIT_ATTRIBUTE_KHR
#define Java_Main_STORAGE_CLASS_HIT_ATTRIBUTE_KHR 5339L
#undef Java_Main_STORAGE_CLASS_HIT_ATTRIBUTE_NV
#define Java_Main_STORAGE_CLASS_HIT_ATTRIBUTE_NV 5339L
#undef Java_Main_STORAGE_CLASS_INCOMING_RAY_PAYLOAD_KHR
#define Java_Main_STORAGE_CLASS_INCOMING_RAY_PAYLOAD_KHR 5342L
#undef Java_Main_STORAGE_CLASS_INCOMING_RAY_PAYLOAD_NV
#define Java_Main_STORAGE_CLASS_INCOMING_RAY_PAYLOAD_NV 5342L
#undef Java_Main_STORAGE_CLASS_SHADER_RECORD_BUFFER_KHR
#define Java_Main_STORAGE_CLASS_SHADER_RECORD_BUFFER_KHR 5343L
#undef Java_Main_STORAGE_CLASS_SHADER_RECORD_BUFFER_NV
#define Java_Main_STORAGE_CLASS_SHADER_RECORD_BUFFER_NV 5343L
#undef Java_Main_STORAGE_CLASS_PHYSICAL_STORAGE_BUFFER
#define Java_Main_STORAGE_CLASS_PHYSICAL_STORAGE_BUFFER 5349L
#undef Java_Main_STORAGE_CLASS_PHYSICAL_STORAGE_BUFFER_EXT
#define Java_Main_STORAGE_CLASS_PHYSICAL_STORAGE_BUFFER_EXT 5349L
#undef Java_Main_STORAGE_CLASS_CODE_SECTION_INTEL
#define Java_Main_STORAGE_CLASS_CODE_SECTION_INTEL 5605L
#undef Java_Main_STORAGE_CLASS_MAX
#define Java_Main_STORAGE_CLASS_MAX 2147483647L
#undef Java_Main_DIM_1D
#define Java_Main_DIM_1D 0L
#undef Java_Main_DIM_2D
#define Java_Main_DIM_2D 1L
#undef Java_Main_DIM_3D
#define Java_Main_DIM_3D 2L
#undef Java_Main_DIM_CUBE
#define Java_Main_DIM_CUBE 3L
#undef Java_Main_DIM_RECT
#define Java_Main_DIM_RECT 4L
#undef Java_Main_DIM_BUFFER
#define Java_Main_DIM_BUFFER 5L
#undef Java_Main_DIM_SUBPASS_DATA
#define Java_Main_DIM_SUBPASS_DATA 6L
#undef Java_Main_DIM_MAX
#define Java_Main_DIM_MAX 2147483647L
#undef Java_Main_SAMPLER_ADDRESSING_MODE_NONE
#define Java_Main_SAMPLER_ADDRESSING_MODE_NONE 0L
#undef Java_Main_SAMPLER_ADDRESSING_MODE_CLAMP_TO_EDGE
#define Java_Main_SAMPLER_ADDRESSING_MODE_CLAMP_TO_EDGE 1L
#undef Java_Main_SAMPLER_ADDRESSING_MODE_CLAMP
#define Java_Main_SAMPLER_ADDRESSING_MODE_CLAMP 2L
#undef Java_Main_SAMPLER_ADDRESSING_MODE_REPEAT
#define Java_Main_SAMPLER_ADDRESSING_MODE_REPEAT 3L
#undef Java_Main_SAMPLER_ADDRESSING_MODE_REPEAT_MIRRORED
#define Java_Main_SAMPLER_ADDRESSING_MODE_REPEAT_MIRRORED 4L
#undef Java_Main_SAMPLER_ADDRESSING_MODE_MAX
#define Java_Main_SAMPLER_ADDRESSING_MODE_MAX 2147483647L
#undef Java_Main_SAMPLER_FILTER_MODE_NEAREST
#define Java_Main_SAMPLER_FILTER_MODE_NEAREST 0L
#undef Java_Main_SAMPLER_FILTER_MODE_LINEAR
#define Java_Main_SAMPLER_FILTER_MODE_LINEAR 1L
#undef Java_Main_SAMPLER_FILTER_MODE_MAX
#define Java_Main_SAMPLER_FILTER_MODE_MAX 2147483647L
#undef Java_Main_IMAGE_FORMAT_UNKNOWN
#define Java_Main_IMAGE_FORMAT_UNKNOWN 0L
#undef Java_Main_IMAGE_FORMAT_RGBA32F
#define Java_Main_IMAGE_FORMAT_RGBA32F 1L
#undef Java_Main_IMAGE_FORMAT_RGBA16F
#define Java_Main_IMAGE_FORMAT_RGBA16F 2L
#undef Java_Main_IMAGE_FORMAT_R32F
#define Java_Main_IMAGE_FORMAT_R32F 3L
#undef Java_Main_IMAGE_FORMAT_RGBA8
#define Java_Main_IMAGE_FORMAT_RGBA8 4L
#undef Java_Main_IMAGE_FORMAT_RGBA8_SNORM
#define Java_Main_IMAGE_FORMAT_RGBA8_SNORM 5L
#undef Java_Main_IMAGE_FORMAT_RG32F
#define Java_Main_IMAGE_FORMAT_RG32F 6L
#undef Java_Main_IMAGE_FORMAT_RG16F
#define Java_Main_IMAGE_FORMAT_RG16F 7L
#undef Java_Main_IMAGE_FORMAT_R11FG11FB10F
#define Java_Main_IMAGE_FORMAT_R11FG11FB10F 8L
#undef Java_Main_IMAGE_FORMAT_R16F
#define Java_Main_IMAGE_FORMAT_R16F 9L
#undef Java_Main_IMAGE_FORMAT_RGBA16
#define Java_Main_IMAGE_FORMAT_RGBA16 10L
#undef Java_Main_IMAGE_FORMAT_RGB10A2
#define Java_Main_IMAGE_FORMAT_RGB10A2 11L
#undef Java_Main_IMAGE_FORMAT_RG16
#define Java_Main_IMAGE_FORMAT_RG16 12L
#undef Java_Main_IMAGE_FORMAT_RG8
#define Java_Main_IMAGE_FORMAT_RG8 13L
#undef Java_Main_IMAGE_FORMAT_R16
#define Java_Main_IMAGE_FORMAT_R16 14L
#undef Java_Main_IMAGE_FORMAT_R8
#define Java_Main_IMAGE_FORMAT_R8 15L
#undef Java_Main_IMAGE_FORMAT_RGBA16_SNORM
#define Java_Main_IMAGE_FORMAT_RGBA16_SNORM 16L
#undef Java_Main_IMAGE_FORMAT_RG16_SNORM
#define Java_Main_IMAGE_FORMAT_RG16_SNORM 17L
#undef Java_Main_IMAGE_FORMAT_RG8_SNORM
#define Java_Main_IMAGE_FORMAT_RG8_SNORM 18L
#undef Java_Main_IMAGE_FORMAT_R16_SNORM
#define Java_Main_IMAGE_FORMAT_R16_SNORM 19L
#undef Java_Main_IMAGE_FORMAT_R8_SNORM
#define Java_Main_IMAGE_FORMAT_R8_SNORM 20L
#undef Java_Main_IMAGE_FORMAT_RGBA32I
#define Java_Main_IMAGE_FORMAT_RGBA32I 21L
#undef Java_Main_IMAGE_FORMAT_RGBA16I
#define Java_Main_IMAGE_FORMAT_RGBA16I 22L
#undef Java_Main_IMAGE_FORMAT_RGBA8I
#define Java_Main_IMAGE_FORMAT_RGBA8I 23L
#undef Java_Main_IMAGE_FORMAT_R32I
#define Java_Main_IMAGE_FORMAT_R32I 24L
#undef Java_Main_IMAGE_FORMAT_RG32I
#define Java_Main_IMAGE_FORMAT_RG32I 25L
#undef Java_Main_IMAGE_FORMAT_RG16I
#define Java_Main_IMAGE_FORMAT_RG16I 26L
#undef Java_Main_IMAGE_FORMAT_RG8I
#define Java_Main_IMAGE_FORMAT_RG8I 27L
#undef Java_Main_IMAGE_FORMAT_R16I
#define Java_Main_IMAGE_FORMAT_R16I 28L
#undef Java_Main_IMAGE_FORMAT_R8I
#define Java_Main_IMAGE_FORMAT_R8I 29L
#undef Java_Main_IMAGE_FORMAT_RGBA32UI
#define Java_Main_IMAGE_FORMAT_RGBA32UI 30L
#undef Java_Main_IMAGE_FORMAT_RGBA16UI
#define Java_Main_IMAGE_FORMAT_RGBA16UI 31L
#undef Java_Main_IMAGE_FORMAT_RGBA8UI
#define Java_Main_IMAGE_FORMAT_RGBA8UI 32L
#undef Java_Main_IMAGE_FORMAT_R32UI
#define Java_Main_IMAGE_FORMAT_R32UI 33L
#undef Java_Main_IMAGE_FORMAT_RGB10A2UI
#define Java_Main_IMAGE_FORMAT_RGB10A2UI 34L
#undef Java_Main_IMAGE_FORMAT_RG32UI
#define Java_Main_IMAGE_FORMAT_RG32UI 35L
#undef Java_Main_IMAGE_FORMAT_RG16UI
#define Java_Main_IMAGE_FORMAT_RG16UI 36L
#undef Java_Main_IMAGE_FORMAT_RG8UI
#define Java_Main_IMAGE_FORMAT_RG8UI 37L
#undef Java_Main_IMAGE_FORMAT_R16UI
#define Java_Main_IMAGE_FORMAT_R16UI 38L
#undef Java_Main_IMAGE_FORMAT_R8UI
#define Java_Main_IMAGE_FORMAT_R8UI 39L
#undef Java_Main_IMAGE_FORMAT_MAX
#define Java_Main_IMAGE_FORMAT_MAX 2147483647L
#undef Java_Main_IMAGE_CHANNEL_ORDER_R
#define Java_Main_IMAGE_CHANNEL_ORDER_R 0L
#undef Java_Main_IMAGE_CHANNEL_ORDER_A
#define Java_Main_IMAGE_CHANNEL_ORDER_A 1L
#undef Java_Main_IMAGE_CHANNEL_ORDER_RG
#define Java_Main_IMAGE_CHANNEL_ORDER_RG 2L
#undef Java_Main_IMAGE_CHANNEL_ORDER_RA
#define Java_Main_IMAGE_CHANNEL_ORDER_RA 3L
#undef Java_Main_IMAGE_CHANNEL_ORDER_RGB
#define Java_Main_IMAGE_CHANNEL_ORDER_RGB 4L
#undef Java_Main_IMAGE_CHANNEL_ORDER_RGBA
#define Java_Main_IMAGE_CHANNEL_ORDER_RGBA 5L
#undef Java_Main_IMAGE_CHANNEL_ORDER_BGRA
#define Java_Main_IMAGE_CHANNEL_ORDER_BGRA 6L
#undef Java_Main_IMAGE_CHANNEL_ORDER_ARGB
#define Java_Main_IMAGE_CHANNEL_ORDER_ARGB 7L
#undef Java_Main_IMAGE_CHANNEL_ORDER_INTENSITY
#define Java_Main_IMAGE_CHANNEL_ORDER_INTENSITY 8L
#undef Java_Main_IMAGE_CHANNEL_ORDER_LUMINANCE
#define Java_Main_IMAGE_CHANNEL_ORDER_LUMINANCE 9L
#undef Java_Main_IMAGE_CHANNEL_ORDER_RX
#define Java_Main_IMAGE_CHANNEL_ORDER_RX 10L
#undef Java_Main_IMAGE_CHANNEL_ORDER_RGX
#define Java_Main_IMAGE_CHANNEL_ORDER_RGX 11L
#undef Java_Main_IMAGE_CHANNEL_ORDER_RGBX
#define Java_Main_IMAGE_CHANNEL_ORDER_RGBX 12L
#undef Java_Main_IMAGE_CHANNEL_ORDER_DEPTH
#define Java_Main_IMAGE_CHANNEL_ORDER_DEPTH 13L
#undef Java_Main_IMAGE_CHANNEL_ORDER_DEPTH_STENCIL
#define Java_Main_IMAGE_CHANNEL_ORDER_DEPTH_STENCIL 14L
#undef Java_Main_IMAGE_CHANNEL_ORDER_SRGB
#define Java_Main_IMAGE_CHANNEL_ORDER_SRGB 15L
#undef Java_Main_IMAGE_CHANNEL_ORDER_SRGBX
#define Java_Main_IMAGE_CHANNEL_ORDER_SRGBX 16L
#undef Java_Main_IMAGE_CHANNEL_ORDER_SRGBA
#define Java_Main_IMAGE_CHANNEL_ORDER_SRGBA 17L
#undef Java_Main_IMAGE_CHANNEL_ORDER_SBGRA
#define Java_Main_IMAGE_CHANNEL_ORDER_SBGRA 18L
#undef Java_Main_IMAGE_CHANNEL_ORDER_ABGR
#define Java_Main_IMAGE_CHANNEL_ORDER_ABGR 19L
#undef Java_Main_IMAGE_CHANNEL_ORDER_MAX
#define Java_Main_IMAGE_CHANNEL_ORDER_MAX 2147483647L
#undef Java_Main_IMAGE_CHANNEL_DATA_TYPE_SNORM_INT8
#define Java_Main_IMAGE_CHANNEL_DATA_TYPE_SNORM_INT8 0L
#undef Java_Main_IMAGE_CHANNEL_DATA_TYPE_SNORM_INT16
#define Java_Main_IMAGE_CHANNEL_DATA_TYPE_SNORM_INT16 1L
#undef Java_Main_IMAGE_CHANNEL_DATA_TYPE_UNORM_INT8
#define Java_Main_IMAGE_CHANNEL_DATA_TYPE_UNORM_INT8 2L
#undef Java_Main_IMAGE_CHANNEL_DATA_TYPE_UNORM_INT16
#define Java_Main_IMAGE_CHANNEL_DATA_TYPE_UNORM_INT16 3L
#undef Java_Main_IMAGE_CHANNEL_DATA_TYPE_UNORM_SHORT565
#define Java_Main_IMAGE_CHANNEL_DATA_TYPE_UNORM_SHORT565 4L
#undef Java_Main_IMAGE_CHANNEL_DATA_TYPE_UNORM_SHORT555
#define Java_Main_IMAGE_CHANNEL_DATA_TYPE_UNORM_SHORT555 5L
#undef Java_Main_IMAGE_CHANNEL_DATA_TYPE_UNORM_INT101010
#define Java_Main_IMAGE_CHANNEL_DATA_TYPE_UNORM_INT101010 6L
#undef Java_Main_IMAGE_CHANNEL_DATA_TYPE_SIGNED_INT8
#define Java_Main_IMAGE_CHANNEL_DATA_TYPE_SIGNED_INT8 7L
#undef Java_Main_IMAGE_CHANNEL_DATA_TYPE_SIGNED_INT16
#define Java_Main_IMAGE_CHANNEL_DATA_TYPE_SIGNED_INT16 8L
#undef Java_Main_IMAGE_CHANNEL_DATA_TYPE_SIGNED_INT32
#define Java_Main_IMAGE_CHANNEL_DATA_TYPE_SIGNED_INT32 9L
#undef Java_Main_IMAGE_CHANNEL_DATA_TYPE_UNSIGNED_INT8
#define Java_Main_IMAGE_CHANNEL_DATA_TYPE_UNSIGNED_INT8 10L
#undef Java_Main_IMAGE_CHANNEL_DATA_TYPE_UNSIGNED_INT16
#define Java_Main_IMAGE_CHANNEL_DATA_TYPE_UNSIGNED_INT16 11L
#undef Java_Main_IMAGE_CHANNEL_DATA_TYPE_UNSIGNED_INT32
#define Java_Main_IMAGE_CHANNEL_DATA_TYPE_UNSIGNED_INT32 12L
#undef Java_Main_IMAGE_CHANNEL_DATA_TYPE_HALF_FLOAT
#define Java_Main_IMAGE_CHANNEL_DATA_TYPE_HALF_FLOAT 13L
#undef Java_Main_IMAGE_CHANNEL_DATA_TYPE_FLOAT
#define Java_Main_IMAGE_CHANNEL_DATA_TYPE_FLOAT 14L
#undef Java_Main_IMAGE_CHANNEL_DATA_TYPE_UNORM_INT24
#define Java_Main_IMAGE_CHANNEL_DATA_TYPE_UNORM_INT24 15L
#undef Java_Main_IMAGE_CHANNEL_DATA_TYPE_UNORM_INT101010_2
#define Java_Main_IMAGE_CHANNEL_DATA_TYPE_UNORM_INT101010_2 16L
#undef Java_Main_IMAGE_CHANNEL_DATA_TYPE_MAX
#define Java_Main_IMAGE_CHANNEL_DATA_TYPE_MAX 2147483647L
#undef Java_Main_IMAGE_OPERANDS_BIAS_SHIFT
#define Java_Main_IMAGE_OPERANDS_BIAS_SHIFT 0L
#undef Java_Main_IMAGE_OPERANDS_LOD_SHIFT
#define Java_Main_IMAGE_OPERANDS_LOD_SHIFT 1L
#undef Java_Main_IMAGE_OPERANDS_GRAD_SHIFT
#define Java_Main_IMAGE_OPERANDS_GRAD_SHIFT 2L
#undef Java_Main_IMAGE_OPERANDS_CONST_OFFSET_SHIFT
#define Java_Main_IMAGE_OPERANDS_CONST_OFFSET_SHIFT 3L
#undef Java_Main_IMAGE_OPERANDS_OFFSET_SHIFT
#define Java_Main_IMAGE_OPERANDS_OFFSET_SHIFT 4L
#undef Java_Main_IMAGE_OPERANDS_CONST_OFFSETS_SHIFT
#define Java_Main_IMAGE_OPERANDS_CONST_OFFSETS_SHIFT 5L
#undef Java_Main_IMAGE_OPERANDS_SAMPLE_SHIFT
#define Java_Main_IMAGE_OPERANDS_SAMPLE_SHIFT 6L
#undef Java_Main_IMAGE_OPERANDS_MIN_LOD_SHIFT
#define Java_Main_IMAGE_OPERANDS_MIN_LOD_SHIFT 7L
#undef Java_Main_IMAGE_OPERANDS_MAKE_TEXEL_AVAILABLE_SHIFT
#define Java_Main_IMAGE_OPERANDS_MAKE_TEXEL_AVAILABLE_SHIFT 8L
#undef Java_Main_IMAGE_OPERANDS_MAKE_TEXEL_AVAILABLE_KHR_SHIFT
#define Java_Main_IMAGE_OPERANDS_MAKE_TEXEL_AVAILABLE_KHR_SHIFT 8L
#undef Java_Main_IMAGE_OPERANDS_MAKE_TEXEL_VISIBLE_SHIFT
#define Java_Main_IMAGE_OPERANDS_MAKE_TEXEL_VISIBLE_SHIFT 9L
#undef Java_Main_IMAGE_OPERANDS_MAKE_TEXEL_VISIBLE_KHR_SHIFT
#define Java_Main_IMAGE_OPERANDS_MAKE_TEXEL_VISIBLE_KHR_SHIFT 9L
#undef Java_Main_IMAGE_OPERANDS_NON_PRIVATE_TEXEL_SHIFT
#define Java_Main_IMAGE_OPERANDS_NON_PRIVATE_TEXEL_SHIFT 10L
#undef Java_Main_IMAGE_OPERANDS_NON_PRIVATE_TEXEL_KHR_SHIFT
#define Java_Main_IMAGE_OPERANDS_NON_PRIVATE_TEXEL_KHR_SHIFT 10L
#undef Java_Main_IMAGE_OPERANDS_VOLATILE_TEXEL_SHIFT
#define Java_Main_IMAGE_OPERANDS_VOLATILE_TEXEL_SHIFT 11L
#undef Java_Main_IMAGE_OPERANDS_VOLATILE_TEXEL_KHR_SHIFT
#define Java_Main_IMAGE_OPERANDS_VOLATILE_TEXEL_KHR_SHIFT 11L
#undef Java_Main_IMAGE_OPERANDS_SIGN_EXTEND_SHIFT
#define Java_Main_IMAGE_OPERANDS_SIGN_EXTEND_SHIFT 12L
#undef Java_Main_IMAGE_OPERANDS_ZERO_EXTEND_SHIFT
#define Java_Main_IMAGE_OPERANDS_ZERO_EXTEND_SHIFT 13L
#undef Java_Main_IMAGE_OPERANDS_MAX
#define Java_Main_IMAGE_OPERANDS_MAX 2147483647L
#undef Java_Main_IMAGE_OPERANDS_MASK_NONE
#define Java_Main_IMAGE_OPERANDS_MASK_NONE 0L
#undef Java_Main_IMAGE_OPERANDS_BIAS_MASK
#define Java_Main_IMAGE_OPERANDS_BIAS_MASK 1L
#undef Java_Main_IMAGE_OPERANDS_LOD_MASK
#define Java_Main_IMAGE_OPERANDS_LOD_MASK 2L
#undef Java_Main_IMAGE_OPERANDS_GRAD_MASK
#define Java_Main_IMAGE_OPERANDS_GRAD_MASK 4L
#undef Java_Main_IMAGE_OPERANDS_CONST_OFFSET_MASK
#define Java_Main_IMAGE_OPERANDS_CONST_OFFSET_MASK 8L
#undef Java_Main_IMAGE_OPERANDS_OFFSET_MASK
#define Java_Main_IMAGE_OPERANDS_OFFSET_MASK 16L
#undef Java_Main_IMAGE_OPERANDS_CONST_OFFSETS_MASK
#define Java_Main_IMAGE_OPERANDS_CONST_OFFSETS_MASK 32L
#undef Java_Main_IMAGE_OPERANDS_SAMPLE_MASK
#define Java_Main_IMAGE_OPERANDS_SAMPLE_MASK 64L
#undef Java_Main_IMAGE_OPERANDS_MIN_LOD_MASK
#define Java_Main_IMAGE_OPERANDS_MIN_LOD_MASK 128L
#undef Java_Main_IMAGE_OPERANDS_MAKE_TEXEL_AVAILABLE_MASK
#define Java_Main_IMAGE_OPERANDS_MAKE_TEXEL_AVAILABLE_MASK 256L
#undef Java_Main_IMAGE_OPERANDS_MAKE_TEXEL_AVAILABLE_KHR_MASK
#define Java_Main_IMAGE_OPERANDS_MAKE_TEXEL_AVAILABLE_KHR_MASK 256L
#undef Java_Main_IMAGE_OPERANDS_MAKE_TEXEL_VISIBLE_MASK
#define Java_Main_IMAGE_OPERANDS_MAKE_TEXEL_VISIBLE_MASK 512L
#undef Java_Main_IMAGE_OPERANDS_MAKE_TEXEL_VISIBLE_KHR_MASK
#define Java_Main_IMAGE_OPERANDS_MAKE_TEXEL_VISIBLE_KHR_MASK 512L
#undef Java_Main_IMAGE_OPERANDS_NON_PRIVATE_TEXEL_MASK
#define Java_Main_IMAGE_OPERANDS_NON_PRIVATE_TEXEL_MASK 1024L
#undef Java_Main_IMAGE_OPERANDS_NON_PRIVATE_TEXEL_KHR_MASK
#define Java_Main_IMAGE_OPERANDS_NON_PRIVATE_TEXEL_KHR_MASK 1024L
#undef Java_Main_IMAGE_OPERANDS_VOLATILE_TEXEL_MASK
#define Java_Main_IMAGE_OPERANDS_VOLATILE_TEXEL_MASK 2048L
#undef Java_Main_IMAGE_OPERANDS_VOLATILE_TEXEL_KHR_MASK
#define Java_Main_IMAGE_OPERANDS_VOLATILE_TEXEL_KHR_MASK 2048L
#undef Java_Main_IMAGE_OPERANDS_SIGN_EXTEND_MASK
#define Java_Main_IMAGE_OPERANDS_SIGN_EXTEND_MASK 4096L
#undef Java_Main_IMAGE_OPERANDS_ZERO_EXTEND_MASK
#define Java_Main_IMAGE_OPERANDS_ZERO_EXTEND_MASK 8192L
#undef Java_Main_FP_FAST_MATH_MODE_NOT_NAN_SHIFT
#define Java_Main_FP_FAST_MATH_MODE_NOT_NAN_SHIFT 0L
#undef Java_Main_FP_FAST_MATH_MODE_NOT_INF_SHIFT
#define Java_Main_FP_FAST_MATH_MODE_NOT_INF_SHIFT 1L
#undef Java_Main_FP_FAST_MATH_MODE_NSZ_SHIFT
#define Java_Main_FP_FAST_MATH_MODE_NSZ_SHIFT 2L
#undef Java_Main_FP_FAST_MATH_MODE_ALLOW_RECIP_SHIFT
#define Java_Main_FP_FAST_MATH_MODE_ALLOW_RECIP_SHIFT 3L
#undef Java_Main_FP_FAST_MATH_MODE_FAST_SHIFT
#define Java_Main_FP_FAST_MATH_MODE_FAST_SHIFT 4L
#undef Java_Main_FP_FAST_MATH_MODE_MAX
#define Java_Main_FP_FAST_MATH_MODE_MAX 2147483647L
#undef Java_Main_FP_FAST_MATH_MODE_MASK_NONE
#define Java_Main_FP_FAST_MATH_MODE_MASK_NONE 0L
#undef Java_Main_FP_FAST_MATH_MODE_NOT_NAN_MASK
#define Java_Main_FP_FAST_MATH_MODE_NOT_NAN_MASK 1L
#undef Java_Main_FP_FAST_MATH_MODE_NOT_INF_MASK
#define Java_Main_FP_FAST_MATH_MODE_NOT_INF_MASK 2L
#undef Java_Main_FP_FAST_MATH_MODE_NSZ_MASK
#define Java_Main_FP_FAST_MATH_MODE_NSZ_MASK 4L
#undef Java_Main_FP_FAST_MATH_MODE_ALLOW_RECIP_MASK
#define Java_Main_FP_FAST_MATH_MODE_ALLOW_RECIP_MASK 8L
#undef Java_Main_FP_FAST_MATH_MODE_FAST_MASK
#define Java_Main_FP_FAST_MATH_MODE_FAST_MASK 16L
#undef Java_Main_FP_ROUNDING_MODE_RTE
#define Java_Main_FP_ROUNDING_MODE_RTE 0L
#undef Java_Main_FP_ROUNDING_MODE_RTZ
#define Java_Main_FP_ROUNDING_MODE_RTZ 1L
#undef Java_Main_FP_ROUNDING_MODE_RTP
#define Java_Main_FP_ROUNDING_MODE_RTP 2L
#undef Java_Main_FP_ROUNDING_MODE_RTN
#define Java_Main_FP_ROUNDING_MODE_RTN 3L
#undef Java_Main_FP_ROUNDING_MODE_MAX
#define Java_Main_FP_ROUNDING_MODE_MAX 2147483647L
#undef Java_Main_LINKAGE_TYPE_EXPORT
#define Java_Main_LINKAGE_TYPE_EXPORT 0L
#undef Java_Main_LINKAGE_TYPE_IMPORT
#define Java_Main_LINKAGE_TYPE_IMPORT 1L
#undef Java_Main_LINKAGE_TYPE_MAX
#define Java_Main_LINKAGE_TYPE_MAX 2147483647L
#undef Java_Main_ACCESS_QUALIFIER_READ_ONLY
#define Java_Main_ACCESS_QUALIFIER_READ_ONLY 0L
#undef Java_Main_ACCESS_QUALIFIER_WRITE_ONLY
#define Java_Main_ACCESS_QUALIFIER_WRITE_ONLY 1L
#undef Java_Main_ACCESS_QUALIFIER_READ_WRITE
#define Java_Main_ACCESS_QUALIFIER_READ_WRITE 2L
#undef Java_Main_ACCESS_QUALIFIER_MAX
#define Java_Main_ACCESS_QUALIFIER_MAX 2147483647L
#undef Java_Main_FUNCTION_PARAMETER_ATTRIBUTE_ZEXT
#define Java_Main_FUNCTION_PARAMETER_ATTRIBUTE_ZEXT 0L
#undef Java_Main_FUNCTION_PARAMETER_ATTRIBUTE_SEXT
#define Java_Main_FUNCTION_PARAMETER_ATTRIBUTE_SEXT 1L
#undef Java_Main_FUNCTION_PARAMETER_ATTRIBUTE_BY_VAL
#define Java_Main_FUNCTION_PARAMETER_ATTRIBUTE_BY_VAL 2L
#undef Java_Main_FUNCTION_PARAMETER_ATTRIBUTE_SRET
#define Java_Main_FUNCTION_PARAMETER_ATTRIBUTE_SRET 3L
#undef Java_Main_FUNCTION_PARAMETER_ATTRIBUTE_NO_ALIAS
#define Java_Main_FUNCTION_PARAMETER_ATTRIBUTE_NO_ALIAS 4L
#undef Java_Main_FUNCTION_PARAMETER_ATTRIBUTE_NO_CAPTURE
#define Java_Main_FUNCTION_PARAMETER_ATTRIBUTE_NO_CAPTURE 5L
#undef Java_Main_FUNCTION_PARAMETER_ATTRIBUTE_NO_WRITE
#define Java_Main_FUNCTION_PARAMETER_ATTRIBUTE_NO_WRITE 6L
#undef Java_Main_FUNCTION_PARAMETER_ATTRIBUTE_NO_READ_WRITE
#define Java_Main_FUNCTION_PARAMETER_ATTRIBUTE_NO_READ_WRITE 7L
#undef Java_Main_FUNCTION_PARAMETER_ATTRIBUTE_MAX
#define Java_Main_FUNCTION_PARAMETER_ATTRIBUTE_MAX 2147483647L
#undef Java_Main_DECORATION_RELAXEDPRECISION
#define Java_Main_DECORATION_RELAXEDPRECISION 0L
#undef Java_Main_DECORATION_SPEC_ID
#define Java_Main_DECORATION_SPEC_ID 1L
#undef Java_Main_DECORATION_BLOCK
#define Java_Main_DECORATION_BLOCK 2L
#undef Java_Main_DECORATION_BUFFER_BLOCK
#define Java_Main_DECORATION_BUFFER_BLOCK 3L
#undef Java_Main_DECORATION_ROW_MAJOR
#define Java_Main_DECORATION_ROW_MAJOR 4L
#undef Java_Main_DECORATION_COL_MAJOR
#define Java_Main_DECORATION_COL_MAJOR 5L
#undef Java_Main_DECORATION_ARRAY_STRIDE
#define Java_Main_DECORATION_ARRAY_STRIDE 6L
#undef Java_Main_DECORATION_MATRIX_STRIDE
#define Java_Main_DECORATION_MATRIX_STRIDE 7L
#undef Java_Main_DECORATION_GLSL_SHARED
#define Java_Main_DECORATION_GLSL_SHARED 8L
#undef Java_Main_DECORATION_GLSL_PACKED
#define Java_Main_DECORATION_GLSL_PACKED 9L
#undef Java_Main_DECORATION_C_PACKED
#define Java_Main_DECORATION_C_PACKED 10L
#undef Java_Main_DECORATION_BUILT_IN
#define Java_Main_DECORATION_BUILT_IN 11L
#undef Java_Main_DECORATION_NO_PERSPECTIVE
#define Java_Main_DECORATION_NO_PERSPECTIVE 13L
#undef Java_Main_DECORATION_FLAT
#define Java_Main_DECORATION_FLAT 14L
#undef Java_Main_DECORATION_PATCH
#define Java_Main_DECORATION_PATCH 15L
#undef Java_Main_DECORATION_CENTROID
#define Java_Main_DECORATION_CENTROID 16L
#undef Java_Main_DECORATION_SAMPLE
#define Java_Main_DECORATION_SAMPLE 17L
#undef Java_Main_DECORATION_INVARIANT
#define Java_Main_DECORATION_INVARIANT 18L
#undef Java_Main_DECORATION_RESTRICT
#define Java_Main_DECORATION_RESTRICT 19L
#undef Java_Main_DECORATION_ALIASED
#define Java_Main_DECORATION_ALIASED 20L
#undef Java_Main_DECORATION_VOLATILE
#define Java_Main_DECORATION_VOLATILE 21L
#undef Java_Main_DECORATION_CONSTANT
#define Java_Main_DECORATION_CONSTANT 22L
#undef Java_Main_DECORATION_COHERENT
#define Java_Main_DECORATION_COHERENT 23L
#undef Java_Main_DECORATION_NON_WRITABLE
#define Java_Main_DECORATION_NON_WRITABLE 24L
#undef Java_Main_DECORATION_NON_READABLE
#define Java_Main_DECORATION_NON_READABLE 25L
#undef Java_Main_DECORATION_UNIFORM
#define Java_Main_DECORATION_UNIFORM 26L
#undef Java_Main_DECORATION_UNIFORMID
#define Java_Main_DECORATION_UNIFORMID 27L
#undef Java_Main_DECORATION_SATURATED_CONVERSION
#define Java_Main_DECORATION_SATURATED_CONVERSION 28L
#undef Java_Main_DECORATION_STREAM
#define Java_Main_DECORATION_STREAM 29L
#undef Java_Main_DECORATION_LOCATION
#define Java_Main_DECORATION_LOCATION 30L
#undef Java_Main_DECORATION_COMPONENT
#define Java_Main_DECORATION_COMPONENT 31L
#undef Java_Main_DECORATION_INDEX
#define Java_Main_DECORATION_INDEX 32L
#undef Java_Main_DECORATION_BINDING
#define Java_Main_DECORATION_BINDING 33L
#undef Java_Main_DECORATION_DESCRIPTOR_SET
#define Java_Main_DECORATION_DESCRIPTOR_SET 34L
#undef Java_Main_DECORATION_OFFSET
#define Java_Main_DECORATION_OFFSET 35L
#undef Java_Main_DECORATION_XFB_BUFFER
#define Java_Main_DECORATION_XFB_BUFFER 36L
#undef Java_Main_DECORATION_XFB_STRIDE
#define Java_Main_DECORATION_XFB_STRIDE 37L
#undef Java_Main_DECORATION_FUNC_PARAM_ATTR
#define Java_Main_DECORATION_FUNC_PARAM_ATTR 38L
#undef Java_Main_DECORATION_FP_ROUNDING_MODE
#define Java_Main_DECORATION_FP_ROUNDING_MODE 39L
#undef Java_Main_DECORATION_FP_FAST_MATH_MODE
#define Java_Main_DECORATION_FP_FAST_MATH_MODE 40L
#undef Java_Main_DECORATION_LINKAGE_ATTRIBUTES
#define Java_Main_DECORATION_LINKAGE_ATTRIBUTES 41L
#undef Java_Main_DECORATION_NO_CONTRACTION
#define Java_Main_DECORATION_NO_CONTRACTION 42L
#undef Java_Main_DECORATION_INPUT_ATTACHMENT_INDEX
#define Java_Main_DECORATION_INPUT_ATTACHMENT_INDEX 43L
#undef Java_Main_DECORATION_ALIGNMENT
#define Java_Main_DECORATION_ALIGNMENT 44L
#undef Java_Main_DECORATION_MAX_BYTE_OFFSET
#define Java_Main_DECORATION_MAX_BYTE_OFFSET 45L
#undef Java_Main_DECORATION_ALIGNMENT_ID
#define Java_Main_DECORATION_ALIGNMENT_ID 46L
#undef Java_Main_DECORATION_MAX_BYTE_OFFSET_ID
#define Java_Main_DECORATION_MAX_BYTE_OFFSET_ID 47L
#undef Java_Main_DECORATION_NO_SIGNED_WRAP
#define Java_Main_DECORATION_NO_SIGNED_WRAP 4469L
#undef Java_Main_DECORATION_NO_UNSIGNED_WRAP
#define Java_Main_DECORATION_NO_UNSIGNED_WRAP 4470L
#undef Java_Main_DECORATION_EXPLICIT_INTERP_AMD
#define Java_Main_DECORATION_EXPLICIT_INTERP_AMD 4999L
#undef Java_Main_DECORATION_OVERRIDE_COVERAGE_NV
#define Java_Main_DECORATION_OVERRIDE_COVERAGE_NV 5248L
#undef Java_Main_DECORATION_PASSTHROUGH_NV
#define Java_Main_DECORATION_PASSTHROUGH_NV 5250L
#undef Java_Main_DECORATION_VIEWPORT_RELATIVE_NV
#define Java_Main_DECORATION_VIEWPORT_RELATIVE_NV 5252L
#undef Java_Main_DECORATION_SECONDARY_VIEWPORT_RELATIVE_NV
#define Java_Main_DECORATION_SECONDARY_VIEWPORT_RELATIVE_NV 5256L
#undef Java_Main_DECORATION_PER_PRIMITIVE_NV
#define Java_Main_DECORATION_PER_PRIMITIVE_NV 5271L
#undef Java_Main_DECORATION_PER_VIEW_NV
#define Java_Main_DECORATION_PER_VIEW_NV 5272L
#undef Java_Main_DECORATION_PER_TASK_NV
#define Java_Main_DECORATION_PER_TASK_NV 5273L
#undef Java_Main_DECORATION_PER_VERTEX_NV
#define Java_Main_DECORATION_PER_VERTEX_NV 5285L
#undef Java_Main_DECORATION_NON_UNIFORM
#define Java_Main_DECORATION_NON_UNIFORM 5300L
#undef Java_Main_DECORATION_NON_UNIFORM_EXT
#define Java_Main_DECORATION_NON_UNIFORM_EXT 5300L
#undef Java_Main_DECORATION_RESTRICT_POINTER
#define Java_Main_DECORATION_RESTRICT_POINTER 5355L
#undef Java_Main_DECORATION_RESTRICT_POINTER_EXT
#define Java_Main_DECORATION_RESTRICT_POINTER_EXT 5355L
#undef Java_Main_DECORATION_ALIASED_POINTER
#define Java_Main_DECORATION_ALIASED_POINTER 5356L
#undef Java_Main_DECORATION_ALIASED_POINTER_EXT
#define Java_Main_DECORATION_ALIASED_POINTER_EXT 5356L
#undef Java_Main_DECORATION_REFERENCED_INDIRECTLY_INTEL
#define Java_Main_DECORATION_REFERENCED_INDIRECTLY_INTEL 5602L
#undef Java_Main_DECORATION_COUNTER_BUFFER
#define Java_Main_DECORATION_COUNTER_BUFFER 5634L
#undef Java_Main_DECORATION_HLSL_COUNTER_BUFFER_GOOGLE
#define Java_Main_DECORATION_HLSL_COUNTER_BUFFER_GOOGLE 5634L
#undef Java_Main_DECORATION_HLSL_SEMANTIC_GOOGLE
#define Java_Main_DECORATION_HLSL_SEMANTIC_GOOGLE 5635L
#undef Java_Main_DECORATION_USER_SEMANTIC
#define Java_Main_DECORATION_USER_SEMANTIC 5635L
#undef Java_Main_DECORATION_USER_TYPE_GOOGLE
#define Java_Main_DECORATION_USER_TYPE_GOOGLE 5636L
#undef Java_Main_DECORATION_REGISTER_INTEL
#define Java_Main_DECORATION_REGISTER_INTEL 5825L
#undef Java_Main_DECORATION_MEMORY_INTEL
#define Java_Main_DECORATION_MEMORY_INTEL 5826L
#undef Java_Main_DECORATION_NUMBANKS_INTEL
#define Java_Main_DECORATION_NUMBANKS_INTEL 5827L
#undef Java_Main_DECORATION_BANKWIDTH_INTEL
#define Java_Main_DECORATION_BANKWIDTH_INTEL 5828L
#undef Java_Main_DECORATION_MAX_PRIVATE_COPIES_INTEL
#define Java_Main_DECORATION_MAX_PRIVATE_COPIES_INTEL 5829L
#undef Java_Main_DECORATION_SINGLEPUMP_INTEL
#define Java_Main_DECORATION_SINGLEPUMP_INTEL 5830L
#undef Java_Main_DECORATION_DOUBLEPUMP_INTEL
#define Java_Main_DECORATION_DOUBLEPUMP_INTEL 5831L
#undef Java_Main_DECORATION_MAX_REPLICATES_INTEL
#define Java_Main_DECORATION_MAX_REPLICATES_INTEL 5832L
#undef Java_Main_DECORATION_SIMPLE_DUAL_PORT_INTEL
#define Java_Main_DECORATION_SIMPLE_DUAL_PORT_INTEL 5833L
#undef Java_Main_DECORATION_MERGE_INTEL
#define Java_Main_DECORATION_MERGE_INTEL 5834L
#undef Java_Main_DECORATION_BANK_BITS_INTEL
#define Java_Main_DECORATION_BANK_BITS_INTEL 5835L
#undef Java_Main_DECORATION_FORCE_POW2_DEPTH_INTEL
#define Java_Main_DECORATION_FORCE_POW2_DEPTH_INTEL 5836L
#undef Java_Main_DECORATION_MAX
#define Java_Main_DECORATION_MAX 2147483647L
#undef Java_Main_BUILT_IN_POSITION
#define Java_Main_BUILT_IN_POSITION 0L
#undef Java_Main_BUILT_IN_POINT_SIZE
#define Java_Main_BUILT_IN_POINT_SIZE 1L
#undef Java_Main_BUILT_IN_CLIP_DISTANCE
#define Java_Main_BUILT_IN_CLIP_DISTANCE 3L
#undef Java_Main_BUILT_IN_CULL_DISTANCE
#define Java_Main_BUILT_IN_CULL_DISTANCE 4L
#undef Java_Main_BUILT_IN_VERTEX_ID
#define Java_Main_BUILT_IN_VERTEX_ID 5L
#undef Java_Main_BUILT_IN_INSTANCE_ID
#define Java_Main_BUILT_IN_INSTANCE_ID 6L
#undef Java_Main_BUILT_IN_PRIMITIVE_ID
#define Java_Main_BUILT_IN_PRIMITIVE_ID 7L
#undef Java_Main_BUILT_IN_INVOCATION_ID
#define Java_Main_BUILT_IN_INVOCATION_ID 8L
#undef Java_Main_BUILT_IN_LAYER
#define Java_Main_BUILT_IN_LAYER 9L
#undef Java_Main_BUILT_IN_VIEWPORT_INDEX
#define Java_Main_BUILT_IN_VIEWPORT_INDEX 10L
#undef Java_Main_BUILT_IN_TESS_LEVEL_OUTER
#define Java_Main_BUILT_IN_TESS_LEVEL_OUTER 11L
#undef Java_Main_BUILT_IN_TESS_LEVEL_INNER
#define Java_Main_BUILT_IN_TESS_LEVEL_INNER 12L
#undef Java_Main_BUILT_IN_TESS_COORD
#define Java_Main_BUILT_IN_TESS_COORD 13L
#undef Java_Main_BUILT_IN_PATCH_VERTICES
#define Java_Main_BUILT_IN_PATCH_VERTICES 14L
#undef Java_Main_BUILT_IN_FRAG_COORD
#define Java_Main_BUILT_IN_FRAG_COORD 15L
#undef Java_Main_BUILT_IN_POINT_COORD
#define Java_Main_BUILT_IN_POINT_COORD 16L
#undef Java_Main_BUILT_IN_FRONT_FACING
#define Java_Main_BUILT_IN_FRONT_FACING 17L
#undef Java_Main_BUILT_IN_SAMPLE_ID
#define Java_Main_BUILT_IN_SAMPLE_ID 18L
#undef Java_Main_BUILT_IN_SAMPLE_POSITION
#define Java_Main_BUILT_IN_SAMPLE_POSITION 19L
#undef Java_Main_BUILT_IN_SAMPLE_MASK
#define Java_Main_BUILT_IN_SAMPLE_MASK 20L
#undef Java_Main_BUILT_IN_FRAG_DEPTH
#define Java_Main_BUILT_IN_FRAG_DEPTH 22L
#undef Java_Main_BUILT_IN_HELPER_INVOCATION
#define Java_Main_BUILT_IN_HELPER_INVOCATION 23L
#undef Java_Main_BUILT_IN_NUM_WORKGROUPS
#define Java_Main_BUILT_IN_NUM_WORKGROUPS 24L
#undef Java_Main_BUILT_IN_WORKGROUP_SIZE
#define Java_Main_BUILT_IN_WORKGROUP_SIZE 25L
#undef Java_Main_BUILT_IN_WORKGROUP_ID
#define Java_Main_BUILT_IN_WORKGROUP_ID 26L
#undef Java_Main_BUILT_IN_LOCAL_INVOCATION_ID
#define Java_Main_BUILT_IN_LOCAL_INVOCATION_ID 27L
#undef Java_Main_BUILT_IN_GLOBAL_INVOCATION_ID
#define Java_Main_BUILT_IN_GLOBAL_INVOCATION_ID 28L
#undef Java_Main_BUILT_IN_LOCAL_INVOCATION_INDEX
#define Java_Main_BUILT_IN_LOCAL_INVOCATION_INDEX 29L
#undef Java_Main_BUILT_IN_WORK_DIM
#define Java_Main_BUILT_IN_WORK_DIM 30L
#undef Java_Main_BUILT_IN_GLOBAL_SIZE
#define Java_Main_BUILT_IN_GLOBAL_SIZE 31L
#undef Java_Main_BUILT_IN_ENQUEUED_WORKGROUP_SIZE
#define Java_Main_BUILT_IN_ENQUEUED_WORKGROUP_SIZE 32L
#undef Java_Main_BUILT_IN_GLOBAL_OFFSET
#define Java_Main_BUILT_IN_GLOBAL_OFFSET 33L
#undef Java_Main_BUILT_IN_GLOBAL_LINEAR_ID
#define Java_Main_BUILT_IN_GLOBAL_LINEAR_ID 34L
#undef Java_Main_BUILT_IN_SUBGROUP_SIZE
#define Java_Main_BUILT_IN_SUBGROUP_SIZE 36L
#undef Java_Main_BUILT_IN_SUBGROUP_MAX_SIZE
#define Java_Main_BUILT_IN_SUBGROUP_MAX_SIZE 37L
#undef Java_Main_BUILT_IN_NUM_SUBGROUPS
#define Java_Main_BUILT_IN_NUM_SUBGROUPS 38L
#undef Java_Main_BUILT_IN_NUM_ENQUEUED_SUBGROUPS
#define Java_Main_BUILT_IN_NUM_ENQUEUED_SUBGROUPS 39L
#undef Java_Main_BUILT_IN_SUBGROUP_ID
#define Java_Main_BUILT_IN_SUBGROUP_ID 40L
#undef Java_Main_BUILT_IN_SUBGROUP_LOCAL_INVOCATION_ID
#define Java_Main_BUILT_IN_SUBGROUP_LOCAL_INVOCATION_ID 41L
#undef Java_Main_BUILT_IN_VERTEX_INDEX
#define Java_Main_BUILT_IN_VERTEX_INDEX 42L
#undef Java_Main_BUILT_IN_INSTANCE_INDEX
#define Java_Main_BUILT_IN_INSTANCE_INDEX 43L
#undef Java_Main_BUILT_IN_SUBGROUP_EQ_MASK
#define Java_Main_BUILT_IN_SUBGROUP_EQ_MASK 4416L
#undef Java_Main_BUILT_IN_SUBGROUP_EQ_MASK_KHR
#define Java_Main_BUILT_IN_SUBGROUP_EQ_MASK_KHR 4416L
#undef Java_Main_BUILT_IN_SUBGROUP_GE_MASK
#define Java_Main_BUILT_IN_SUBGROUP_GE_MASK 4417L
#undef Java_Main_BUILT_IN_SUBGROUP_GE_MASK_KHR
#define Java_Main_BUILT_IN_SUBGROUP_GE_MASK_KHR 4417L
#undef Java_Main_BUILT_IN_SUBGROUP_GT_MASK
#define Java_Main_BUILT_IN_SUBGROUP_GT_MASK 4418L
#undef Java_Main_BUILT_IN_SUBGROUP_GT_MASK_KHR
#define Java_Main_BUILT_IN_SUBGROUP_GT_MASK_KHR 4418L
#undef Java_Main_BUILT_IN_SUBGROUP_LE_MASK
#define Java_Main_BUILT_IN_SUBGROUP_LE_MASK 4419L
#undef Java_Main_BUILT_IN_SUBGROUP_LE_MASK_KHR
#define Java_Main_BUILT_IN_SUBGROUP_LE_MASK_KHR 4419L
#undef Java_Main_BUILT_IN_SUBGROUP_LT_MASK
#define Java_Main_BUILT_IN_SUBGROUP_LT_MASK 4420L
#undef Java_Main_BUILT_IN_SUBGROUP_LT_MASK_KHR
#define Java_Main_BUILT_IN_SUBGROUP_LT_MASK_KHR 4420L
#undef Java_Main_BUILT_IN_BASE_VERTEX
#define Java_Main_BUILT_IN_BASE_VERTEX 4424L
#undef Java_Main_BUILT_IN_BASE_INSTANCE
#define Java_Main_BUILT_IN_BASE_INSTANCE 4425L
#undef Java_Main_BUILT_IN_DRAW_INDEX
#define Java_Main_BUILT_IN_DRAW_INDEX 4426L
#undef Java_Main_BUILT_IN_DEVICE_INDEX
#define Java_Main_BUILT_IN_DEVICE_INDEX 4438L
#undef Java_Main_BUILT_IN_VIEW_INDEX
#define Java_Main_BUILT_IN_VIEW_INDEX 4440L
#undef Java_Main_BUILT_IN_BARY_COORD_NO_PERSP_AMD
#define Java_Main_BUILT_IN_BARY_COORD_NO_PERSP_AMD 4992L
#undef Java_Main_BUILT_IN_BARY_COORD_NO_PERSP_CENTROID_AMD
#define Java_Main_BUILT_IN_BARY_COORD_NO_PERSP_CENTROID_AMD 4993L
#undef Java_Main_BUILT_IN_BARY_COORD_NO_PERSP_SAMPLE_AMD
#define Java_Main_BUILT_IN_BARY_COORD_NO_PERSP_SAMPLE_AMD 4994L
#undef Java_Main_BUILT_IN_BARY_COORD_SMOOTH_AMD
#define Java_Main_BUILT_IN_BARY_COORD_SMOOTH_AMD 4995L
#undef Java_Main_BUILT_IN_BARY_COORD_SMOOTH_CENTROID_AMD
#define Java_Main_BUILT_IN_BARY_COORD_SMOOTH_CENTROID_AMD 4996L
#undef Java_Main_BUILT_IN_BARY_COORD_SMOOTH_SAMPLE_AMD
#define Java_Main_BUILT_IN_BARY_COORD_SMOOTH_SAMPLE_AMD 4997L
#undef Java_Main_BUILT_IN_BARY_COORD_PULL_MODEL_AMD
#define Java_Main_BUILT_IN_BARY_COORD_PULL_MODEL_AMD 4998L
#undef Java_Main_BUILT_IN_FRAG_STENCIL_REF_EXT
#define Java_Main_BUILT_IN_FRAG_STENCIL_REF_EXT 5014L
#undef Java_Main_BUILT_IN_VIEWPORT_MASK_NV
#define Java_Main_BUILT_IN_VIEWPORT_MASK_NV 5253L
#undef Java_Main_BUILT_IN_SECONDARY_POSITION_NV
#define Java_Main_BUILT_IN_SECONDARY_POSITION_NV 5257L
#undef Java_Main_BUILT_IN_SECONDARY_VIEWPORT_MASK_NV
#define Java_Main_BUILT_IN_SECONDARY_VIEWPORT_MASK_NV 5258L
#undef Java_Main_BUILT_IN_POSITION_PER_VIEW_NV
#define Java_Main_BUILT_IN_POSITION_PER_VIEW_NV 5261L
#undef Java_Main_BUILT_IN_VIEWPORT_MASK_PER_VIEW_NV
#define Java_Main_BUILT_IN_VIEWPORT_MASK_PER_VIEW_NV 5262L
#undef Java_Main_BUILT_IN_FULLY_COVERED_EXT
#define Java_Main_BUILT_IN_FULLY_COVERED_EXT 5264L
#undef Java_Main_BUILT_IN_TASK_COUNT_NV
#define Java_Main_BUILT_IN_TASK_COUNT_NV 5274L
#undef Java_Main_BUILT_IN_PRIMITIVE_COUNT_NV
#define Java_Main_BUILT_IN_PRIMITIVE_COUNT_NV 5275L
#undef Java_Main_BUILT_IN_PRIMITIVE_INDICES_NV
#define Java_Main_BUILT_IN_PRIMITIVE_INDICES_NV 5276L
#undef Java_Main_BUILT_IN_CLIP_DISTANCE_PER_VIEW_NV
#define Java_Main_BUILT_IN_CLIP_DISTANCE_PER_VIEW_NV 5277L
#undef Java_Main_BUILT_IN_CULL_DISTANCE_PER_VIEW_NV
#define Java_Main_BUILT_IN_CULL_DISTANCE_PER_VIEW_NV 5278L
#undef Java_Main_BUILT_IN_LAYER_PER_VIEW_NV
#define Java_Main_BUILT_IN_LAYER_PER_VIEW_NV 5279L
#undef Java_Main_BUILT_IN_MESH_VIEW_COUNT_NV
#define Java_Main_BUILT_IN_MESH_VIEW_COUNT_NV 5280L
#undef Java_Main_BUILT_IN_MESH_VIEW_INDICES_NV
#define Java_Main_BUILT_IN_MESH_VIEW_INDICES_NV 5281L
#undef Java_Main_BUILT_IN_BARY_COORD_NV
#define Java_Main_BUILT_IN_BARY_COORD_NV 5286L
#undef Java_Main_BUILT_IN_BARY_COORD_NO_PERSP_NV
#define Java_Main_BUILT_IN_BARY_COORD_NO_PERSP_NV 5287L
#undef Java_Main_BUILT_IN_FRAG_SIZE_EXT
#define Java_Main_BUILT_IN_FRAG_SIZE_EXT 5292L
#undef Java_Main_BUILT_IN_FRAGMENT_SIZE_NV
#define Java_Main_BUILT_IN_FRAGMENT_SIZE_NV 5292L
#undef Java_Main_BUILT_IN_FRAG_INVOCATION_COUNT_EXT
#define Java_Main_BUILT_IN_FRAG_INVOCATION_COUNT_EXT 5293L
#undef Java_Main_BUILT_IN_INVOCATIONS_PER_PIXEL_NV
#define Java_Main_BUILT_IN_INVOCATIONS_PER_PIXEL_NV 5293L
#undef Java_Main_BUILT_IN_LAUNCH_ID_KHR
#define Java_Main_BUILT_IN_LAUNCH_ID_KHR 5319L
#undef Java_Main_BUILT_IN_LAUNCH_ID_NV
#define Java_Main_BUILT_IN_LAUNCH_ID_NV 5319L
#undef Java_Main_BUILT_IN_LAUNCH_SIZE_KHR
#define Java_Main_BUILT_IN_LAUNCH_SIZE_KHR 5320L
#undef Java_Main_BUILT_IN_LAUNCH_SIZE_NV
#define Java_Main_BUILT_IN_LAUNCH_SIZE_NV 5320L
#undef Java_Main_BUILT_IN_WORLD_RAY_ORIGIN_KHR
#define Java_Main_BUILT_IN_WORLD_RAY_ORIGIN_KHR 5321L
#undef Java_Main_BUILT_IN_WORLD_RAY_ORIGIN_NV
#define Java_Main_BUILT_IN_WORLD_RAY_ORIGIN_NV 5321L
#undef Java_Main_BUILT_IN_WORLD_RAY_DIRECTION_KHR
#define Java_Main_BUILT_IN_WORLD_RAY_DIRECTION_KHR 5322L
#undef Java_Main_BUILT_IN_WORLD_RAY_DIRECTION_NV
#define Java_Main_BUILT_IN_WORLD_RAY_DIRECTION_NV 5322L
#undef Java_Main_BUILT_IN_OBJECT_RAY_ORIGIN_KHR
#define Java_Main_BUILT_IN_OBJECT_RAY_ORIGIN_KHR 5323L
#undef Java_Main_BUILT_IN_OBJECT_RAY_ORIGIN_NV
#define Java_Main_BUILT_IN_OBJECT_RAY_ORIGIN_NV 5323L
#undef Java_Main_BUILT_IN_OBJECT_RAY_DIRECTION_KHR
#define Java_Main_BUILT_IN_OBJECT_RAY_DIRECTION_KHR 5324L
#undef Java_Main_BUILT_IN_OBJECT_RAY_DIRECTION_NV
#define Java_Main_BUILT_IN_OBJECT_RAY_DIRECTION_NV 5324L
#undef Java_Main_BUILT_IN_RAY_TMIN_KHR
#define Java_Main_BUILT_IN_RAY_TMIN_KHR 5325L
#undef Java_Main_BUILT_IN_RAY_TMIN_NV
#define Java_Main_BUILT_IN_RAY_TMIN_NV 5325L
#undef Java_Main_BUILT_IN_RAY_TMAX_KHR
#define Java_Main_BUILT_IN_RAY_TMAX_KHR 5326L
#undef Java_Main_BUILT_IN_RAY_TMAX_NV
#define Java_Main_BUILT_IN_RAY_TMAX_NV 5326L
#undef Java_Main_BUILT_IN_INSTANCE_CUSTOM_INDEX_KHR
#define Java_Main_BUILT_IN_INSTANCE_CUSTOM_INDEX_KHR 5327L
#undef Java_Main_BUILT_IN_INSTANCE_CUSTOM_INDEX_NV
#define Java_Main_BUILT_IN_INSTANCE_CUSTOM_INDEX_NV 5327L
#undef Java_Main_BUILT_IN_OBJECT_TO_WORLD_KHR
#define Java_Main_BUILT_IN_OBJECT_TO_WORLD_KHR 5330L
#undef Java_Main_BUILT_IN_OBJECT_TO_WORLD_NV
#define Java_Main_BUILT_IN_OBJECT_TO_WORLD_NV 5330L
#undef Java_Main_BUILT_IN_WORLD_TO_OBJECT_KHR
#define Java_Main_BUILT_IN_WORLD_TO_OBJECT_KHR 5331L
#undef Java_Main_BUILT_IN_WORLD_TO_OBJECT_NV
#define Java_Main_BUILT_IN_WORLD_TO_OBJECT_NV 5331L
#undef Java_Main_BUILT_IN_HIT_T_KHR
#define Java_Main_BUILT_IN_HIT_T_KHR 5332L
#undef Java_Main_BUILT_IN_HIT_T_NV
#define Java_Main_BUILT_IN_HIT_T_NV 5332L
#undef Java_Main_BUILT_IN_HIT_KIND_KHR
#define Java_Main_BUILT_IN_HIT_KIND_KHR 5333L
#undef Java_Main_BUILT_IN_HIT_KIND_NV
#define Java_Main_BUILT_IN_HIT_KIND_NV 5333L
#undef Java_Main_BUILT_IN_INCOMING_RAY_FLAGS_KHR
#define Java_Main_BUILT_IN_INCOMING_RAY_FLAGS_KHR 5351L
#undef Java_Main_BUILT_IN_INCOMING_RAY_FLAGS_NV
#define Java_Main_BUILT_IN_INCOMING_RAY_FLAGS_NV 5351L
#undef Java_Main_BUILT_IN_RAY_GEOMETRY_INDEX_KHR
#define Java_Main_BUILT_IN_RAY_GEOMETRY_INDEX_KHR 5352L
#undef Java_Main_BUILT_IN_WARPS_PER_SM_NV
#define Java_Main_BUILT_IN_WARPS_PER_SM_NV 5374L
#undef Java_Main_BUILT_IN_SM_COUNT_NV
#define Java_Main_BUILT_IN_SM_COUNT_NV 5375L
#undef Java_Main_BUILT_IN_WARP_ID_NV
#define Java_Main_BUILT_IN_WARP_ID_NV 5376L
#undef Java_Main_BUILT_IN_SM_ID_NV
#define Java_Main_BUILT_IN_SM_ID_NV 5377L
#undef Java_Main_BUILT_IN_MAX
#define Java_Main_BUILT_IN_MAX 2147483647L
#undef Java_Main_SELECTION_CONTROL_FLATTEN_SHIFT
#define Java_Main_SELECTION_CONTROL_FLATTEN_SHIFT 0L
#undef Java_Main_SELECTION_CONTROL_DONT_FLATTEN_SHIFT
#define Java_Main_SELECTION_CONTROL_DONT_FLATTEN_SHIFT 1L
#undef Java_Main_SELECTION_CONTROL_MAX
#define Java_Main_SELECTION_CONTROL_MAX 2147483647L
#undef Java_Main_SELECTION_CONTROL_MASK_NONE
#define Java_Main_SELECTION_CONTROL_MASK_NONE 0L
#undef Java_Main_SELECTION_CONTROL_FLATTEN_MASK
#define Java_Main_SELECTION_CONTROL_FLATTEN_MASK 1L
#undef Java_Main_SELECTION_CONTROL_DONT_FLATTEN_MASK
#define Java_Main_SELECTION_CONTROL_DONT_FLATTEN_MASK 2L
#undef Java_Main_LOOP_CONTROL_UNROLL_SHIFT
#define Java_Main_LOOP_CONTROL_UNROLL_SHIFT 0L
#undef Java_Main_LOOP_CONTROL_DONT_UNROLL_SHIFT
#define Java_Main_LOOP_CONTROL_DONT_UNROLL_SHIFT 1L
#undef Java_Main_LOOP_CONTROL_DEPENDENCY_INFINITE_SHIFT
#define Java_Main_LOOP_CONTROL_DEPENDENCY_INFINITE_SHIFT 2L
#undef Java_Main_LOOP_CONTROL_DEPENDENCY_LENGTH_SHIFT
#define Java_Main_LOOP_CONTROL_DEPENDENCY_LENGTH_SHIFT 3L
#undef Java_Main_LOOP_CONTROL_MIN_ITERATIONS_SHIFT
#define Java_Main_LOOP_CONTROL_MIN_ITERATIONS_SHIFT 4L
#undef Java_Main_LOOP_CONTROL_MAX_ITERATIONS_SHIFT
#define Java_Main_LOOP_CONTROL_MAX_ITERATIONS_SHIFT 5L
#undef Java_Main_LOOP_CONTROL_ITERATION_MULTIPLE_SHIFT
#define Java_Main_LOOP_CONTROL_ITERATION_MULTIPLE_SHIFT 6L
#undef Java_Main_LOOP_CONTROL_PEEL_COUNT_SHIFT
#define Java_Main_LOOP_CONTROL_PEEL_COUNT_SHIFT 7L
#undef Java_Main_LOOP_CONTROL_PARTIAL_COUNT_SHIFT
#define Java_Main_LOOP_CONTROL_PARTIAL_COUNT_SHIFT 8L
#undef Java_Main_LOOP_CONTROL_INITIATION_INTERVAL_INTEL_SHIFT
#define Java_Main_LOOP_CONTROL_INITIATION_INTERVAL_INTEL_SHIFT 16L
#undef Java_Main_LOOP_CONTROL_MAX_CONCURRENCY_INTEL_SHIFT
#define Java_Main_LOOP_CONTROL_MAX_CONCURRENCY_INTEL_SHIFT 17L
#undef Java_Main_LOOP_CONTROL_DEPENDENCY_ARRAY_INTEL_SHIFT
#define Java_Main_LOOP_CONTROL_DEPENDENCY_ARRAY_INTEL_SHIFT 18L
#undef Java_Main_LOOP_CONTROL_PIPELINE_ENABLE_INTEL_SHIFT
#define Java_Main_LOOP_CONTROL_PIPELINE_ENABLE_INTEL_SHIFT 19L
#undef Java_Main_LOOP_CONTROL_LOOP_COALESCE_INTEL_SHIFT
#define Java_Main_LOOP_CONTROL_LOOP_COALESCE_INTEL_SHIFT 20L
#undef Java_Main_LOOP_CONTROL_MAX_INTERLEAVING_INTEL_SHIFT
#define Java_Main_LOOP_CONTROL_MAX_INTERLEAVING_INTEL_SHIFT 21L
#undef Java_Main_LOOP_CONTROL_SPECULATED_ITERATIONS_INTEL_SHIFT
#define Java_Main_LOOP_CONTROL_SPECULATED_ITERATIONS_INTEL_SHIFT 22L
#undef Java_Main_LOOP_CONTROL_MAX
#define Java_Main_LOOP_CONTROL_MAX 2147483647L
#undef Java_Main_LOOP_CONTROL_MASK_NONE
#define Java_Main_LOOP_CONTROL_MASK_NONE 0L
#undef Java_Main_LOOP_CONTROL_UNROLL_MASK
#define Java_Main_LOOP_CONTROL_UNROLL_MASK 1L
#undef Java_Main_LOOP_CONTROL_DONT_UNROLL_MASK
#define Java_Main_LOOP_CONTROL_DONT_UNROLL_MASK 2L
#undef Java_Main_LOOP_CONTROL_DEPENDENCY_INFINITE_MASK
#define Java_Main_LOOP_CONTROL_DEPENDENCY_INFINITE_MASK 4L
#undef Java_Main_LOOP_CONTROL_DEPENDENCY_LENGTH_MASK
#define Java_Main_LOOP_CONTROL_DEPENDENCY_LENGTH_MASK 8L
#undef Java_Main_LOOP_CONTROL_MIN_ITERATIONS_MASK
#define Java_Main_LOOP_CONTROL_MIN_ITERATIONS_MASK 16L
#undef Java_Main_LOOP_CONTROL_MAX_ITERATIONS_MASK
#define Java_Main_LOOP_CONTROL_MAX_ITERATIONS_MASK 32L
#undef Java_Main_LOOP_CONTROL_ITERATION_MULTIPLE_MASK
#define Java_Main_LOOP_CONTROL_ITERATION_MULTIPLE_MASK 64L
#undef Java_Main_LOOP_CONTROL_PEEL_COUNT_MASK
#define Java_Main_LOOP_CONTROL_PEEL_COUNT_MASK 128L
#undef Java_Main_LOOP_CONTROL_PARTIAL_COUNT_MASK
#define Java_Main_LOOP_CONTROL_PARTIAL_COUNT_MASK 256L
#undef Java_Main_LOOP_CONTROL_INITIATION_INTERVAL_INTEL_MASK
#define Java_Main_LOOP_CONTROL_INITIATION_INTERVAL_INTEL_MASK 65536L
#undef Java_Main_LOOP_CONTROL_MAX_CONCURRENCY_INTEL_MASK
#define Java_Main_LOOP_CONTROL_MAX_CONCURRENCY_INTEL_MASK 131072L
#undef Java_Main_LOOP_CONTROL_DEPENDENCY_ARRAY_INTEL_MASK
#define Java_Main_LOOP_CONTROL_DEPENDENCY_ARRAY_INTEL_MASK 262144L
#undef Java_Main_LOOP_CONTROL_PIPELINE_ENABLE_INTEL_MASK
#define Java_Main_LOOP_CONTROL_PIPELINE_ENABLE_INTEL_MASK 524288L
#undef Java_Main_LOOP_CONTROL_LOOP_COALESCE_INTEL_MASK
#define Java_Main_LOOP_CONTROL_LOOP_COALESCE_INTEL_MASK 1048576L
#undef Java_Main_LOOP_CONTROL_MAX_INTERLEAVING_INTEL_MASK
#define Java_Main_LOOP_CONTROL_MAX_INTERLEAVING_INTEL_MASK 2097152L
#undef Java_Main_LOOP_CONTROL_SPECULATED_ITERATIONS_INTEL_MASK
#define Java_Main_LOOP_CONTROL_SPECULATED_ITERATIONS_INTEL_MASK 4194304L
#undef Java_Main_FUNCTION_CONTROL_INLINE_SHIFT
#define Java_Main_FUNCTION_CONTROL_INLINE_SHIFT 0L
#undef Java_Main_FUNCTION_CONTROL_DONT_INLINE_SHIFT
#define Java_Main_FUNCTION_CONTROL_DONT_INLINE_SHIFT 1L
#undef Java_Main_FUNCTION_CONTROL_PURE_SHIFT
#define Java_Main_FUNCTION_CONTROL_PURE_SHIFT 2L
#undef Java_Main_FUNCTION_CONTROL_CONST_SHIFT
#define Java_Main_FUNCTION_CONTROL_CONST_SHIFT 3L
#undef Java_Main_FUNCTION_CONTROL_MAX
#define Java_Main_FUNCTION_CONTROL_MAX 2147483647L
#undef Java_Main_FUNCTION_CONTROL_MASK_NONE
#define Java_Main_FUNCTION_CONTROL_MASK_NONE 0L
#undef Java_Main_FUNCTION_CONTROL_INLINE_MASK
#define Java_Main_FUNCTION_CONTROL_INLINE_MASK 1L
#undef Java_Main_FUNCTION_CONTROL_DONT_INLINE_MASK
#define Java_Main_FUNCTION_CONTROL_DONT_INLINE_MASK 2L
#undef Java_Main_FUNCTION_CONTROL_PURE_MASK
#define Java_Main_FUNCTION_CONTROL_PURE_MASK 4L
#undef Java_Main_FUNCTION_CONTROL_CONST_MASK
#define Java_Main_FUNCTION_CONTROL_CONST_MASK 8L
#undef Java_Main_MEMORY_SEMANTICS_ACQUIRE_SHIFT
#define Java_Main_MEMORY_SEMANTICS_ACQUIRE_SHIFT 1L
#undef Java_Main_MEMORY_SEMANTICS_RELEASE_SHIFT
#define Java_Main_MEMORY_SEMANTICS_RELEASE_SHIFT 2L
#undef Java_Main_MEMORY_SEMANTICS_ACQUIRE_RELEASE_SHIFT
#define Java_Main_MEMORY_SEMANTICS_ACQUIRE_RELEASE_SHIFT 3L
#undef Java_Main_MEMORY_SEMANTICS_SEQUENTIALLY_CONSISTENT_SHIFT
#define Java_Main_MEMORY_SEMANTICS_SEQUENTIALLY_CONSISTENT_SHIFT 4L
#undef Java_Main_MEMORY_SEMANTICS_UNIFORM_MEMORY_SHIFT
#define Java_Main_MEMORY_SEMANTICS_UNIFORM_MEMORY_SHIFT 6L
#undef Java_Main_MEMORY_SEMANTICS_SUBGROUP_MEMORY_SHIFT
#define Java_Main_MEMORY_SEMANTICS_SUBGROUP_MEMORY_SHIFT 7L
#undef Java_Main_MEMORY_SEMANTICS_WORKGROUP_MEMORY_SHIFT
#define Java_Main_MEMORY_SEMANTICS_WORKGROUP_MEMORY_SHIFT 8L
#undef Java_Main_MEMORY_SEMANTICS_CROSS_WORKGROUP_MEMORY_SHIFT
#define Java_Main_MEMORY_SEMANTICS_CROSS_WORKGROUP_MEMORY_SHIFT 9L
#undef Java_Main_MEMORY_SEMANTICS_ATOMIC_COUNTER_MEMORY_SHIFT
#define Java_Main_MEMORY_SEMANTICS_ATOMIC_COUNTER_MEMORY_SHIFT 10L
#undef Java_Main_MEMORY_SEMANTICS_IMAGEMEMORY_SHIFT
#define Java_Main_MEMORY_SEMANTICS_IMAGEMEMORY_SHIFT 11L
#undef Java_Main_MEMORY_SEMANTICS_OUTPUT_MEMORY_SHIFT
#define Java_Main_MEMORY_SEMANTICS_OUTPUT_MEMORY_SHIFT 12L
#undef Java_Main_MEMORY_SEMANTICS_OUTPUT_MEMORY_KHR_SHIFT
#define Java_Main_MEMORY_SEMANTICS_OUTPUT_MEMORY_KHR_SHIFT 12L
#undef Java_Main_MEMORY_SEMANTICS_MAKE_AVAILABLE_SHIFT
#define Java_Main_MEMORY_SEMANTICS_MAKE_AVAILABLE_SHIFT 13L
#undef Java_Main_MEMORY_SEMANTICS_MAKE_AVAILABLE_KHR_SHIFT
#define Java_Main_MEMORY_SEMANTICS_MAKE_AVAILABLE_KHR_SHIFT 13L
#undef Java_Main_MEMORY_SEMANTICS_MAKE_VISIBLE_SHIFT
#define Java_Main_MEMORY_SEMANTICS_MAKE_VISIBLE_SHIFT 14L
#undef Java_Main_MEMORY_SEMANTICS_MAKE_VISIBLE_KHR_SHIFT
#define Java_Main_MEMORY_SEMANTICS_MAKE_VISIBLE_KHR_SHIFT 14L
#undef Java_Main_MEMORY_SEMANTICS_VOLATILE_SHIFT
#define Java_Main_MEMORY_SEMANTICS_VOLATILE_SHIFT 15L
#undef Java_Main_MEMORY_SEMANTICS_MAX
#define Java_Main_MEMORY_SEMANTICS_MAX 2147483647L
#undef Java_Main_MEMORY_SEMANTICS_MASK_NONE
#define Java_Main_MEMORY_SEMANTICS_MASK_NONE 0L
#undef Java_Main_MEMORY_SEMANTICS_ACQUIRE_MASK
#define Java_Main_MEMORY_SEMANTICS_ACQUIRE_MASK 2L
#undef Java_Main_MEMORY_SEMANTICS_RELEASE_MASK
#define Java_Main_MEMORY_SEMANTICS_RELEASE_MASK 4L
#undef Java_Main_MEMORY_SEMANTICS_ACQUIRE_RELEASE_MASK
#define Java_Main_MEMORY_SEMANTICS_ACQUIRE_RELEASE_MASK 8L
#undef Java_Main_MEMORY_SEMANTICS_SEQUENTIALLY_CONSISTENT_MASK
#define Java_Main_MEMORY_SEMANTICS_SEQUENTIALLY_CONSISTENT_MASK 16L
#undef Java_Main_MEMORY_SEMANTICS_UNIFORM_MEMORY_MASK
#define Java_Main_MEMORY_SEMANTICS_UNIFORM_MEMORY_MASK 64L
#undef Java_Main_MEMORY_SEMANTICS_SUBGROUP_MEMORY_MASK
#define Java_Main_MEMORY_SEMANTICS_SUBGROUP_MEMORY_MASK 128L
#undef Java_Main_MEMORY_SEMANTICS_WORKGROUP_MEMORY_MASK
#define Java_Main_MEMORY_SEMANTICS_WORKGROUP_MEMORY_MASK 256L
#undef Java_Main_MEMORY_SEMANTICS_CROSS_WORKGROUP_MEMORY_MASK
#define Java_Main_MEMORY_SEMANTICS_CROSS_WORKGROUP_MEMORY_MASK 512L
#undef Java_Main_MEMORY_SEMANTICS_ATOMIC_COUNTER_MEMORY_MASK
#define Java_Main_MEMORY_SEMANTICS_ATOMIC_COUNTER_MEMORY_MASK 1024L
#undef Java_Main_MEMORY_SEMANTICS_IMAGE_MEMORY_MASK
#define Java_Main_MEMORY_SEMANTICS_IMAGE_MEMORY_MASK 2048L
#undef Java_Main_MEMORY_SEMANTICS_OUTPUT_MEMORY_MASK
#define Java_Main_MEMORY_SEMANTICS_OUTPUT_MEMORY_MASK 4096L
#undef Java_Main_MEMORY_SEMANTICS_OUTPUT_MEMORY_KHR_MASK
#define Java_Main_MEMORY_SEMANTICS_OUTPUT_MEMORY_KHR_MASK 4096L
#undef Java_Main_MEMORY_SEMANTICS_MAKE_AVAILABLE_MASK
#define Java_Main_MEMORY_SEMANTICS_MAKE_AVAILABLE_MASK 8192L
#undef Java_Main_MEMORY_SEMANTICS_MAKE_AVAILABLE_KHR_MASK
#define Java_Main_MEMORY_SEMANTICS_MAKE_AVAILABLE_KHR_MASK 8192L
#undef Java_Main_MEMORY_SEMANTICS_MAKE_VISIBLE_MASK
#define Java_Main_MEMORY_SEMANTICS_MAKE_VISIBLE_MASK 16384L
#undef Java_Main_MEMORY_SEMANTICS_MAKE_VISIBLE_KHR_MASK
#define Java_Main_MEMORY_SEMANTICS_MAKE_VISIBLE_KHR_MASK 16384L
#undef Java_Main_MEMORY_SEMANTICS_VOLATILE_MASK
#define Java_Main_MEMORY_SEMANTICS_VOLATILE_MASK 32768L
#undef Java_Main_MEMORY_ACCESS_VOLATILE_SHIFT
#define Java_Main_MEMORY_ACCESS_VOLATILE_SHIFT 0L
#undef Java_Main_MEMORY_ACCESS_ALIGNED_SHIFT
#define Java_Main_MEMORY_ACCESS_ALIGNED_SHIFT 1L
#undef Java_Main_MEMORY_ACCESS_NONTEMPORAL_SHIFT
#define Java_Main_MEMORY_ACCESS_NONTEMPORAL_SHIFT 2L
#undef Java_Main_MEMORY_ACCESS_MAKE_POINTER_AVAILABLE_SHIFT
#define Java_Main_MEMORY_ACCESS_MAKE_POINTER_AVAILABLE_SHIFT 3L
#undef Java_Main_MEMORY_ACCESS_MAKE_POINTER_AVAILABLE_KHR_SHIFT
#define Java_Main_MEMORY_ACCESS_MAKE_POINTER_AVAILABLE_KHR_SHIFT 3L
#undef Java_Main_MEMORY_ACCESS_MAKE_POINTER_VISIBLE_SHIFT
#define Java_Main_MEMORY_ACCESS_MAKE_POINTER_VISIBLE_SHIFT 4L
#undef Java_Main_MEMORY_ACCESS_MAKE_POINTER_VISIBLE_KHR_SHIFT
#define Java_Main_MEMORY_ACCESS_MAKE_POINTER_VISIBLE_KHR_SHIFT 4L
#undef Java_Main_MEMORY_ACCESS_NON_PRIVATE_POINTER_SHIFT
#define Java_Main_MEMORY_ACCESS_NON_PRIVATE_POINTER_SHIFT 5L
#undef Java_Main_MEMORY_ACCESS_NON_PRIVATE_POINTER_KHR_SHIFT
#define Java_Main_MEMORY_ACCESS_NON_PRIVATE_POINTER_KHR_SHIFT 5L
#undef Java_Main_MEMORY_ACCESS_MAX
#define Java_Main_MEMORY_ACCESS_MAX 2147483647L
#undef Java_Main_MEMORY_ACCESS_MASK_NONE
#define Java_Main_MEMORY_ACCESS_MASK_NONE 0L
#undef Java_Main_MEMORY_ACCESS_VOLATILE_MASK
#define Java_Main_MEMORY_ACCESS_VOLATILE_MASK 1L
#undef Java_Main_MEMORY_ACCESS_ALIGNED_MASK
#define Java_Main_MEMORY_ACCESS_ALIGNED_MASK 2L
#undef Java_Main_MEMORY_ACCESS_NONTEMPORAL_MASK
#define Java_Main_MEMORY_ACCESS_NONTEMPORAL_MASK 4L
#undef Java_Main_MEMORY_ACCESS_MAKE_POINTER_AVAILABLE_MASK
#define Java_Main_MEMORY_ACCESS_MAKE_POINTER_AVAILABLE_MASK 8L
#undef Java_Main_MEMORY_ACCESS_MAKE_POINTER_AVAILABLE_KHR_MASK
#define Java_Main_MEMORY_ACCESS_MAKE_POINTER_AVAILABLE_KHR_MASK 8L
#undef Java_Main_MEMORY_ACCESS_MAKE_POINTER_VISIBLE_MASK
#define Java_Main_MEMORY_ACCESS_MAKE_POINTER_VISIBLE_MASK 16L
#undef Java_Main_MEMORY_ACCESS_MAKE_POINTER_VISIBLE_KHR_MASK
#define Java_Main_MEMORY_ACCESS_MAKE_POINTER_VISIBLE_KHR_MASK 16L
#undef Java_Main_MEMORY_ACCESS_NON_PRIVATE_POINTER_MASK
#define Java_Main_MEMORY_ACCESS_NON_PRIVATE_POINTER_MASK 32L
#undef Java_Main_MEMORY_ACCESS_NON_PRIVATE_POINTER_KHR_MASK
#define Java_Main_MEMORY_ACCESS_NON_PRIVATE_POINTER_KHR_MASK 32L
#undef Java_Main_SCOPE_CROSS_DEVICE
#define Java_Main_SCOPE_CROSS_DEVICE 0L
#undef Java_Main_SCOPE_DEVICE
#define Java_Main_SCOPE_DEVICE 1L
#undef Java_Main_SCOPE_WORKGROUP
#define Java_Main_SCOPE_WORKGROUP 2L
#undef Java_Main_SCOPE_SUBGROUP
#define Java_Main_SCOPE_SUBGROUP 3L
#undef Java_Main_SCOPE_INVOCATION
#define Java_Main_SCOPE_INVOCATION 4L
#undef Java_Main_SCOPE_QUEUE_FAMILY
#define Java_Main_SCOPE_QUEUE_FAMILY 5L
#undef Java_Main_SCOPE_QUEUE_FAMILY_KHR
#define Java_Main_SCOPE_QUEUE_FAMILY_KHR 5L
#undef Java_Main_SCOPE_SHADER_CALL_KHR
#define Java_Main_SCOPE_SHADER_CALL_KHR 6L
#undef Java_Main_SCOPE_MAX
#define Java_Main_SCOPE_MAX 2147483647L
#undef Java_Main_GROUP_OPERATION_REDUCE
#define Java_Main_GROUP_OPERATION_REDUCE 0L
#undef Java_Main_GROUP_OPERATION_INCLUSIVE_SCAN
#define Java_Main_GROUP_OPERATION_INCLUSIVE_SCAN 1L
#undef Java_Main_GROUP_OPERATION_EXCLUSIVE_SCAN
#define Java_Main_GROUP_OPERATION_EXCLUSIVE_SCAN 2L
#undef Java_Main_GROUP_OPERATION_CLUSTERED_REDUCE
#define Java_Main_GROUP_OPERATION_CLUSTERED_REDUCE 3L
#undef Java_Main_GROUP_OPERATION_PARTITIONED_REDUCE_NV
#define Java_Main_GROUP_OPERATION_PARTITIONED_REDUCE_NV 6L
#undef Java_Main_GROUP_OPERATION_PARTITIONED_INCLUSIVE_SCAN_NV
#define Java_Main_GROUP_OPERATION_PARTITIONED_INCLUSIVE_SCAN_NV 7L
#undef Java_Main_GROUP_OPERATION_PARTITIONED_EXCLUSIVE_SCAN_NV
#define Java_Main_GROUP_OPERATION_PARTITIONED_EXCLUSIVE_SCAN_NV 8L
#undef Java_Main_GROUP_OPERATION_MAX
#define Java_Main_GROUP_OPERATION_MAX 2147483647L
#undef Java_Main_KERNEL_ENQUEUE_FLAGS_NO_WAIT
#define Java_Main_KERNEL_ENQUEUE_FLAGS_NO_WAIT 0L
#undef Java_Main_KERNEL_ENQUEUE_FLAGS_WAIT_KERNEL
#define Java_Main_KERNEL_ENQUEUE_FLAGS_WAIT_KERNEL 1L
#undef Java_Main_KERNEL_ENQUEUE_FLAGS_WAIT_WORK_GROUP
#define Java_Main_KERNEL_ENQUEUE_FLAGS_WAIT_WORK_GROUP 2L
#undef Java_Main_KERNEL_ENQUEUE_FLAGS_MAX
#define Java_Main_KERNEL_ENQUEUE_FLAGS_MAX 2147483647L
#undef Java_Main_KERNEL_PROFILING_INFO_CMD_EXEC_TIME_SHIFT
#define Java_Main_KERNEL_PROFILING_INFO_CMD_EXEC_TIME_SHIFT 0L
#undef Java_Main_KERNEL_PROFILING_INFO_MAX
#define Java_Main_KERNEL_PROFILING_INFO_MAX 2147483647L
#undef Java_Main_KERNEL_PROFILING_INFO_MASK_NONE
#define Java_Main_KERNEL_PROFILING_INFO_MASK_NONE 0L
#undef Java_Main_KERNEL_PROFILING_INFO_CMD_EXEC_TIME_MASK
#define Java_Main_KERNEL_PROFILING_INFO_CMD_EXEC_TIME_MASK 1L
#undef Java_Main_CAPABILITY_MATRIX
#define Java_Main_CAPABILITY_MATRIX 0L
#undef Java_Main_CAPABILITY_SHADER
#define Java_Main_CAPABILITY_SHADER 1L
#undef Java_Main_CAPABILITY_GEOMETRY
#define Java_Main_CAPABILITY_GEOMETRY 2L
#undef Java_Main_CAPABILITY_TESSELLATION
#define Java_Main_CAPABILITY_TESSELLATION 3L
#undef Java_Main_CAPABILITY_ADDRESSES
#define Java_Main_CAPABILITY_ADDRESSES 4L
#undef Java_Main_CAPABILITY_LINKAGE
#define Java_Main_CAPABILITY_LINKAGE 5L
#undef Java_Main_CAPABILITY_KERNEL
#define Java_Main_CAPABILITY_KERNEL 6L
#undef Java_Main_CAPABILITY_VECTOR16
#define Java_Main_CAPABILITY_VECTOR16 7L
#undef Java_Main_CAPABILITY_FLOAT16_BUFFER
#define Java_Main_CAPABILITY_FLOAT16_BUFFER 8L
#undef Java_Main_CAPABILITY_FLOAT16
#define Java_Main_CAPABILITY_FLOAT16 9L
#undef Java_Main_CAPABILITY_FLOAT64
#define Java_Main_CAPABILITY_FLOAT64 10L
#undef Java_Main_CAPABILITY_INT64
#define Java_Main_CAPABILITY_INT64 11L
#undef Java_Main_CAPABILITY_INT64_ATOMICS
#define Java_Main_CAPABILITY_INT64_ATOMICS 12L
#undef Java_Main_CAPABILITY_IMAGE_BASIC
#define Java_Main_CAPABILITY_IMAGE_BASIC 13L
#undef Java_Main_CAPABILITY_IMAGE_READ_WRITE
#define Java_Main_CAPABILITY_IMAGE_READ_WRITE 14L
#undef Java_Main_CAPABILITY_IMAGE_MIPMAP
#define Java_Main_CAPABILITY_IMAGE_MIPMAP 15L
#undef Java_Main_CAPABILITY_PIPES
#define Java_Main_CAPABILITY_PIPES 17L
#undef Java_Main_CAPABILITY_GROUPS
#define Java_Main_CAPABILITY_GROUPS 18L
#undef Java_Main_CAPABILITY_DEVICE_ENQUEUE
#define Java_Main_CAPABILITY_DEVICE_ENQUEUE 19L
#undef Java_Main_CAPABILITY_LITERAL_SAMPLER
#define Java_Main_CAPABILITY_LITERAL_SAMPLER 20L
#undef Java_Main_CAPABILITY_ATOMIC_STORAGE
#define Java_Main_CAPABILITY_ATOMIC_STORAGE 21L
#undef Java_Main_CAPABILITY_INT16
#define Java_Main_CAPABILITY_INT16 22L
#undef Java_Main_CAPABILITY_TESSELLATION_POINT_SIZE
#define Java_Main_CAPABILITY_TESSELLATION_POINT_SIZE 23L
#undef Java_Main_CAPABILITY_GEOMETRY_POINT_SIZE
#define Java_Main_CAPABILITY_GEOMETRY_POINT_SIZE 24L
#undef Java_Main_CAPABILITY_IMAGE_GATHER_EXTENDED
#define Java_Main_CAPABILITY_IMAGE_GATHER_EXTENDED 25L
#undef Java_Main_CAPABILITY_STORAGE_IMAGE_MULTISAMPLE
#define Java_Main_CAPABILITY_STORAGE_IMAGE_MULTISAMPLE 27L
#undef Java_Main_CAPABILITY_UNIFORM_BUFFER_ARRAY_DYNAMIC_INDEXING
#define Java_Main_CAPABILITY_UNIFORM_BUFFER_ARRAY_DYNAMIC_INDEXING 28L
#undef Java_Main_CAPABILITY_SAMPLED_IMAGE_ARRAY_DYNAMIC_INDEXING
#define Java_Main_CAPABILITY_SAMPLED_IMAGE_ARRAY_DYNAMIC_INDEXING 29L
#undef Java_Main_CAPABILITY_STORAGE_BUFFER_ARRAY_DYNAMIC_INDEXING
#define Java_Main_CAPABILITY_STORAGE_BUFFER_ARRAY_DYNAMIC_INDEXING 30L
#undef Java_Main_CAPABILITY_STORAGE_IMAGE_ARRAY_DYNAMIC_INDEXING
#define Java_Main_CAPABILITY_STORAGE_IMAGE_ARRAY_DYNAMIC_INDEXING 31L
#undef Java_Main_CAPABILITY_CLIP_DISTANCE
#define Java_Main_CAPABILITY_CLIP_DISTANCE 32L
#undef Java_Main_CAPABILITY_CULL_DISTANCE
#define Java_Main_CAPABILITY_CULL_DISTANCE 33L
#undef Java_Main_CAPABILITY_IMAGE_CUBE_ARRAY
#define Java_Main_CAPABILITY_IMAGE_CUBE_ARRAY 34L
#undef Java_Main_CAPABILITY_SAMPLE_RATE_SHADING
#define Java_Main_CAPABILITY_SAMPLE_RATE_SHADING 35L
#undef Java_Main_CAPABILITY_IMAGE_RECT
#define Java_Main_CAPABILITY_IMAGE_RECT 36L
#undef Java_Main_CAPABILITY_SAMPLED_RECT
#define Java_Main_CAPABILITY_SAMPLED_RECT 37L
#undef Java_Main_CAPABILITY_GENERIC_POINTER
#define Java_Main_CAPABILITY_GENERIC_POINTER 38L
#undef Java_Main_CAPABILITY_INT8
#define Java_Main_CAPABILITY_INT8 39L
#undef Java_Main_CAPABILITY_INPUT_ATTACHMENT
#define Java_Main_CAPABILITY_INPUT_ATTACHMENT 40L
#undef Java_Main_CAPABILITY_SPARSE_RESIDENCY
#define Java_Main_CAPABILITY_SPARSE_RESIDENCY 41L
#undef Java_Main_CAPABILITY_MIN_LOD
#define Java_Main_CAPABILITY_MIN_LOD 42L
#undef Java_Main_CAPABILITY_SAMPLED1D
#define Java_Main_CAPABILITY_SAMPLED1D 43L
#undef Java_Main_CAPABILITY_IMAGE1D
#define Java_Main_CAPABILITY_IMAGE1D 44L
#undef Java_Main_CAPABILITY_SAMPLED_CUBE_ARRAY
#define Java_Main_CAPABILITY_SAMPLED_CUBE_ARRAY 45L
#undef Java_Main_CAPABILITY_SAMPLED_BUFFER
#define Java_Main_CAPABILITY_SAMPLED_BUFFER 46L
#undef Java_Main_CAPABILITY_IMAGE_BUFFER
#define Java_Main_CAPABILITY_IMAGE_BUFFER 47L
#undef Java_Main_CAPABILITY_IMAGE_MS_ARRAY
#define Java_Main_CAPABILITY_IMAGE_MS_ARRAY 48L
#undef Java_Main_CAPABILITY_STORAGE_IMAGE_EXTENDED_FORMATS
#define Java_Main_CAPABILITY_STORAGE_IMAGE_EXTENDED_FORMATS 49L
#undef Java_Main_CAPABILITY_IMAGE_QUERY
#define Java_Main_CAPABILITY_IMAGE_QUERY 50L
#undef Java_Main_CAPABILITY_DERIVATIVE_CONTROL
#define Java_Main_CAPABILITY_DERIVATIVE_CONTROL 51L
#undef Java_Main_CAPABILITY_INTERPOLATION_FUNCTION
#define Java_Main_CAPABILITY_INTERPOLATION_FUNCTION 52L
#undef Java_Main_CAPABILITY_TRANSFORM_FEEDBACK
#define Java_Main_CAPABILITY_TRANSFORM_FEEDBACK 53L
#undef Java_Main_CAPABILITY_GEOMETRY_STREAMS
#define Java_Main_CAPABILITY_GEOMETRY_STREAMS 54L
#undef Java_Main_CAPABILITY_STORAGE_IMAGE_READ_WITHOUT_FORMAT
#define Java_Main_CAPABILITY_STORAGE_IMAGE_READ_WITHOUT_FORMAT 55L
#undef Java_Main_CAPABILITY_STORAGE_IMAGE_WRITE_WITHOUT_FORMAT
#define Java_Main_CAPABILITY_STORAGE_IMAGE_WRITE_WITHOUT_FORMAT 56L
#undef Java_Main_CAPABILITY_MULTI_VIEWPORT
#define Java_Main_CAPABILITY_MULTI_VIEWPORT 57L
#undef Java_Main_CAPABILITY_SUBGROUP_DISPATCH
#define Java_Main_CAPABILITY_SUBGROUP_DISPATCH 58L
#undef Java_Main_CAPABILITY_NAMED_BARRIER
#define Java_Main_CAPABILITY_NAMED_BARRIER 59L
#undef Java_Main_CAPABILITY_PIPE_STORAGE
#define Java_Main_CAPABILITY_PIPE_STORAGE 60L
#undef Java_Main_CAPABILITY_GROUP_NON_UNIFORM
#define Java_Main_CAPABILITY_GROUP_NON_UNIFORM 61L
#undef Java_Main_CAPABILITY_GROUP_NON_UNIFORM_VOTE
#define Java_Main_CAPABILITY_GROUP_NON_UNIFORM_VOTE 62L
#undef Java_Main_CAPABILITY_GROUP_NON_UNIFORM_ARITHMETIC
#define Java_Main_CAPABILITY_GROUP_NON_UNIFORM_ARITHMETIC 63L
#undef Java_Main_CAPABILITY_GROUP_NON_UNIFORM_BALLOT
#define Java_Main_CAPABILITY_GROUP_NON_UNIFORM_BALLOT 64L
#undef Java_Main_CAPABILITY_GROUP_NON_UNIFORM_SHUFFLE
#define Java_Main_CAPABILITY_GROUP_NON_UNIFORM_SHUFFLE 65L
#undef Java_Main_CAPABILITY_GROUP_NON_UNIFORM_SHUFFLE_RELATIVE
#define Java_Main_CAPABILITY_GROUP_NON_UNIFORM_SHUFFLE_RELATIVE 66L
#undef Java_Main_CAPABILITY_GROUP_NON_UNIFORM_CLUSTERED
#define Java_Main_CAPABILITY_GROUP_NON_UNIFORM_CLUSTERED 67L
#undef Java_Main_CAPABILITY_GROUP_NON_UNIFORM_QUAD
#define Java_Main_CAPABILITY_GROUP_NON_UNIFORM_QUAD 68L
#undef Java_Main_CAPABILITY_SHADER_LAYER
#define Java_Main_CAPABILITY_SHADER_LAYER 69L
#undef Java_Main_CAPABILITY_SHADER_VIEWPORT_INDEX
#define Java_Main_CAPABILITY_SHADER_VIEWPORT_INDEX 70L
#undef Java_Main_CAPABILITY_SUBGROUP_BALLOT_KHR
#define Java_Main_CAPABILITY_SUBGROUP_BALLOT_KHR 4423L
#undef Java_Main_CAPABILITY_DRAW_PARAMETERS
#define Java_Main_CAPABILITY_DRAW_PARAMETERS 4427L
#undef Java_Main_CAPABILITY_SUBGROUP_VOTE_KHR
#define Java_Main_CAPABILITY_SUBGROUP_VOTE_KHR 4431L
#undef Java_Main_CAPABILITY_STORAGE_BUFFER_16BIT_ACCESS
#define Java_Main_CAPABILITY_STORAGE_BUFFER_16BIT_ACCESS 4433L
#undef Java_Main_CAPABILITY_STORAGE_UNIFORM_BUFFER_BLOCK_16
#define Java_Main_CAPABILITY_STORAGE_UNIFORM_BUFFER_BLOCK_16 4433L
#undef Java_Main_CAPABILITY_STORAGE_UNIFORM_16
#define Java_Main_CAPABILITY_STORAGE_UNIFORM_16 4434L
#undef Java_Main_CAPABILITY_UNIFORM_AND_STORAGE_BUFFER_16BIT_ACCESS
#define Java_Main_CAPABILITY_UNIFORM_AND_STORAGE_BUFFER_16BIT_ACCESS 4434L
#undef Java_Main_CAPABILITY_STORAGE_PUSH_CONSTANT_16
#define Java_Main_CAPABILITY_STORAGE_PUSH_CONSTANT_16 4435L
#undef Java_Main_CAPABILITY_STORAGE_INPUT_OUTPUT_16
#define Java_Main_CAPABILITY_STORAGE_INPUT_OUTPUT_16 4436L
#undef Java_Main_CAPABILITY_DEVICE_GROUP
#define Java_Main_CAPABILITY_DEVICE_GROUP 4437L
#undef Java_Main_CAPABILITY_MULTI_VIEW
#define Java_Main_CAPABILITY_MULTI_VIEW 4439L
#undef Java_Main_CAPABILITY_VARIABLE_POINTERS_STORAGE_BUFFER
#define Java_Main_CAPABILITY_VARIABLE_POINTERS_STORAGE_BUFFER 4441L
#undef Java_Main_CAPABILITY_VARIABLE_POINTERS
#define Java_Main_CAPABILITY_VARIABLE_POINTERS 4442L
#undef Java_Main_CAPABILITY_ATOMIC_STORAGE_OPS
#define Java_Main_CAPABILITY_ATOMIC_STORAGE_OPS 4445L
#undef Java_Main_CAPABILITY_SAMPLE_MASK_POST_DEPTH_COVERAGE
#define Java_Main_CAPABILITY_SAMPLE_MASK_POST_DEPTH_COVERAGE 4447L
#undef Java_Main_CAPABILITY_STORAGE_BUFFER_8BIT_ACCESS
#define Java_Main_CAPABILITY_STORAGE_BUFFER_8BIT_ACCESS 4448L
#undef Java_Main_CAPABILITY_UNIFORM_AND_STORAGE_BUFFER_8BIT_ACCESS
#define Java_Main_CAPABILITY_UNIFORM_AND_STORAGE_BUFFER_8BIT_ACCESS 4449L
#undef Java_Main_CAPABILITY_STORAGE_PUSH_CONSTANT_8
#define Java_Main_CAPABILITY_STORAGE_PUSH_CONSTANT_8 4450L
#undef Java_Main_CAPABILITY_DENORM_PRESERVE
#define Java_Main_CAPABILITY_DENORM_PRESERVE 4464L
#undef Java_Main_CAPABILITY_DENORM_FLUSH_TO_ZERO
#define Java_Main_CAPABILITY_DENORM_FLUSH_TO_ZERO 4465L
#undef Java_Main_CAPABILITY_SIGNED_ZERO_INF_NAN_PRESERVE
#define Java_Main_CAPABILITY_SIGNED_ZERO_INF_NAN_PRESERVE 4466L
#undef Java_Main_CAPABILITY_ROUNDING_MODE_RTE
#define Java_Main_CAPABILITY_ROUNDING_MODE_RTE 4467L
#undef Java_Main_CAPABILITY_ROUNDING_MODE_RTZ
#define Java_Main_CAPABILITY_ROUNDING_MODE_RTZ 4468L
#undef Java_Main_CAPABILITY_RAY_QUERY_PROVISIONAL_KHR
#define Java_Main_CAPABILITY_RAY_QUERY_PROVISIONAL_KHR 4471L
#undef Java_Main_CAPABILITY_RAY_TRAVERSAL_PRIMITIVE_CULLING_PROVISIONAL_KHR
#define Java_Main_CAPABILITY_RAY_TRAVERSAL_PRIMITIVE_CULLING_PROVISIONAL_KHR 4478L
#undef Java_Main_CAPABILITY_FLOAT16_IMAGE_AMD
#define Java_Main_CAPABILITY_FLOAT16_IMAGE_AMD 5008L
#undef Java_Main_CAPABILITY_IMAGE_GATHER_BIAS_LOD_AMD
#define Java_Main_CAPABILITY_IMAGE_GATHER_BIAS_LOD_AMD 5009L
#undef Java_Main_CAPABILITY_FRAGMENT_MASK_AMD
#define Java_Main_CAPABILITY_FRAGMENT_MASK_AMD 5010L
#undef Java_Main_CAPABILITY_STENCIL_EXPORT_EXT
#define Java_Main_CAPABILITY_STENCIL_EXPORT_EXT 5013L
#undef Java_Main_CAPABILITY_IMAGE_READ_WRITE_LOD_AMD
#define Java_Main_CAPABILITY_IMAGE_READ_WRITE_LOD_AMD 5015L
#undef Java_Main_CAPABILITY_SHADER_CLOCK_KHR
#define Java_Main_CAPABILITY_SHADER_CLOCK_KHR 5055L
#undef Java_Main_CAPABILITY_SAMPLE_MASK_OVERRIDE_COVERAGE_NV
#define Java_Main_CAPABILITY_SAMPLE_MASK_OVERRIDE_COVERAGE_NV 5249L
#undef Java_Main_CAPABILITY_GEOMETRY_SHADER_PASSTHROUGH_NV
#define Java_Main_CAPABILITY_GEOMETRY_SHADER_PASSTHROUGH_NV 5251L
#undef Java_Main_CAPABILITY_SHADER_VIEWPORT_INDEX_LAYER_EXT
#define Java_Main_CAPABILITY_SHADER_VIEWPORT_INDEX_LAYER_EXT 5254L
#undef Java_Main_CAPABILITY_SHADER_VIEWPORT_INDEX_LAYER_NV
#define Java_Main_CAPABILITY_SHADER_VIEWPORT_INDEX_LAYER_NV 5254L
#undef Java_Main_CAPABILITY_SHADER_VIEWPORT_MASK_NV
#define Java_Main_CAPABILITY_SHADER_VIEWPORT_MASK_NV 5255L
#undef Java_Main_CAPABILITY_SHADER_STEREO_VIEW_NV
#define Java_Main_CAPABILITY_SHADER_STEREO_VIEW_NV 5259L
#undef Java_Main_CAPABILITY_PER_VIEW_ATTRIBUTES_NV
#define Java_Main_CAPABILITY_PER_VIEW_ATTRIBUTES_NV 5260L
#undef Java_Main_CAPABILITY_FRAGMENT_FULLY_COVERED_EXT
#define Java_Main_CAPABILITY_FRAGMENT_FULLY_COVERED_EXT 5265L
#undef Java_Main_CAPABILITY_MESH_SHADING_NV
#define Java_Main_CAPABILITY_MESH_SHADING_NV 5266L
#undef Java_Main_CAPABILITY_IMAGE_FOOTPRINT_NV
#define Java_Main_CAPABILITY_IMAGE_FOOTPRINT_NV 5282L
#undef Java_Main_CAPABILITY_FRAGMENT_BARYCENTRIC_NV
#define Java_Main_CAPABILITY_FRAGMENT_BARYCENTRIC_NV 5284L
#undef Java_Main_CAPABILITY_COMPUTE_DERIVATIVE_GROUP_QUADS_NV
#define Java_Main_CAPABILITY_COMPUTE_DERIVATIVE_GROUP_QUADS_NV 5288L
#undef Java_Main_CAPABILITY_FRAGMENT_DENSITY_EXT
#define Java_Main_CAPABILITY_FRAGMENT_DENSITY_EXT 5291L
#undef Java_Main_CAPABILITY_SHADING_RATE_NV
#define Java_Main_CAPABILITY_SHADING_RATE_NV 5291L
#undef Java_Main_CAPABILITY_GROUP_NON_UNIFORM_PARTITIONED_NV
#define Java_Main_CAPABILITY_GROUP_NON_UNIFORM_PARTITIONED_NV 5297L
#undef Java_Main_CAPABILITY_SHADER_NON_UNIFORM
#define Java_Main_CAPABILITY_SHADER_NON_UNIFORM 5301L
#undef Java_Main_CAPABILITY_SHADER_NON_UNIFORM_EXT
#define Java_Main_CAPABILITY_SHADER_NON_UNIFORM_EXT 5301L
#undef Java_Main_CAPABILITY_RUNTIME_DESCRIPTOR_ARRAY
#define Java_Main_CAPABILITY_RUNTIME_DESCRIPTOR_ARRAY 5302L
#undef Java_Main_CAPABILITY_RUNTIME_DESCRIPTOR_ARRAY_EXT
#define Java_Main_CAPABILITY_RUNTIME_DESCRIPTOR_ARRAY_EXT 5302L
#undef Java_Main_CAPABILITY_INPUT_ATTACHMENT_ARRAY_DYNAMIC_INDEXING
#define Java_Main_CAPABILITY_INPUT_ATTACHMENT_ARRAY_DYNAMIC_INDEXING 5303L
#undef Java_Main_CAPABILITY_INPUT_ATTACHMENT_ARRAY_DYNAMIC_INDEXING_EXT
#define Java_Main_CAPABILITY_INPUT_ATTACHMENT_ARRAY_DYNAMIC_INDEXING_EXT 5303L
#undef Java_Main_CAPABILITY_UNIFORM_TEXEL_BUFFER_ARRAY_DYNAMIC_INDEXING
#define Java_Main_CAPABILITY_UNIFORM_TEXEL_BUFFER_ARRAY_DYNAMIC_INDEXING 5304L
#undef Java_Main_CAPABILITY_UNIFORM_TEXEL_BUFFER_ARRAY_DYNAMIC_INDEXING_EXT
#define Java_Main_CAPABILITY_UNIFORM_TEXEL_BUFFER_ARRAY_DYNAMIC_INDEXING_EXT 5304L
#undef Java_Main_CAPABILITY_STORAGE_TEXEL_BUFFER_ARRAY_DYNAMIC_INDEXING
#define Java_Main_CAPABILITY_STORAGE_TEXEL_BUFFER_ARRAY_DYNAMIC_INDEXING 5305L
#undef Java_Main_CAPABILITY_STORAGE_TEXEL_BUFFER_ARRAY_DYNAMIC_INDEXING_EXT
#define Java_Main_CAPABILITY_STORAGE_TEXEL_BUFFER_ARRAY_DYNAMIC_INDEXING_EXT 5305L
#undef Java_Main_CAPABILITY_UNIFORM_BUFFER_ARRAY_NON_UNIFORM_INDEXING
#define Java_Main_CAPABILITY_UNIFORM_BUFFER_ARRAY_NON_UNIFORM_INDEXING 5306L
#undef Java_Main_CAPABILITY_UNIFORM_BUFFER_ARRAY_NON_UNIFORM_INDEXING_EXT
#define Java_Main_CAPABILITY_UNIFORM_BUFFER_ARRAY_NON_UNIFORM_INDEXING_EXT 5306L
#undef Java_Main_CAPABILITY_SAMPLED_IMAGE_ARRAY_NON_UNIFORM_INDEXING
#define Java_Main_CAPABILITY_SAMPLED_IMAGE_ARRAY_NON_UNIFORM_INDEXING 5307L
#undef Java_Main_CAPABILITY_SAMPLED_IMAGE_ARRAY_NON_UNIFORM_INDEXING_EXT
#define Java_Main_CAPABILITY_SAMPLED_IMAGE_ARRAY_NON_UNIFORM_INDEXING_EXT 5307L
#undef Java_Main_CAPABILITY_STORAGE_BUFFER_ARRAY_NON_UNIFORM_INDEXING
#define Java_Main_CAPABILITY_STORAGE_BUFFER_ARRAY_NON_UNIFORM_INDEXING 5308L
#undef Java_Main_CAPABILITY_STORAGE_BUFFER_ARRAY_NON_UNIFORM_INDEXING_EXT
#define Java_Main_CAPABILITY_STORAGE_BUFFER_ARRAY_NON_UNIFORM_INDEXING_EXT 5308L
#undef Java_Main_CAPABILITY_STORAGE_IMAGE_ARRAY_NON_UNIFORM_INDEXING
#define Java_Main_CAPABILITY_STORAGE_IMAGE_ARRAY_NON_UNIFORM_INDEXING 5309L
#undef Java_Main_CAPABILITY_STORAGE_IMAGE_ARRAY_NON_UNIFORM_INDEXING_EXT
#define Java_Main_CAPABILITY_STORAGE_IMAGE_ARRAY_NON_UNIFORM_INDEXING_EXT 5309L
#undef Java_Main_CAPABILITY_INPUT_ATTACHMENT_ARRAY_NON_UNIFORM_INDEXING
#define Java_Main_CAPABILITY_INPUT_ATTACHMENT_ARRAY_NON_UNIFORM_INDEXING 5310L
#undef Java_Main_CAPABILITY_INPUT_ATTACHMENT_ARRAY_NON_UNIFORM_INDEXING_EXT
#define Java_Main_CAPABILITY_INPUT_ATTACHMENT_ARRAY_NON_UNIFORM_INDEXING_EXT 5310L
#undef Java_Main_CAPABILITY_UNIFORM_TEXEL_BUFFER_ARRAY_NON_UNIFORM_INDEXING
#define Java_Main_CAPABILITY_UNIFORM_TEXEL_BUFFER_ARRAY_NON_UNIFORM_INDEXING 5311L
#undef Java_Main_CAPABILITY_UNIFORM_TEXEL_BUFFER_ARRAY_NON_UNIFORM_INDEXING_EXT
#define Java_Main_CAPABILITY_UNIFORM_TEXEL_BUFFER_ARRAY_NON_UNIFORM_INDEXING_EXT 5311L
#undef Java_Main_CAPABILITY_STORAGE_TEXEL_BUFFER_ARRAY_NON_UNIFORM_INDEXING
#define Java_Main_CAPABILITY_STORAGE_TEXEL_BUFFER_ARRAY_NON_UNIFORM_INDEXING 5312L
#undef Java_Main_CAPABILITY_STORAGE_TEXEL_BUFFER_ARRAY_NON_UNIFORM_INDEXING_EXT
#define Java_Main_CAPABILITY_STORAGE_TEXEL_BUFFER_ARRAY_NON_UNIFORM_INDEXING_EXT 5312L
#undef Java_Main_CAPABILITY_RAY_TRACING_NV
#define Java_Main_CAPABILITY_RAY_TRACING_NV 5340L
#undef Java_Main_CAPABILITY_VULKAN_MEMORY_MODEL
#define Java_Main_CAPABILITY_VULKAN_MEMORY_MODEL 5345L
#undef Java_Main_CAPABILITY_VULKAN_MEMORY_MODEL_KHR
#define Java_Main_CAPABILITY_VULKAN_MEMORY_MODEL_KHR 5345L
#undef Java_Main_CAPABILITY_VULKAN_MEMORY_MODEL_DEVICE_SCOPE
#define Java_Main_CAPABILITY_VULKAN_MEMORY_MODEL_DEVICE_SCOPE 5346L
#undef Java_Main_CAPABILITY_VULKAN_MEMORY_MODEL_DEVICE_SCOPE_KHR
#define Java_Main_CAPABILITY_VULKAN_MEMORY_MODEL_DEVICE_SCOPE_KHR 5346L
#undef Java_Main_CAPABILITY_PHYSICAL_STORAGE_BUFFER_ADDRESSES
#define Java_Main_CAPABILITY_PHYSICAL_STORAGE_BUFFER_ADDRESSES 5347L
#undef Java_Main_CAPABILITY_PHYSICAL_STORAGE_BUFFER_ADDRESSES_EXT
#define Java_Main_CAPABILITY_PHYSICAL_STORAGE_BUFFER_ADDRESSES_EXT 5347L
#undef Java_Main_CAPABILITY_COMPUTE_DERIVATIVE_GROUP_LINEAR_NV
#define Java_Main_CAPABILITY_COMPUTE_DERIVATIVE_GROUP_LINEAR_NV 5350L
#undef Java_Main_CAPABILITY_RAY_TRACING_PROVISIONAL_KHR
#define Java_Main_CAPABILITY_RAY_TRACING_PROVISIONAL_KHR 5353L
#undef Java_Main_CAPABILITY_COOPERATIVE_MATRIX_NV
#define Java_Main_CAPABILITY_COOPERATIVE_MATRIX_NV 5357L
#undef Java_Main_CAPABILITY_FRAGMENT_SHADER_SAMPLE_INTERLOCK_EXT
#define Java_Main_CAPABILITY_FRAGMENT_SHADER_SAMPLE_INTERLOCK_EXT 5363L
#undef Java_Main_CAPABILITY_FRAGMENT_SHADER_SHADING_RATE_INTERLOCK_EXT
#define Java_Main_CAPABILITY_FRAGMENT_SHADER_SHADING_RATE_INTERLOCK_EXT 5372L
#undef Java_Main_CAPABILITY_SHADER_SM_BUILTINS_NV
#define Java_Main_CAPABILITY_SHADER_SM_BUILTINS_NV 5373L
#undef Java_Main_CAPABILITY_FRAGMENT_SHADER_PIXEL_INTERLOCK_EXT
#define Java_Main_CAPABILITY_FRAGMENT_SHADER_PIXEL_INTERLOCK_EXT 5378L
#undef Java_Main_CAPABILITY_DEMOTE_TO_HELPER_INVOCATION_EXT
#define Java_Main_CAPABILITY_DEMOTE_TO_HELPER_INVOCATION_EXT 5379L
#undef Java_Main_CAPABILITY_SUBGROUP_SHUFFLE_INTEL
#define Java_Main_CAPABILITY_SUBGROUP_SHUFFLE_INTEL 5568L
#undef Java_Main_CAPABILITY_SUBGROUP_BUFFER_BLOCK_IO_INTEL
#define Java_Main_CAPABILITY_SUBGROUP_BUFFER_BLOCK_IO_INTEL 5569L
#undef Java_Main_CAPABILITY_SUBGROUP_IMAGE_BLOCK_IO_INTEL
#define Java_Main_CAPABILITY_SUBGROUP_IMAGE_BLOCK_IO_INTEL 5570L
#undef Java_Main_CAPABILITY_SUBGROUP_IMAGE_MEDIA_BLOCK_IO_INTEL
#define Java_Main_CAPABILITY_SUBGROUP_IMAGE_MEDIA_BLOCK_IO_INTEL 5579L
#undef Java_Main_CAPABILITY_INTEGER_FUNCTIONS2_INTEL
#define Java_Main_CAPABILITY_INTEGER_FUNCTIONS2_INTEL 5584L
#undef Java_Main_CAPABILITY_FUNCTION_POINTERS_INTEL
#define Java_Main_CAPABILITY_FUNCTION_POINTERS_INTEL 5603L
#undef Java_Main_CAPABILITY_INDIRECT_REFERENCES_INTEL
#define Java_Main_CAPABILITY_INDIRECT_REFERENCES_INTEL 5604L
#undef Java_Main_CAPABILITY_SUBGROUP_AVC_MOTION_ESTIMATION_INTEL
#define Java_Main_CAPABILITY_SUBGROUP_AVC_MOTION_ESTIMATION_INTEL 5696L
#undef Java_Main_CAPABILITY_SUBGROUP_AVC_MOTION_ESTIMATION_INTRA_INTEL
#define Java_Main_CAPABILITY_SUBGROUP_AVC_MOTION_ESTIMATION_INTRA_INTEL 5697L
#undef Java_Main_CAPABILITY_SUBGROUP_AVC_MOTION_ESTIMATION_CHROMA_INTEL
#define Java_Main_CAPABILITY_SUBGROUP_AVC_MOTION_ESTIMATION_CHROMA_INTEL 5698L
#undef Java_Main_CAPABILITY_FPGA_MEMORY_ATTRIBUTES_INTEL
#define Java_Main_CAPABILITY_FPGA_MEMORY_ATTRIBUTES_INTEL 5824L
#undef Java_Main_CAPABILITY_UNSTRUCTURED_LOOP_CONTROLS_INTEL
#define Java_Main_CAPABILITY_UNSTRUCTURED_LOOP_CONTROLS_INTEL 5886L
#undef Java_Main_CAPABILITY_FPGA_LOOP_CONTROLS_INTEL
#define Java_Main_CAPABILITY_FPGA_LOOP_CONTROLS_INTEL 5888L
#undef Java_Main_CAPABILITY_KERNEL_ATTRIBUTES_INTEL
#define Java_Main_CAPABILITY_KERNEL_ATTRIBUTES_INTEL 5892L
#undef Java_Main_CAPABILITY_FPGA_KERNEL_ATTRIBUTES_INTEL
#define Java_Main_CAPABILITY_FPGA_KERNEL_ATTRIBUTES_INTEL 5897L
#undef Java_Main_CAPABILITY_BLOCKING_PIPES_INTEL
#define Java_Main_CAPABILITY_BLOCKING_PIPES_INTEL 5945L
#undef Java_Main_CAPABILITY_FPGA_REG_INTEL
#define Java_Main_CAPABILITY_FPGA_REG_INTEL 5948L
#undef Java_Main_CAPABILITY_ATOMIC_FLOAT32_ADD_EXT
#define Java_Main_CAPABILITY_ATOMIC_FLOAT32_ADD_EXT 6033L
#undef Java_Main_CAPABILITY_ATOMIC_FLOAT64_ADD_EXT
#define Java_Main_CAPABILITY_ATOMIC_FLOAT64_ADD_EXT 6034L
#undef Java_Main_CAPABILITY_MAX
#define Java_Main_CAPABILITY_MAX 2147483647L
#undef Java_Main_RAY_FLAGS_OPAQUE_KHR_SHIFT
#define Java_Main_RAY_FLAGS_OPAQUE_KHR_SHIFT 0L
#undef Java_Main_RAY_FLAGS_NO_OPAQUE_KHR_SHIFT
#define Java_Main_RAY_FLAGS_NO_OPAQUE_KHR_SHIFT 1L
#undef Java_Main_RAY_FLAGS_TERMINATE_ON_FIRST_HIT_KHR_SHIFT
#define Java_Main_RAY_FLAGS_TERMINATE_ON_FIRST_HIT_KHR_SHIFT 2L
#undef Java_Main_RAY_FLAGS_SKIP_CLOSEST_HIT_SHADER_KHR_SHIFT
#define Java_Main_RAY_FLAGS_SKIP_CLOSEST_HIT_SHADER_KHR_SHIFT 3L
#undef Java_Main_RAY_FLAGS_CULL_BACK_FACING_TRIANGLES_KHR_SHIFT
#define Java_Main_RAY_FLAGS_CULL_BACK_FACING_TRIANGLES_KHR_SHIFT 4L
#undef Java_Main_RAY_FLAGS_CULL_FRONT_FACING_TRIANGLES_KHR_SHIFT
#define Java_Main_RAY_FLAGS_CULL_FRONT_FACING_TRIANGLES_KHR_SHIFT 5L
#undef Java_Main_RAY_FLAGS_CULL_OPAQUE_KHR_SHIFT
#define Java_Main_RAY_FLAGS_CULL_OPAQUE_KHR_SHIFT 6L
#undef Java_Main_RAY_FLAGS_CULL_NO_OPAQUE_KHR_SHIFT
#define Java_Main_RAY_FLAGS_CULL_NO_OPAQUE_KHR_SHIFT 7L
#undef Java_Main_RAY_FLAGS_SKIP_TRIANGLES_KHR_SHIFT
#define Java_Main_RAY_FLAGS_SKIP_TRIANGLES_KHR_SHIFT 8L
#undef Java_Main_RAY_FLAGS_SKIP_AABBS_KHR_SHIFT
#define Java_Main_RAY_FLAGS_SKIP_AABBS_KHR_SHIFT 9L
#undef Java_Main_RAY_FLAGS_MAX
#define Java_Main_RAY_FLAGS_MAX 2147483647L
#undef Java_Main_RAY_FLAGS_MASK_NONE
#define Java_Main_RAY_FLAGS_MASK_NONE 0L
#undef Java_Main_RAY_FLAGS_OPAQUE_KHR_MASK
#define Java_Main_RAY_FLAGS_OPAQUE_KHR_MASK 1L
#undef Java_Main_RAY_FLAGS_NO_OPAQUE_KHR_MASK
#define Java_Main_RAY_FLAGS_NO_OPAQUE_KHR_MASK 2L
#undef Java_Main_RAY_FLAGS_TERMINATE_ON_FIRST_HIT_KHR_MASK
#define Java_Main_RAY_FLAGS_TERMINATE_ON_FIRST_HIT_KHR_MASK 4L
#undef Java_Main_RAY_FLAGS_SKIP_CLOSEST_HIT_SHADER_KHR_MASK
#define Java_Main_RAY_FLAGS_SKIP_CLOSEST_HIT_SHADER_KHR_MASK 8L
#undef Java_Main_RAY_FLAGS_CULL_BACK_FACING_TRIANGLES_KHR_MASK
#define Java_Main_RAY_FLAGS_CULL_BACK_FACING_TRIANGLES_KHR_MASK 16L
#undef Java_Main_RAY_FLAGS_CULL_FRONT_FACING_TRIANGLES_KHR_MASK
#define Java_Main_RAY_FLAGS_CULL_FRONT_FACING_TRIANGLES_KHR_MASK 32L
#undef Java_Main_RAY_FLAGS_CULL_OPAQUE_KHR_MASK
#define Java_Main_RAY_FLAGS_CULL_OPAQUE_KHR_MASK 64L
#undef Java_Main_RAY_FLAGS_CULL_NO_OPAQUE_KHR_MASK
#define Java_Main_RAY_FLAGS_CULL_NO_OPAQUE_KHR_MASK 128L
#undef Java_Main_RAY_FLAGS_SKIP_TRIANGLES_KHR_MASK
#define Java_Main_RAY_FLAGS_SKIP_TRIANGLES_KHR_MASK 256L
#undef Java_Main_RAY_FLAGS_SKIP_AABBS_KHR_MASK
#define Java_Main_RAY_FLAGS_SKIP_AABBS_KHR_MASK 512L
#undef Java_Main_RAY_QUERY_INTERSECTION_RAY_QUERY_CANDIDATE_INTERSECTION_KHR
#define Java_Main_RAY_QUERY_INTERSECTION_RAY_QUERY_CANDIDATE_INTERSECTION_KHR 0L
#undef Java_Main_RAY_QUERY_INTERSECTION_RAY_QUERY_COMMITTED_INTERSECTION_KHR
#define Java_Main_RAY_QUERY_INTERSECTION_RAY_QUERY_COMMITTED_INTERSECTION_KHR 1L
#undef Java_Main_RAY_QUERY_INTERSECTION_MAX
#define Java_Main_RAY_QUERY_INTERSECTION_MAX 2147483647L
#undef Java_Main_RAY_QUERY_COMMITTED_INTERSECTION_TYPE_RAY_QUERY_COMMITTED_INTERSECTION_NONE_KHR
#define Java_Main_RAY_QUERY_COMMITTED_INTERSECTION_TYPE_RAY_QUERY_COMMITTED_INTERSECTION_NONE_KHR 0L
#undef Java_Main_RAY_QUERY_COMMITTED_INTERSECTION_TYPE_RAY_QUERY_COMMITTED_INTERSECTION_TRIANGLE_KHR
#define Java_Main_RAY_QUERY_COMMITTED_INTERSECTION_TYPE_RAY_QUERY_COMMITTED_INTERSECTION_TRIANGLE_KHR 1L
#undef Java_Main_RAY_QUERY_COMMITTED_INTERSECTION_TYPE_RAY_QUERY_COMMITTED_INTERSECTION_GENERATED_KHR
#define Java_Main_RAY_QUERY_COMMITTED_INTERSECTION_TYPE_RAY_QUERY_COMMITTED_INTERSECTION_GENERATED_KHR 2L
#undef Java_Main_RAY_QUERY_COMMITTED_INTERSECTION_TYPE_MAX
#define Java_Main_RAY_QUERY_COMMITTED_INTERSECTION_TYPE_MAX 2147483647L
#undef Java_Main_RAY_QUERY_CANDIDATE_INTERSECTION_TYPE_RAY_QUERY_CANDIDATE_INTERSECTION_TRIANGLE_KHR
#define Java_Main_RAY_QUERY_CANDIDATE_INTERSECTION_TYPE_RAY_QUERY_CANDIDATE_INTERSECTION_TRIANGLE_KHR 0L
#undef Java_Main_RAY_QUERY_CANDIDATE_INTERSECTION_TYPE_RAY_QUERY_CANDIDATE_INTERSECTION_AABB_KHR
#define Java_Main_RAY_QUERY_CANDIDATE_INTERSECTION_TYPE_RAY_QUERY_CANDIDATE_INTERSECTION_AABB_KHR 1L
#undef Java_Main_RAY_QUERY_CANDIDATE_INTERSECTION_TYPE_MAX
#define Java_Main_RAY_QUERY_CANDIDATE_INTERSECTION_TYPE_MAX 2147483647L
#undef Java_Main_OP_NOP
#define Java_Main_OP_NOP 0L
#undef Java_Main_OP_UNDEF
#define Java_Main_OP_UNDEF 1L
#undef Java_Main_OP_SOURCE_CONTINUED
#define Java_Main_OP_SOURCE_CONTINUED 2L
#undef Java_Main_OP_SOURCE
#define Java_Main_OP_SOURCE 3L
#undef Java_Main_OP_SOURCE_EXTENSION
#define Java_Main_OP_SOURCE_EXTENSION 4L
#undef Java_Main_OP_NAME
#define Java_Main_OP_NAME 5L
#undef Java_Main_OP_MEMBER_NAME
#define Java_Main_OP_MEMBER_NAME 6L
#undef Java_Main_OP_STRING
#define Java_Main_OP_STRING 7L
#undef Java_Main_OP_LINE
#define Java_Main_OP_LINE 8L
#undef Java_Main_OP_EXTENSION
#define Java_Main_OP_EXTENSION 10L
#undef Java_Main_OP_EXT_INST_IMPORT
#define Java_Main_OP_EXT_INST_IMPORT 11L
#undef Java_Main_OP_EXT_INST
#define Java_Main_OP_EXT_INST 12L
#undef Java_Main_OP_MEMORY_MODEL
#define Java_Main_OP_MEMORY_MODEL 14L
#undef Java_Main_OP_ENTRY_POINT
#define Java_Main_OP_ENTRY_POINT 15L
#undef Java_Main_OP_EXECUTION_MODE
#define Java_Main_OP_EXECUTION_MODE 16L
#undef Java_Main_OP_CAPABILITY
#define Java_Main_OP_CAPABILITY 17L
#undef Java_Main_OP_TYPE_VOID
#define Java_Main_OP_TYPE_VOID 19L
#undef Java_Main_OP_TYPE_BOOL
#define Java_Main_OP_TYPE_BOOL 20L
#undef Java_Main_OP_TYPE_INT
#define Java_Main_OP_TYPE_INT 21L
#undef Java_Main_OP_TYPE_FLOAT
#define Java_Main_OP_TYPE_FLOAT 22L
#undef Java_Main_OP_TYPE_VECTOR
#define Java_Main_OP_TYPE_VECTOR 23L
#undef Java_Main_OP_TYPE_MATRIX
#define Java_Main_OP_TYPE_MATRIX 24L
#undef Java_Main_OP_TYPE_IMAGE
#define Java_Main_OP_TYPE_IMAGE 25L
#undef Java_Main_OP_TYPE_SAMPLER
#define Java_Main_OP_TYPE_SAMPLER 26L
#undef Java_Main_OP_TYPE_SAMPLED_IMAGE
#define Java_Main_OP_TYPE_SAMPLED_IMAGE 27L
#undef Java_Main_OP_TYPE_ARRAY
#define Java_Main_OP_TYPE_ARRAY 28L
#undef Java_Main_OP_TYPE_RUNTIME_ARRAY
#define Java_Main_OP_TYPE_RUNTIME_ARRAY 29L
#undef Java_Main_OP_TYPE_STRUCT
#define Java_Main_OP_TYPE_STRUCT 30L
#undef Java_Main_OP_TYPE_OPAQUE
#define Java_Main_OP_TYPE_OPAQUE 31L
#undef Java_Main_OP_TYPE_POINTER
#define Java_Main_OP_TYPE_POINTER 32L
#undef Java_Main_OP_TYPE_FUNCTION
#define Java_Main_OP_TYPE_FUNCTION 33L
#undef Java_Main_OP_TYPE_EVENT
#define Java_Main_OP_TYPE_EVENT 34L
#undef Java_Main_OP_TYPE_DEVICE_EVENT
#define Java_Main_OP_TYPE_DEVICE_EVENT 35L
#undef Java_Main_OP_TYPE_RESERVEID
#define Java_Main_OP_TYPE_RESERVEID 36L
#undef Java_Main_OP_TYPE_QUEUE
#define Java_Main_OP_TYPE_QUEUE 37L
#undef Java_Main_OP_TYPE_PIPE
#define Java_Main_OP_TYPE_PIPE 38L
#undef Java_Main_OP_TYPE_FORWARD_POINTER
#define Java_Main_OP_TYPE_FORWARD_POINTER 39L
#undef Java_Main_OP_CONSTANT_TRUE
#define Java_Main_OP_CONSTANT_TRUE 41L
#undef Java_Main_OP_CONSTANT_FALSE
#define Java_Main_OP_CONSTANT_FALSE 42L
#undef Java_Main_OP_CONSTANT
#define Java_Main_OP_CONSTANT 43L
#undef Java_Main_OP_CONSTANT_COMPOSITE
#define Java_Main_OP_CONSTANT_COMPOSITE 44L
#undef Java_Main_OP_CONSTANT_SAMPLER
#define Java_Main_OP_CONSTANT_SAMPLER 45L
#undef Java_Main_Op_Constant_Null
#define Java_Main_Op_Constant_Null 46L
#undef Java_Main_OP_SPEC_CONSTANT_TRUE
#define Java_Main_OP_SPEC_CONSTANT_TRUE 48L
#undef Java_Main_Op_Spec_Constant_False
#define Java_Main_Op_Spec_Constant_False 49L
#undef Java_Main_OP_SPEC_CONSTANT
#define Java_Main_OP_SPEC_CONSTANT 50L
#undef Java_Main_OP_SPEC_CONSTANT_COMPOSITE
#define Java_Main_OP_SPEC_CONSTANT_COMPOSITE 51L
#undef Java_Main_OP_SPEC_CONSTANT_OP
#define Java_Main_OP_SPEC_CONSTANT_OP 52L
#undef Java_Main_OP_FUNCTION
#define Java_Main_OP_FUNCTION 54L
#undef Java_Main_OP_FUNCTION_PARAMETER
#define Java_Main_OP_FUNCTION_PARAMETER 55L
#undef Java_Main_OP_FUNCTION_END
#define Java_Main_OP_FUNCTION_END 56L
#undef Java_Main_OP_FUNCTION_CALL
#define Java_Main_OP_FUNCTION_CALL 57L
#undef Java_Main_OP_VARIABLE
#define Java_Main_OP_VARIABLE 59L
#undef Java_Main_OP_IMAGE_TEXEL_POINTER
#define Java_Main_OP_IMAGE_TEXEL_POINTER 60L
#undef Java_Main_OP_LOAD
#define Java_Main_OP_LOAD 61L
#undef Java_Main_OP_STORE
#define Java_Main_OP_STORE 62L
#undef Java_Main_OP_COPY_MEMORY
#define Java_Main_OP_COPY_MEMORY 63L
#undef Java_Main_OP_COPY_MEMORY_SIZED
#define Java_Main_OP_COPY_MEMORY_SIZED 64L
#undef Java_Main_OP_ACCESS_CHAIN
#define Java_Main_OP_ACCESS_CHAIN 65L
#undef Java_Main_OP_IN_BOUNDS_ACCESS_CHAIN
#define Java_Main_OP_IN_BOUNDS_ACCESS_CHAIN 66L
#undef Java_Main_OP_PTR_ACCESS_CHAIN
#define Java_Main_OP_PTR_ACCESS_CHAIN 67L
#undef Java_Main_OP_ARRAY_LENGTH
#define Java_Main_OP_ARRAY_LENGTH 68L
#undef Java_Main_OP_GENERIC_PTR_MEM_SEMANTICS
#define Java_Main_OP_GENERIC_PTR_MEM_SEMANTICS 69L
#undef Java_Main_OP_IN_BOUNDS_PTR_ACCESS_CHAIN
#define Java_Main_OP_IN_BOUNDS_PTR_ACCESS_CHAIN 70L
#undef Java_Main_OP_DECORATE
#define Java_Main_OP_DECORATE 71L
#undef Java_Main_OP_MEMBER_DECORATE
#define Java_Main_OP_MEMBER_DECORATE 72L
#undef Java_Main_OP_DECORATION_GROUP
#define Java_Main_OP_DECORATION_GROUP 73L
#undef Java_Main_OP_GROUP_DECORATE
#define Java_Main_OP_GROUP_DECORATE 74L
#undef Java_Main_OP_GROUP_MEMBER_DECORATE
#define Java_Main_OP_GROUP_MEMBER_DECORATE 75L
#undef Java_Main_OP_VECTOR_EXTRACT_DYNAMIC
#define Java_Main_OP_VECTOR_EXTRACT_DYNAMIC 77L
#undef Java_Main_OP_VECTOR_INSERT_DYNAMIC
#define Java_Main_OP_VECTOR_INSERT_DYNAMIC 78L
#undef Java_Main_OP_VECTOR_SHUFFLE
#define Java_Main_OP_VECTOR_SHUFFLE 79L
#undef Java_Main_OP_COMPOSITE_CONSTRUCT
#define Java_Main_OP_COMPOSITE_CONSTRUCT 80L
#undef Java_Main_OP_COMPOSITE_EXTRACT
#define Java_Main_OP_COMPOSITE_EXTRACT 81L
#undef Java_Main_OP_COMPOSITE_INSERT
#define Java_Main_OP_COMPOSITE_INSERT 82L
#undef Java_Main_OP_COPY_OBJECT
#define Java_Main_OP_COPY_OBJECT 83L
#undef Java_Main_OP_TRANSPOSE
#define Java_Main_OP_TRANSPOSE 84L
#undef Java_Main_OP_SAMPLED_IMAGE
#define Java_Main_OP_SAMPLED_IMAGE 86L
#undef Java_Main_OP_IMAGE_SAMPLE_IMPLICIT_LOD
#define Java_Main_OP_IMAGE_SAMPLE_IMPLICIT_LOD 87L
#undef Java_Main_OP_IMAGE_SAMPLE_EXPLICIT_LOD
#define Java_Main_OP_IMAGE_SAMPLE_EXPLICIT_LOD 88L
#undef Java_Main_OP_IMAGE_SAMPLE_DREF_IMPLICIT_LOD
#define Java_Main_OP_IMAGE_SAMPLE_DREF_IMPLICIT_LOD 89L
#undef Java_Main_OP_IMAGE_SAMPLE_DREF_EXPLICIT_LOD
#define Java_Main_OP_IMAGE_SAMPLE_DREF_EXPLICIT_LOD 90L
#undef Java_Main_OP_IMAGE_SAMPLE_PROJ_IMPLICIT_LOD
#define Java_Main_OP_IMAGE_SAMPLE_PROJ_IMPLICIT_LOD 91L
#undef Java_Main_OP_IMAGE_SAMPLE_PROJ_EXPLICIT_LOD
#define Java_Main_OP_IMAGE_SAMPLE_PROJ_EXPLICIT_LOD 92L
#undef Java_Main_OP_IMAGE_SAMPLE_PROJ_DREF_IMPLICIT_LOD
#define Java_Main_OP_IMAGE_SAMPLE_PROJ_DREF_IMPLICIT_LOD 93L
#undef Java_Main_OP_IMAGE_SAMPLE_PROJ_DREF_EXPLICIT_LOD
#define Java_Main_OP_IMAGE_SAMPLE_PROJ_DREF_EXPLICIT_LOD 94L
#undef Java_Main_Op_Image_Fetch
#define Java_Main_Op_Image_Fetch 95L
#undef Java_Main_Op_Image_Gather
#define Java_Main_Op_Image_Gather 96L
#undef Java_Main_OP_IMAGE_DREF_GATHER
#define Java_Main_OP_IMAGE_DREF_GATHER 97L
#undef Java_Main_OP_IMAGE_READ
#define Java_Main_OP_IMAGE_READ 98L
#undef Java_Main_OP_IMAGE_WRITE
#define Java_Main_OP_IMAGE_WRITE 99L
#undef Java_Main_OP_IMAGE
#define Java_Main_OP_IMAGE 100L
#undef Java_Main_OP_IMAGE_QUERY_FORMAT
#define Java_Main_OP_IMAGE_QUERY_FORMAT 101L
#undef Java_Main_OP_IMAGE_QUERY_ORDER
#define Java_Main_OP_IMAGE_QUERY_ORDER 102L
#undef Java_Main_OP_IMAGE_QUERY_SIZE_LOD
#define Java_Main_OP_IMAGE_QUERY_SIZE_LOD 103L
#undef Java_Main_OP_IMAGE_QUERY_SIZE
#define Java_Main_OP_IMAGE_QUERY_SIZE 104L
#undef Java_Main_OP_IMAGE_QUERY_LOD
#define Java_Main_OP_IMAGE_QUERY_LOD 105L
#undef Java_Main_OP_IMAGE_QUERY_LEVELS
#define Java_Main_OP_IMAGE_QUERY_LEVELS 106L
#undef Java_Main_OP_IMAGE_QUERY_SAMPLES
#define Java_Main_OP_IMAGE_QUERY_SAMPLES 107L
#undef Java_Main_OP_CONVERT_F_TO_U
#define Java_Main_OP_CONVERT_F_TO_U 109L
#undef Java_Main_OP_CONVERT_F_TO_S
#define Java_Main_OP_CONVERT_F_TO_S 110L
#undef Java_Main_OP_CONVERT_S_TO_F
#define Java_Main_OP_CONVERT_S_TO_F 111L
#undef Java_Main_OP_CONVERT_U_TO_F
#define Java_Main_OP_CONVERT_U_TO_F 112L
#undef Java_Main_OP_U_CONVERT
#define Java_Main_OP_U_CONVERT 113L
#undef Java_Main_OP_S_CONVERT
#define Java_Main_OP_S_CONVERT 114L
#undef Java_Main_OP_F_CONVERT
#define Java_Main_OP_F_CONVERT 115L
#undef Java_Main_OP_QUANTIZE_TO_F16
#define Java_Main_OP_QUANTIZE_TO_F16 116L
#undef Java_Main_OP_CONVERT_PTR_TO_U
#define Java_Main_OP_CONVERT_PTR_TO_U 117L
#undef Java_Main_Op_Sat_Convert_S_To_U
#define Java_Main_Op_Sat_Convert_S_To_U 118L
#undef Java_Main_OP_SAT_CONVERT_U_TO_S
#define Java_Main_OP_SAT_CONVERT_U_TO_S 119L
#undef Java_Main_OP_CONVERT_U_TO_PTR
#define Java_Main_OP_CONVERT_U_TO_PTR 120L
#undef Java_Main_OP_PTR_CAST_TO_GENERIC
#define Java_Main_OP_PTR_CAST_TO_GENERIC 121L
#undef Java_Main_OP_GENERIC_CAST_TO_PTR
#define Java_Main_OP_GENERIC_CAST_TO_PTR 122L
#undef Java_Main_OP_GENERIC_CAST_TO_PTR_EXPLICIT
#define Java_Main_OP_GENERIC_CAST_TO_PTR_EXPLICIT 123L
#undef Java_Main_OP_BITCAST
#define Java_Main_OP_BITCAST 124L
#undef Java_Main_OP_S_NEGATE
#define Java_Main_OP_S_NEGATE 126L
#undef Java_Main_OP_F_NEGATE
#define Java_Main_OP_F_NEGATE 127L
#undef Java_Main_OP_I_ADD
#define Java_Main_OP_I_ADD 128L
#undef Java_Main_OP_F_ADD
#define Java_Main_OP_F_ADD 129L
#undef Java_Main_OP_I_SUB
#define Java_Main_OP_I_SUB 130L
#undef Java_Main_OP_F_SUB
#define Java_Main_OP_F_SUB 131L
#undef Java_Main_OP_I_MUL
#define Java_Main_OP_I_MUL 132L
#undef Java_Main_OP_F_MUL
#define Java_Main_OP_F_MUL 133L
#undef Java_Main_OP_U_DIV
#define Java_Main_OP_U_DIV 134L
#undef Java_Main_OP_S_DIV
#define Java_Main_OP_S_DIV 135L
#undef Java_Main_OP_F_DIV
#define Java_Main_OP_F_DIV 136L
#undef Java_Main_OP_U_MOD
#define Java_Main_OP_U_MOD 137L
#undef Java_Main_OP_S_REM
#define Java_Main_OP_S_REM 138L
#undef Java_Main_OP_S_MOD
#define Java_Main_OP_S_MOD 139L
#undef Java_Main_OP_F_REM
#define Java_Main_OP_F_REM 140L
#undef Java_Main_OP_F_MOD
#define Java_Main_OP_F_MOD 141L
#undef Java_Main_OP_VECTOR_TIMES_SCALAR
#define Java_Main_OP_VECTOR_TIMES_SCALAR 142L
#undef Java_Main_OP_MATRIX_TIMES_SCALAR
#define Java_Main_OP_MATRIX_TIMES_SCALAR 143L
#undef Java_Main_OP_VECTOR_TIMES_MATRIX
#define Java_Main_OP_VECTOR_TIMES_MATRIX 144L
#undef Java_Main_OP_MATRIX_TIMES_VECTOR
#define Java_Main_OP_MATRIX_TIMES_VECTOR 145L
#undef Java_Main_OP_MATRIX_TIMES_MATRIX
#define Java_Main_OP_MATRIX_TIMES_MATRIX 146L
#undef Java_Main_OP_OUTER_PRODUCT
#define Java_Main_OP_OUTER_PRODUCT 147L
#undef Java_Main_OP_DOT
#define Java_Main_OP_DOT 148L
#undef Java_Main_OP_I_ADD_CARRY
#define Java_Main_OP_I_ADD_CARRY 149L
#undef Java_Main_OP_I_SUB_BORROW
#define Java_Main_OP_I_SUB_BORROW 150L
#undef Java_Main_OP_U_MUL_EXTENDED
#define Java_Main_OP_U_MUL_EXTENDED 151L
#undef Java_Main_OP_S_MUL_EXTENDED
#define Java_Main_OP_S_MUL_EXTENDED 152L
#undef Java_Main_OP_ANY
#define Java_Main_OP_ANY 154L
#undef Java_Main_OP_ALL
#define Java_Main_OP_ALL 155L
#undef Java_Main_OP_IS_NAN
#define Java_Main_OP_IS_NAN 156L
#undef Java_Main_OP_IS_INF
#define Java_Main_OP_IS_INF 157L
#undef Java_Main_OP_IS_FINITE
#define Java_Main_OP_IS_FINITE 158L
#undef Java_Main_OP_IS_NORMAL
#define Java_Main_OP_IS_NORMAL 159L
#undef Java_Main_OP_SIGN_BIT_SET
#define Java_Main_OP_SIGN_BIT_SET 160L
#undef Java_Main_OP_LESS_OR_GREATER
#define Java_Main_OP_LESS_OR_GREATER 161L
#undef Java_Main_OP_ORDERED
#define Java_Main_OP_ORDERED 162L
#undef Java_Main_OP_UNORDERED
#define Java_Main_OP_UNORDERED 163L
#undef Java_Main_OP_LOGICAL_EQUAL
#define Java_Main_OP_LOGICAL_EQUAL 164L
#undef Java_Main_OP_LOGICAL_NOT_EQUAL
#define Java_Main_OP_LOGICAL_NOT_EQUAL 165L
#undef Java_Main_OP_LOGICAL_OR
#define Java_Main_OP_LOGICAL_OR 166L
#undef Java_Main_OP_LOGICAL_AND
#define Java_Main_OP_LOGICAL_AND 167L
#undef Java_Main_OP_LOGICAL_NOT
#define Java_Main_OP_LOGICAL_NOT 168L
#undef Java_Main_OP_SELECT
#define Java_Main_OP_SELECT 169L
#undef Java_Main_OP_I_EQUAL
#define Java_Main_OP_I_EQUAL 170L
#undef Java_Main_OP_I_NOT_EQUAL
#define Java_Main_OP_I_NOT_EQUAL 171L
#undef Java_Main_OP_U_GREATER_THAN
#define Java_Main_OP_U_GREATER_THAN 172L
#undef Java_Main_OP_S_GREATER_THAN
#define Java_Main_OP_S_GREATER_THAN 173L
#undef Java_Main_OP_U_GREATER_THAN_EQUAL
#define Java_Main_OP_U_GREATER_THAN_EQUAL 174L
#undef Java_Main_OP_S_GREATER_THAN_EQUAL
#define Java_Main_OP_S_GREATER_THAN_EQUAL 175L
#undef Java_Main_OP_U_LESS_THAN
#define Java_Main_OP_U_LESS_THAN 176L
#undef Java_Main_OP_S_LESS_THAN
#define Java_Main_OP_S_LESS_THAN 177L
#undef Java_Main_OP_U_LESS_THAN_EQUAL
#define Java_Main_OP_U_LESS_THAN_EQUAL 178L
#undef Java_Main_OP_S_LESS_THAN_EQUAL
#define Java_Main_OP_S_LESS_THAN_EQUAL 179L
#undef Java_Main_OP_F_ORD_EQUAL
#define Java_Main_OP_F_ORD_EQUAL 180L
#undef Java_Main_OP_F_UNORD_EQUAL
#define Java_Main_OP_F_UNORD_EQUAL 181L
#undef Java_Main_OP_F_ORD_NOT_EQUAL
#define Java_Main_OP_F_ORD_NOT_EQUAL 182L
#undef Java_Main_OP_F_UNORD_NOT_EQUAL
#define Java_Main_OP_F_UNORD_NOT_EQUAL 183L
#undef Java_Main_OP_F_ORD_LESS_THAN
#define Java_Main_OP_F_ORD_LESS_THAN 184L
#undef Java_Main_OP_F_UNORD_LESS_THAN
#define Java_Main_OP_F_UNORD_LESS_THAN 185L
#undef Java_Main_OP_F_ORD_GREATER_THAN
#define Java_Main_OP_F_ORD_GREATER_THAN 186L
#undef Java_Main_OP_F_UNORD_GREATER_THAN
#define Java_Main_OP_F_UNORD_GREATER_THAN 187L
#undef Java_Main_OP_F_ORD_LESS_THAN_EQUAL
#define Java_Main_OP_F_ORD_LESS_THAN_EQUAL 188L
#undef Java_Main_OP_F_UNORD_LESS_THAN_EQUAL
#define Java_Main_OP_F_UNORD_LESS_THAN_EQUAL 189L
#undef Java_Main_OP_F_ORD_GREATER_THAN_EQUAL
#define Java_Main_OP_F_ORD_GREATER_THAN_EQUAL 190L
#undef Java_Main_OP_F_UNORD_GREATER_THAN_EQUAL
#define Java_Main_OP_F_UNORD_GREATER_THAN_EQUAL 191L
#undef Java_Main_OP_SHIFT_RIGHT_LOGICAL
#define Java_Main_OP_SHIFT_RIGHT_LOGICAL 194L
#undef Java_Main_OP_SHIFT_RIGHT_ARITHMETIC
#define Java_Main_OP_SHIFT_RIGHT_ARITHMETIC 195L
#undef Java_Main_OP_SHIFT_LEFT_LOGICAL
#define Java_Main_OP_SHIFT_LEFT_LOGICAL 196L
#undef Java_Main_OP_BITWISE_OR
#define Java_Main_OP_BITWISE_OR 197L
#undef Java_Main_OP_BITWISE_XOR
#define Java_Main_OP_BITWISE_XOR 198L
#undef Java_Main_OP_BITWISE_AND
#define Java_Main_OP_BITWISE_AND 199L
#undef Java_Main_OP_NOT
#define Java_Main_OP_NOT 200L
#undef Java_Main_OP_BIT_FIELD_INSERT
#define Java_Main_OP_BIT_FIELD_INSERT 201L
#undef Java_Main_OP_BIT_FIELD_S_EXTRACT
#define Java_Main_OP_BIT_FIELD_S_EXTRACT 202L
#undef Java_Main_OP_BIT_FIELD_U_EXTRACT
#define Java_Main_OP_BIT_FIELD_U_EXTRACT 203L
#undef Java_Main_OP_BIT_REVERSE
#define Java_Main_OP_BIT_REVERSE 204L
#undef Java_Main_OP_BIT_COUNT
#define Java_Main_OP_BIT_COUNT 205L
#undef Java_Main_OP_DPDX
#define Java_Main_OP_DPDX 207L
#undef Java_Main_OP_DPDY
#define Java_Main_OP_DPDY 208L
#undef Java_Main_OP_F_WIDTH
#define Java_Main_OP_F_WIDTH 209L
#undef Java_Main_OP_DPDX_FINE
#define Java_Main_OP_DPDX_FINE 210L
#undef Java_Main_OP_DPDY_FINE
#define Java_Main_OP_DPDY_FINE 211L
#undef Java_Main_OP_F_WIDTH_FINE
#define Java_Main_OP_F_WIDTH_FINE 212L
#undef Java_Main_OP_DPDX_COARSE
#define Java_Main_OP_DPDX_COARSE 213L
#undef Java_Main_OP_DPDY_COARSE
#define Java_Main_OP_DPDY_COARSE 214L
#undef Java_Main_OP_F_WIDTH_COARSE
#define Java_Main_OP_F_WIDTH_COARSE 215L
#undef Java_Main_OP_EMIT_VERTEX
#define Java_Main_OP_EMIT_VERTEX 218L
#undef Java_Main_OP_END_PRIMITIVE
#define Java_Main_OP_END_PRIMITIVE 219L
#undef Java_Main_OP_EMIT_STREAM_VERTEX
#define Java_Main_OP_EMIT_STREAM_VERTEX 220L
#undef Java_Main_OP_END_STREAM_PRIMITIVE
#define Java_Main_OP_END_STREAM_PRIMITIVE 221L
#undef Java_Main_OP_CONTROL_BARRIER
#define Java_Main_OP_CONTROL_BARRIER 224L
#undef Java_Main_OP_MEMORY_BARRIER
#define Java_Main_OP_MEMORY_BARRIER 225L
#undef Java_Main_OP_ATOMIC_LOAD
#define Java_Main_OP_ATOMIC_LOAD 227L
#undef Java_Main_OP_ATOMIC_STORE
#define Java_Main_OP_ATOMIC_STORE 228L
#undef Java_Main_OP_ATOMIC_EXCHANGE
#define Java_Main_OP_ATOMIC_EXCHANGE 229L
#undef Java_Main_OP_ATOMIC_COMPARE_EXCHANGE
#define Java_Main_OP_ATOMIC_COMPARE_EXCHANGE 230L
#undef Java_Main_OP_ATOMIC_COMPARE_EXCHANGE_WEAK
#define Java_Main_OP_ATOMIC_COMPARE_EXCHANGE_WEAK 231L
#undef Java_Main_OP_ATOMIC_I_INCREMENT
#define Java_Main_OP_ATOMIC_I_INCREMENT 232L
#undef Java_Main_OP_ATOMIC_I_DECREMENT
#define Java_Main_OP_ATOMIC_I_DECREMENT 233L
#undef Java_Main_OP_ATOMIC_I_ADD
#define Java_Main_OP_ATOMIC_I_ADD 234L
#undef Java_Main_OP_ATOMIC_I_SUB
#define Java_Main_OP_ATOMIC_I_SUB 235L
#undef Java_Main_OP_ATOMIC_S_MIN
#define Java_Main_OP_ATOMIC_S_MIN 236L
#undef Java_Main_OP_ATOMIC_U_MIN
#define Java_Main_OP_ATOMIC_U_MIN 237L
#undef Java_Main_OP_ATOMIC_S_MAX
#define Java_Main_OP_ATOMIC_S_MAX 238L
#undef Java_Main_OP_ATOMIC_U_MAX
#define Java_Main_OP_ATOMIC_U_MAX 239L
#undef Java_Main_OP_ATOMIC_AND
#define Java_Main_OP_ATOMIC_AND 240L
#undef Java_Main_OP_ATOMIC_OR
#define Java_Main_OP_ATOMIC_OR 241L
#undef Java_Main_OP_ATOMIC_XOR
#define Java_Main_OP_ATOMIC_XOR 242L
#undef Java_Main_OP_PHI
#define Java_Main_OP_PHI 245L
#undef Java_Main_OP_LOOP_MERGE
#define Java_Main_OP_LOOP_MERGE 246L
#undef Java_Main_OP_SELECTION_MERGE
#define Java_Main_OP_SELECTION_MERGE 247L
#undef Java_Main_OP_LABEL
#define Java_Main_OP_LABEL 248L
#undef Java_Main_OP_BRANCH
#define Java_Main_OP_BRANCH 249L
#undef Java_Main_OP_BRANCH_CONDITIONAL
#define Java_Main_OP_BRANCH_CONDITIONAL 250L
#undef Java_Main_OP_SWITCH
#define Java_Main_OP_SWITCH 251L
#undef Java_Main_OP_KILL
#define Java_Main_OP_KILL 252L
#undef Java_Main_OP_RETURN
#define Java_Main_OP_RETURN 253L
#undef Java_Main_OP_RETURN_VALUE
#define Java_Main_OP_RETURN_VALUE 254L
#undef Java_Main_OP_UNREACHABLE
#define Java_Main_OP_UNREACHABLE 255L
#undef Java_Main_OP_LIFETIME_START
#define Java_Main_OP_LIFETIME_START 256L
#undef Java_Main_OP_LIFETIME_STOP
#define Java_Main_OP_LIFETIME_STOP 257L
#undef Java_Main_OP_GROUP_ASYNC_COPY
#define Java_Main_OP_GROUP_ASYNC_COPY 259L
#undef Java_Main_OP_GROUP_WAIT_EVENTS
#define Java_Main_OP_GROUP_WAIT_EVENTS 260L
#undef Java_Main_OP_GROUP_ALL
#define Java_Main_OP_GROUP_ALL 261L
#undef Java_Main_OP_GROUP_ANY
#define Java_Main_OP_GROUP_ANY 262L
#undef Java_Main_Op_Group_Broadcast
#define Java_Main_Op_Group_Broadcast 263L
#undef Java_Main_OP_GROUP_I_ADD
#define Java_Main_OP_GROUP_I_ADD 264L
#undef Java_Main_OP_GROUP_F_ADD
#define Java_Main_OP_GROUP_F_ADD 265L
#undef Java_Main_OP_GROUP_F_MIN
#define Java_Main_OP_GROUP_F_MIN 266L
#undef Java_Main_OP_GROUP_U_MIN
#define Java_Main_OP_GROUP_U_MIN 267L
#undef Java_Main_OP_GROUP_S_MIN
#define Java_Main_OP_GROUP_S_MIN 268L
#undef Java_Main_OP_GROUP_F_MAX
#define Java_Main_OP_GROUP_F_MAX 269L
#undef Java_Main_OP_GROUP_U_MAX
#define Java_Main_OP_GROUP_U_MAX 270L
#undef Java_Main_OP_GROUP_S_MAX
#define Java_Main_OP_GROUP_S_MAX 271L
#undef Java_Main_OP_READ_PIPE
#define Java_Main_OP_READ_PIPE 274L
#undef Java_Main_OP_WRITE_PIPE
#define Java_Main_OP_WRITE_PIPE 275L
#undef Java_Main_Op_ReservEd_Read_Pipe
#define Java_Main_Op_ReservEd_Read_Pipe 276L
#undef Java_Main_OP_RESERVED_WRITE_PIPE
#define Java_Main_OP_RESERVED_WRITE_PIPE 277L
#undef Java_Main_OP_RESERVE_READ_PIPE_PACKETS
#define Java_Main_OP_RESERVE_READ_PIPE_PACKETS 278L
#undef Java_Main_OP_RESERVE_WRITE_PIPE_PACKETS
#define Java_Main_OP_RESERVE_WRITE_PIPE_PACKETS 279L
#undef Java_Main_OP_COMMIT_READ_PIPE
#define Java_Main_OP_COMMIT_READ_PIPE 280L
#undef Java_Main_OP_COMMIT_WRITE_PIPE
#define Java_Main_OP_COMMIT_WRITE_PIPE 281L
#undef Java_Main_OP_IS_VALID_RESERVE_ID
#define Java_Main_OP_IS_VALID_RESERVE_ID 282L
#undef Java_Main_OP_GET_NUM_PIPE_PACKETS
#define Java_Main_OP_GET_NUM_PIPE_PACKETS 283L
#undef Java_Main_OP_GET_MAX_PIPE_PACKETS
#define Java_Main_OP_GET_MAX_PIPE_PACKETS 284L
#undef Java_Main_OP_GROUP_RESERVE_READ_PIPE_PACKETS
#define Java_Main_OP_GROUP_RESERVE_READ_PIPE_PACKETS 285L
#undef Java_Main_OP_GROUP_RESERVE_WRITE_PIPE_PACKETS
#define Java_Main_OP_GROUP_RESERVE_WRITE_PIPE_PACKETS 286L
#undef Java_Main_OP_GROUP_COMMIT_READ_PIPE
#define Java_Main_OP_GROUP_COMMIT_READ_PIPE 287L
#undef Java_Main_OP_GROUP_COMMIT_WRITE_PIPE
#define Java_Main_OP_GROUP_COMMIT_WRITE_PIPE 288L
#undef Java_Main_OP_ENQUEUE_MARKER
#define Java_Main_OP_ENQUEUE_MARKER 291L
#undef Java_Main_OP_ENQUEUE_KERNEL
#define Java_Main_OP_ENQUEUE_KERNEL 292L
#undef Java_Main_OP_GET_KERNEL_NDRANGE_SUB_GROUP_COUNT
#define Java_Main_OP_GET_KERNEL_NDRANGE_SUB_GROUP_COUNT 293L
#undef Java_Main_OP_GET_KERNEL_NDRANGE_MAX_SUB_GROUP_SIZE
#define Java_Main_OP_GET_KERNEL_NDRANGE_MAX_SUB_GROUP_SIZE 294L
#undef Java_Main_OP_GET_KERNEL_WORK_GROUP_SIZE
#define Java_Main_OP_GET_KERNEL_WORK_GROUP_SIZE 295L
#undef Java_Main_OP_GET_KERNEL_PREFERRED_WORK_GROUP_SIZE_MULTIPLE
#define Java_Main_OP_GET_KERNEL_PREFERRED_WORK_GROUP_SIZE_MULTIPLE 296L
#undef Java_Main_OP_RETAIN_EVENT
#define Java_Main_OP_RETAIN_EVENT 297L
#undef Java_Main_OP_RELEASE_EVENT
#define Java_Main_OP_RELEASE_EVENT 298L
#undef Java_Main_OP_CREATE_USER_EVENT
#define Java_Main_OP_CREATE_USER_EVENT 299L
#undef Java_Main_OP_IS_VALID_EVENT
#define Java_Main_OP_IS_VALID_EVENT 300L
#undef Java_Main_OP_SET_USER_EVENT_STATUS
#define Java_Main_OP_SET_USER_EVENT_STATUS 301L
#undef Java_Main_OP_CAPTURE_EVENT_PROFILING_INFO
#define Java_Main_OP_CAPTURE_EVENT_PROFILING_INFO 302L
#undef Java_Main_OP_GET_DEFAULT_QUEUE
#define Java_Main_OP_GET_DEFAULT_QUEUE 303L
#undef Java_Main_OP_BUILD_ND_RANGE
#define Java_Main_OP_BUILD_ND_RANGE 304L
#undef Java_Main_OP_IMAGE_SPARSE_SAMPLE_IMPLICIT_LOD
#define Java_Main_OP_IMAGE_SPARSE_SAMPLE_IMPLICIT_LOD 305L
#undef Java_Main_OP_IMAGE_SPARSE_SAMPLE_EXPLICIT_LOD
#define Java_Main_OP_IMAGE_SPARSE_SAMPLE_EXPLICIT_LOD 306L
#undef Java_Main_OP_IMAGE_SPARSE_SAMPLE_DREF_IMPLICIT_LOD
#define Java_Main_OP_IMAGE_SPARSE_SAMPLE_DREF_IMPLICIT_LOD 307L
#undef Java_Main_OP_IMAGE_SPARSE_SAMPLE_DREF_EXPLICIT_LOD
#define Java_Main_OP_IMAGE_SPARSE_SAMPLE_DREF_EXPLICIT_LOD 308L
#undef Java_Main_OP_IMAGE_SPARSE_SAMPLE_PROJ_IMPLICIT_LOD
#define Java_Main_OP_IMAGE_SPARSE_SAMPLE_PROJ_IMPLICIT_LOD 309L
#undef Java_Main_OP_IMAGE_SPARSE_SAMPLE_PROJ_EXPLICIT_LOD
#define Java_Main_OP_IMAGE_SPARSE_SAMPLE_PROJ_EXPLICIT_LOD 310L
#undef Java_Main_OP_IMAGE_SPARSE_SAMPLE_PROJ_DREF_IMPLICIT_LOD
#define Java_Main_OP_IMAGE_SPARSE_SAMPLE_PROJ_DREF_IMPLICIT_LOD 311L
#undef Java_Main_OP_IMAGE_SPARSE_SAMPLE_PROJ_DREF_EXPLICIT_LOD
#define Java_Main_OP_IMAGE_SPARSE_SAMPLE_PROJ_DREF_EXPLICIT_LOD 312L
#undef Java_Main_OP_IMAGE_SPARSE_FETCH
#define Java_Main_OP_IMAGE_SPARSE_FETCH 313L
#undef Java_Main_OP_IMAGE_SPARSE_GATHER
#define Java_Main_OP_IMAGE_SPARSE_GATHER 314L
#undef Java_Main_OP_IMAGE_SPARSE_DREF_GATHER
#define Java_Main_OP_IMAGE_SPARSE_DREF_GATHER 315L
#undef Java_Main_OP_IMAGE_SPARSE_TEXELS_RESIDENT
#define Java_Main_OP_IMAGE_SPARSE_TEXELS_RESIDENT 316L
#undef Java_Main_OP_NO_LINE
#define Java_Main_OP_NO_LINE 317L
#undef Java_Main_OP_ATOMIC_FLAG_TEST_AND_SET
#define Java_Main_OP_ATOMIC_FLAG_TEST_AND_SET 318L
#undef Java_Main_OP_ATOMIC_FLAG_CLEAR
#define Java_Main_OP_ATOMIC_FLAG_CLEAR 319L
#undef Java_Main_OP_IMAGE_SPARSE_READ
#define Java_Main_OP_IMAGE_SPARSE_READ 320L
#undef Java_Main_OP_SIZE_OF
#define Java_Main_OP_SIZE_OF 321L
#undef Java_Main_OP_TYPE_PIPE_STORAGE
#define Java_Main_OP_TYPE_PIPE_STORAGE 322L
#undef Java_Main_OP_CONSTANT_PIPE_STORAGE
#define Java_Main_OP_CONSTANT_PIPE_STORAGE 323L
#undef Java_Main_OP_CREATE_PIPE_FROM_PIPE_STORAGE
#define Java_Main_OP_CREATE_PIPE_FROM_PIPE_STORAGE 324L
#undef Java_Main_OP_GET_KERNEL_LOCAL_SIZE_FOR_SUBGROUP_COUNT
#define Java_Main_OP_GET_KERNEL_LOCAL_SIZE_FOR_SUBGROUP_COUNT 325L
#undef Java_Main_OP_GET_KERNEL_MAX_NUM_SUBGROUPS
#define Java_Main_OP_GET_KERNEL_MAX_NUM_SUBGROUPS 326L
#undef Java_Main_OP_TYPE_NAMED_BARRIER
#define Java_Main_OP_TYPE_NAMED_BARRIER 327L
#undef Java_Main_OP_NAMED_BARRIER_INITIALIZE
#define Java_Main_OP_NAMED_BARRIER_INITIALIZE 328L
#undef Java_Main_OP_MEMORY_NAMED_BARRIER
#define Java_Main_OP_MEMORY_NAMED_BARRIER 329L
#undef Java_Main_OP_MODULE_PROCESSED
#define Java_Main_OP_MODULE_PROCESSED 330L
#undef Java_Main_OP_EXECUTION_MODE_ID
#define Java_Main_OP_EXECUTION_MODE_ID 331L
#undef Java_Main_OP_DECORATE_ID
#define Java_Main_OP_DECORATE_ID 332L
#undef Java_Main_OP_GROUP_NON_UNIFORM_ELECT
#define Java_Main_OP_GROUP_NON_UNIFORM_ELECT 333L
#undef Java_Main_OP_GROUP_NON_UNIFORM_ALL
#define Java_Main_OP_GROUP_NON_UNIFORM_ALL 334L
#undef Java_Main_OP_GROUP_NON_UNIFORM_ANY
#define Java_Main_OP_GROUP_NON_UNIFORM_ANY 335L
#undef Java_Main_OP_GROUP_NON_UNIFORM_ALL_EQUAL
#define Java_Main_OP_GROUP_NON_UNIFORM_ALL_EQUAL 336L
#undef Java_Main_OP_GROUP_NON_UNIFORM_BROADCAST
#define Java_Main_OP_GROUP_NON_UNIFORM_BROADCAST 337L
#undef Java_Main_OP_GROUP_NON_UNIFORM_BROADCAST_FIRST
#define Java_Main_OP_GROUP_NON_UNIFORM_BROADCAST_FIRST 338L
#undef Java_Main_OP_GROUP_NON_UNIFORM_BALLOT
#define Java_Main_OP_GROUP_NON_UNIFORM_BALLOT 339L
#undef Java_Main_OP_GROUP_NON_UNIFORM_INVERSE_BALLOT
#define Java_Main_OP_GROUP_NON_UNIFORM_INVERSE_BALLOT 340L
#undef Java_Main_OP_GROUP_NON_UNIFORM_BALLOT_BIT_EXTRACT
#define Java_Main_OP_GROUP_NON_UNIFORM_BALLOT_BIT_EXTRACT 341L
#undef Java_Main_OP_GROUP_NON_UNIFORM_BALLOT_BIT_COUNT
#define Java_Main_OP_GROUP_NON_UNIFORM_BALLOT_BIT_COUNT 342L
#undef Java_Main_OP_GROUP_NON_UNIFORM_BALLOT_FIND_LSB
#define Java_Main_OP_GROUP_NON_UNIFORM_BALLOT_FIND_LSB 343L
#undef Java_Main_OP_GROUP_NON_UNIFORM_BALLOT_FIND_MSB
#define Java_Main_OP_GROUP_NON_UNIFORM_BALLOT_FIND_MSB 344L
#undef Java_Main_OP_GROUP_NON_UNIFORM_SHUFFLE
#define Java_Main_OP_GROUP_NON_UNIFORM_SHUFFLE 345L
#undef Java_Main_OP_GROUP_NON_UNIFORM_SHUFFLE_XOR
#define Java_Main_OP_GROUP_NON_UNIFORM_SHUFFLE_XOR 346L
#undef Java_Main_OP_GROUP_NON_UNIFORM_SHUFFLE_UP
#define Java_Main_OP_GROUP_NON_UNIFORM_SHUFFLE_UP 347L
#undef Java_Main_OP_GROUP_NON_UNIFORM_SHUFFLE_DOWN
#define Java_Main_OP_GROUP_NON_UNIFORM_SHUFFLE_DOWN 348L
#undef Java_Main_OP_GROUP_NON_UNIFORM_I_ADD
#define Java_Main_OP_GROUP_NON_UNIFORM_I_ADD 349L
#undef Java_Main_OP_GROUP_NON_UNIFORM_F_ADD
#define Java_Main_OP_GROUP_NON_UNIFORM_F_ADD 350L
#undef Java_Main_OP_GROUP_NON_UNIFORM_I_MUL
#define Java_Main_OP_GROUP_NON_UNIFORM_I_MUL 351L
#undef Java_Main_OP_GROUP_NON_UNIFORM_F_MUL
#define Java_Main_OP_GROUP_NON_UNIFORM_F_MUL 352L
#undef Java_Main_OP_GROUP_NON_UNIFORM_S_MIN
#define Java_Main_OP_GROUP_NON_UNIFORM_S_MIN 353L
#undef Java_Main_OP_GROUP_NON_UNIFORM_U_MIN
#define Java_Main_OP_GROUP_NON_UNIFORM_U_MIN 354L
#undef Java_Main_OP_GROUP_NON_UNIFORM_F_MIN
#define Java_Main_OP_GROUP_NON_UNIFORM_F_MIN 355L
#undef Java_Main_OP_GROUP_NON_UNIFORM_S_MAX
#define Java_Main_OP_GROUP_NON_UNIFORM_S_MAX 356L
#undef Java_Main_OP_GROUP_NON_UNIFORM_U_MAX
#define Java_Main_OP_GROUP_NON_UNIFORM_U_MAX 357L
#undef Java_Main_OP_GROUP_NON_UNIFORM_F_MAX
#define Java_Main_OP_GROUP_NON_UNIFORM_F_MAX 358L
#undef Java_Main_OP_GROUP_NON_UNIFORM_BITWISE_AND
#define Java_Main_OP_GROUP_NON_UNIFORM_BITWISE_AND 359L
#undef Java_Main_OP_GROUP_NON_UNIFORM_BITWISE_OR
#define Java_Main_OP_GROUP_NON_UNIFORM_BITWISE_OR 360L
#undef Java_Main_OP_GROUP_NON_UNIFORM_BITWISE_XOR
#define Java_Main_OP_GROUP_NON_UNIFORM_BITWISE_XOR 361L
#undef Java_Main_OP_GROUP_NON_UNIFORM_LOGICAL_AND
#define Java_Main_OP_GROUP_NON_UNIFORM_LOGICAL_AND 362L
#undef Java_Main_OP_GROUP_NON_UNIFORM_LOGICAL_OR
#define Java_Main_OP_GROUP_NON_UNIFORM_LOGICAL_OR 363L
#undef Java_Main_OP_GROUP_NON_UNIFORM_LOGICAL_XOR
#define Java_Main_OP_GROUP_NON_UNIFORM_LOGICAL_XOR 364L
#undef Java_Main_OP_GROUP_NON_UNIFORM_QUAD_BROADCAST
#define Java_Main_OP_GROUP_NON_UNIFORM_QUAD_BROADCAST 365L
#undef Java_Main_OP_GROUP_NON_UNIFORM_QUAD_SWAP
#define Java_Main_OP_GROUP_NON_UNIFORM_QUAD_SWAP 366L
#undef Java_Main_OP_COPY_LOGICAL
#define Java_Main_OP_COPY_LOGICAL 400L
#undef Java_Main_OP_PTR_EQUAL
#define Java_Main_OP_PTR_EQUAL 401L
#undef Java_Main_OP_PTR_NOT_EQUAL
#define Java_Main_OP_PTR_NOT_EQUAL 402L
#undef Java_Main_OP_PTR_DIFF
#define Java_Main_OP_PTR_DIFF 403L
#undef Java_Main_OP_SUBGROUP_BALLOT_KHR
#define Java_Main_OP_SUBGROUP_BALLOT_KHR 4421L
#undef Java_Main_OP_SUBGROUP_FIRST_INVOCATION_KHR
#define Java_Main_OP_SUBGROUP_FIRST_INVOCATION_KHR 4422L
#undef Java_Main_OP_SUBGROUP_ALL_KHR
#define Java_Main_OP_SUBGROUP_ALL_KHR 4428L
#undef Java_Main_OP_SUBGROUP_ANY_KHR
#define Java_Main_OP_SUBGROUP_ANY_KHR 4429L
#undef Java_Main_OP_SUBGROUP_ALL_EQUAL_KHR
#define Java_Main_OP_SUBGROUP_ALL_EQUAL_KHR 4430L
#undef Java_Main_OP_SUBGROUP_READ_INVOCATION_KHR
#define Java_Main_OP_SUBGROUP_READ_INVOCATION_KHR 4432L
#undef Java_Main_Op_Type_Ray_Query_Provisional_KHR
#define Java_Main_Op_Type_Ray_Query_Provisional_KHR 4472L
#undef Java_Main_OP_RAY_QUERY_INITIALIZE_KHR
#define Java_Main_OP_RAY_QUERY_INITIALIZE_KHR 4473L
#undef Java_Main_OP_RAY_QUERY_TERMINATE_KHR
#define Java_Main_OP_RAY_QUERY_TERMINATE_KHR 4474L
#undef Java_Main_OP_RAY_QUERY_GENERATE_INTERSECTION_KHR
#define Java_Main_OP_RAY_QUERY_GENERATE_INTERSECTION_KHR 4475L
#undef Java_Main_OP_RAY_QUERY_CONFIRM_INTERSECTION_KHR
#define Java_Main_OP_RAY_QUERY_CONFIRM_INTERSECTION_KHR 4476L
#undef Java_Main_OP_RAY_QUERY_PROCEED_KHR
#define Java_Main_OP_RAY_QUERY_PROCEED_KHR 4477L
#undef Java_Main_OP_RAY_QUERY_GET_INTERSECTION_TYPE_KHR
#define Java_Main_OP_RAY_QUERY_GET_INTERSECTION_TYPE_KHR 4479L
#undef Java_Main_OP_GROUP_I_ADD_NON_UNIFORM_AMD
#define Java_Main_OP_GROUP_I_ADD_NON_UNIFORM_AMD 5000L
#undef Java_Main_OP_GROUP_F_ADD_NON_UNIFORM_AMD
#define Java_Main_OP_GROUP_F_ADD_NON_UNIFORM_AMD 5001L
#undef Java_Main_OP_GROUP_F_MIN_NON_UNIFORM_AMD
#define Java_Main_OP_GROUP_F_MIN_NON_UNIFORM_AMD 5002L
#undef Java_Main_OP_GROUP_U_MIN_NON_UNIFORM_AMD
#define Java_Main_OP_GROUP_U_MIN_NON_UNIFORM_AMD 5003L
#undef Java_Main_OP_GROUP_S_MIN_NON_UNIFORM_AMD
#define Java_Main_OP_GROUP_S_MIN_NON_UNIFORM_AMD 5004L
#undef Java_Main_OP_GROUP_F_MAX_NON_UNIFORM_AMD
#define Java_Main_OP_GROUP_F_MAX_NON_UNIFORM_AMD 5005L
#undef Java_Main_OP_GROUP_U_MAX_NON_UNIFORM_AMD
#define Java_Main_OP_GROUP_U_MAX_NON_UNIFORM_AMD 5006L
#undef Java_Main_OP_GROUP_S_MAX_NON_UNIFORM_AMD
#define Java_Main_OP_GROUP_S_MAX_NON_UNIFORM_AMD 5007L
#undef Java_Main_OP_FRAGMENT_MASK_FETCH_AMD
#define Java_Main_OP_FRAGMENT_MASK_FETCH_AMD 5011L
#undef Java_Main_OP_FRAGMENT_FETCH_AMD
#define Java_Main_OP_FRAGMENT_FETCH_AMD 5012L
#undef Java_Main_OP_READ_CLOCK_KHR
#define Java_Main_OP_READ_CLOCK_KHR 5056L
#undef Java_Main_OP_IMAGE_SAMPLE_FOOTPRINT_NV
#define Java_Main_OP_IMAGE_SAMPLE_FOOTPRINT_NV 5283L
#undef Java_Main_OP_GROUP_NON_UNIFORM_PARTITION_NV
#define Java_Main_OP_GROUP_NON_UNIFORM_PARTITION_NV 5296L
#undef Java_Main_OP_WRITE_PACKED_PRIMITIVE_INDICES_4X8_NV
#define Java_Main_OP_WRITE_PACKED_PRIMITIVE_INDICES_4X8_NV 5299L
#undef Java_Main_OP_REPORT_INTERSECTION_KHR
#define Java_Main_OP_REPORT_INTERSECTION_KHR 5334L
#undef Java_Main_OP_REPORT_INTERSECTION_NV
#define Java_Main_OP_REPORT_INTERSECTION_NV 5334L
#undef Java_Main_OP_IGNORE_INTERSECTION_KHR
#define Java_Main_OP_IGNORE_INTERSECTION_KHR 5335L
#undef Java_Main_OP_IGNORE_INTERSECTION_NV
#define Java_Main_OP_IGNORE_INTERSECTION_NV 5335L
#undef Java_Main_OP_TERMINATE_RAY_KHR
#define Java_Main_OP_TERMINATE_RAY_KHR 5336L
#undef Java_Main_OP_TERMINATE_RAY_NV
#define Java_Main_OP_TERMINATE_RAY_NV 5336L
#undef Java_Main_OP_TRACE_NV
#define Java_Main_OP_TRACE_NV 5337L
#undef Java_Main_OP_TRACE_RAY_KHR
#define Java_Main_OP_TRACE_RAY_KHR 5337L
#undef Java_Main_OP_TYPE_ACCELERATION_STRUCTURE_KHR
#define Java_Main_OP_TYPE_ACCELERATION_STRUCTURE_KHR 5341L
#undef Java_Main_OP_TYPE_ACCELERATION_STRUCTURE_NV
#define Java_Main_OP_TYPE_ACCELERATION_STRUCTURE_NV 5341L
#undef Java_Main_OP_EXECUTE_CALLABLE_KHR
#define Java_Main_OP_EXECUTE_CALLABLE_KHR 5344L
#undef Java_Main_OP_EXECUTE_CALLABLE_NV
#define Java_Main_OP_EXECUTE_CALLABLE_NV 5344L
#undef Java_Main_OP_TYPE_COOPERATIVE_MATRIX_NV
#define Java_Main_OP_TYPE_COOPERATIVE_MATRIX_NV 5358L
#undef Java_Main_OP_COOPERATIVE_MATRIX_LOAD_NV
#define Java_Main_OP_COOPERATIVE_MATRIX_LOAD_NV 5359L
#undef Java_Main_OP_COOPERATIVE_MATRIX_STORE_NV
#define Java_Main_OP_COOPERATIVE_MATRIX_STORE_NV 5360L
#undef Java_Main_OP_COOPERATIVE_MATRIX_MUL_ADD_NV
#define Java_Main_OP_COOPERATIVE_MATRIX_MUL_ADD_NV 5361L
#undef Java_Main_OP_COOPERATIVE_MATRIX_LENGTH_NV
#define Java_Main_OP_COOPERATIVE_MATRIX_LENGTH_NV 5362L
#undef Java_Main_OP_BEGIN_INVOCATION_INTERLOCK_EXT
#define Java_Main_OP_BEGIN_INVOCATION_INTERLOCK_EXT 5364L
#undef Java_Main_OP_END_INVOCATION_INTERLOCK_EXT
#define Java_Main_OP_END_INVOCATION_INTERLOCK_EXT 5365L
#undef Java_Main_OP_DEMOTE_TO_HELPER_INVOCATION_EXT
#define Java_Main_OP_DEMOTE_TO_HELPER_INVOCATION_EXT 5380L
#undef Java_Main_OP_IS_HELPER_INVOCATION_EXT
#define Java_Main_OP_IS_HELPER_INVOCATION_EXT 5381L
#undef Java_Main_OP_SUBGROUP_SHUFFLE_INTEL
#define Java_Main_OP_SUBGROUP_SHUFFLE_INTEL 5571L
#undef Java_Main_OP_SUBGROUP_SHUFFLE_DOWN_INTEL
#define Java_Main_OP_SUBGROUP_SHUFFLE_DOWN_INTEL 5572L
#undef Java_Main_OP_SUBGROUP_SHUFFLE_UP_INTEL
#define Java_Main_OP_SUBGROUP_SHUFFLE_UP_INTEL 5573L
#undef Java_Main_OP_SUBGROUP_SHUFFLE_XOR_INTEL
#define Java_Main_OP_SUBGROUP_SHUFFLE_XOR_INTEL 5574L
#undef Java_Main_OP_SUBGROUP_BLOCK_READ_INTEL
#define Java_Main_OP_SUBGROUP_BLOCK_READ_INTEL 5575L
#undef Java_Main_OP_SUBGROUP_BLOCK_WRITE_INTEL
#define Java_Main_OP_SUBGROUP_BLOCK_WRITE_INTEL 5576L
#undef Java_Main_OP_SUBGROUP_IMAGE_BLOCK_READ_INTEL
#define Java_Main_OP_SUBGROUP_IMAGE_BLOCK_READ_INTEL 5577L
#undef Java_Main_OP_SUBGROUP_IMAGE_BLOCK_WRITE_INTEL
#define Java_Main_OP_SUBGROUP_IMAGE_BLOCK_WRITE_INTEL 5578L
#undef Java_Main_OP_SUBGROUP_IMAGE_MEDIA_BLOCK_READ_INTEL
#define Java_Main_OP_SUBGROUP_IMAGE_MEDIA_BLOCK_READ_INTEL 5580L
#undef Java_Main_OP_SUBGROUP_IMAGE_MEDIA_BLOCK_WRITE_INTEL
#define Java_Main_OP_SUBGROUP_IMAGE_MEDIA_BLOCK_WRITE_INTEL 5581L
#undef Java_Main_OP_U_COUNT_LEADING_ZEROS_INTEL
#define Java_Main_OP_U_COUNT_LEADING_ZEROS_INTEL 5585L
#undef Java_Main_OP_U_COUNT_TRAILING_ZEROS_INTEL
#define Java_Main_OP_U_COUNT_TRAILING_ZEROS_INTEL 5586L
#undef Java_Main_OP_ABS_I_SUB_INTEL
#define Java_Main_OP_ABS_I_SUB_INTEL 5587L
#undef Java_Main_OP_ABS_U_SUB_INTEL
#define Java_Main_OP_ABS_U_SUB_INTEL 5588L
#undef Java_Main_OP_I_ADD_SAT_INTEL
#define Java_Main_OP_I_ADD_SAT_INTEL 5589L
#undef Java_Main_OP_U_ADD_SAT_INTEL
#define Java_Main_OP_U_ADD_SAT_INTEL 5590L
#undef Java_Main_OP_I_AVERAGE_INTEL
#define Java_Main_OP_I_AVERAGE_INTEL 5591L
#undef Java_Main_OP_U_AVERAGE_INTEL
#define Java_Main_OP_U_AVERAGE_INTEL 5592L
#undef Java_Main_OP_I_AVERAGE_ROUNDED_INTEL
#define Java_Main_OP_I_AVERAGE_ROUNDED_INTEL 5593L
#undef Java_Main_OP_U_AVERAGE_ROUNDED_INTEL
#define Java_Main_OP_U_AVERAGE_ROUNDED_INTEL 5594L
#undef Java_Main_OP_I_SUB_SAT_INTEL
#define Java_Main_OP_I_SUB_SAT_INTEL 5595L
#undef Java_Main_OP_U_SUB_SAT_INTEL
#define Java_Main_OP_U_SUB_SAT_INTEL 5596L
#undef Java_Main_OP_I_MUL_32X16_INTEL
#define Java_Main_OP_I_MUL_32X16_INTEL 5597L
#undef Java_Main_OP_U_MUL_32X16_INTEL
#define Java_Main_OP_U_MUL_32X16_INTEL 5598L
#undef Java_Main_OP_FUNCTION_POINTER_INTEL
#define Java_Main_OP_FUNCTION_POINTER_INTEL 5600L
#undef Java_Main_OP_FUNCTION_POINTER_CALL_INTEL
#define Java_Main_OP_FUNCTION_POINTER_CALL_INTEL 5601L
#undef Java_Main_OP_DECORATE_STRING
#define Java_Main_OP_DECORATE_STRING 5632L
#undef Java_Main_OP_DECORATE_STRING_GOOGLE
#define Java_Main_OP_DECORATE_STRING_GOOGLE 5632L
#undef Java_Main_OP_MEMBER_DECORATE_STRING
#define Java_Main_OP_MEMBER_DECORATE_STRING 5633L
#undef Java_Main_OP_MEMBER_DECORATE_STRING_GOOGLE
#define Java_Main_OP_MEMBER_DECORATE_STRING_GOOGLE 5633L
#undef Java_Main_OP_VME_IMAGE_INTEL
#define Java_Main_OP_VME_IMAGE_INTEL 5699L
#undef Java_Main_OP_TYPE_VME_IMAGE_INTEL
#define Java_Main_OP_TYPE_VME_IMAGE_INTEL 5700L
#undef Java_Main_OP_TYPE_AVC_IME_PAYLOAD_INTEL
#define Java_Main_OP_TYPE_AVC_IME_PAYLOAD_INTEL 5701L
#undef Java_Main_OP_TYPE_AVC_REF_PAYLOAD_INTEL
#define Java_Main_OP_TYPE_AVC_REF_PAYLOAD_INTEL 5702L
#undef Java_Main_OP_TYPE_AVC_SIC_PAYLOAD_INTEL
#define Java_Main_OP_TYPE_AVC_SIC_PAYLOAD_INTEL 5703L
#undef Java_Main_OP_TYPE_AVC_MCE_PAYLOAD_INTEL
#define Java_Main_OP_TYPE_AVC_MCE_PAYLOAD_INTEL 5704L
#undef Java_Main_OP_TYPE_AVC_MCE_RESULT_INTEL
#define Java_Main_OP_TYPE_AVC_MCE_RESULT_INTEL 5705L
#undef Java_Main_OP_TYPE_AVC_IME_RESULT_INTEL
#define Java_Main_OP_TYPE_AVC_IME_RESULT_INTEL 5706L
#undef Java_Main_OP_TYPE_AVC_IME_RESULT_SINGLE_REFERENCE_STREAMOUT_INTEL
#define Java_Main_OP_TYPE_AVC_IME_RESULT_SINGLE_REFERENCE_STREAMOUT_INTEL 5707L
#undef Java_Main_OP_TYPE_AVC_IME_RESULT_DUAL_REFERENCE_STREAMOUT_INTEL
#define Java_Main_OP_TYPE_AVC_IME_RESULT_DUAL_REFERENCE_STREAMOUT_INTEL 5708L
#undef Java_Main_OP_TYPE_AVC_IME_SINGLE_REFERENCE_STREAMIN_INTEL
#define Java_Main_OP_TYPE_AVC_IME_SINGLE_REFERENCE_STREAMIN_INTEL 5709L
#undef Java_Main_OP_TYPE_AVC_IME_DUAL_REFERENCE_STREAMIN_INTEL
#define Java_Main_OP_TYPE_AVC_IME_DUAL_REFERENCE_STREAMIN_INTEL 5710L
#undef Java_Main_OP_TYPE_AVC_REF_RESULT_INTEL
#define Java_Main_OP_TYPE_AVC_REF_RESULT_INTEL 5711L
#undef Java_Main_OP_TYPE_AVC_SIC_RESULT_INTEL
#define Java_Main_OP_TYPE_AVC_SIC_RESULT_INTEL 5712L
#undef Java_Main_OP_SUBGROUP_AVC_MCE_GET_DEFAULT_INTER_BASE_MULTI_REFERENCE_PENALTY_INTEL
#define Java_Main_OP_SUBGROUP_AVC_MCE_GET_DEFAULT_INTER_BASE_MULTI_REFERENCE_PENALTY_INTEL 5713L
#undef Java_Main_OP_SUBGROUP_AVC_MCE_SET_INTER_BASE_MULTI_REFERENCE_PENALTY_INTEL
#define Java_Main_OP_SUBGROUP_AVC_MCE_SET_INTER_BASE_MULTI_REFERENCE_PENALTY_INTEL 5714L
#undef Java_Main_OP_SUBGROUP_AVC_MCE_GET_DEFAULT_INTER_SHAPE_PENALTY_INTEL
#define Java_Main_OP_SUBGROUP_AVC_MCE_GET_DEFAULT_INTER_SHAPE_PENALTY_INTEL 5715L
#undef Java_Main_OP_SUBGROUP_AVC_MCE_SET_INTER_SHAPE_PENALTY_INTEL
#define Java_Main_OP_SUBGROUP_AVC_MCE_SET_INTER_SHAPE_PENALTY_INTEL 5716L
#undef Java_Main_OP_SUBGROUP_AVC_MCE_GET_DEFAULT_INTER_DIRECTION_PENALTY_INTEL
#define Java_Main_OP_SUBGROUP_AVC_MCE_GET_DEFAULT_INTER_DIRECTION_PENALTY_INTEL 5717L
#undef Java_Main_OP_SUBGROUP_AVC_MCE_SET_INTE_DIRECTION_PENALTY_INTEL
#define Java_Main_OP_SUBGROUP_AVC_MCE_SET_INTE_DIRECTION_PENALTY_INTEL 5718L
#undef Java_Main_OP_SUBGROUP_AVC_MCE_GET_DEFAULT_INTRA_LUMA_SHAPE_PENALTY_INTEL
#define Java_Main_OP_SUBGROUP_AVC_MCE_GET_DEFAULT_INTRA_LUMA_SHAPE_PENALTY_INTEL 5719L
#undef Java_Main_OP_SUBGROUP_AVC_MCE_GET_DEFAULT_INTER_MOTION_VECTOR_COST_TABLE_INTEL
#define Java_Main_OP_SUBGROUP_AVC_MCE_GET_DEFAULT_INTER_MOTION_VECTOR_COST_TABLE_INTEL 5720L
#undef Java_Main_OP_SUBGROUP_AVC_MCE_GET_DEFAULT_HIGH_PENALTY_COST_TABLE_INTEL
#define Java_Main_OP_SUBGROUP_AVC_MCE_GET_DEFAULT_HIGH_PENALTY_COST_TABLE_INTEL 5721L
#undef Java_Main_OP_SUBGROUP_AVC_MCE_GET_DEFAULT_MEDIUM_PENALTY_COST_TABLE_INTEL
#define Java_Main_OP_SUBGROUP_AVC_MCE_GET_DEFAULT_MEDIUM_PENALTY_COST_TABLE_INTEL 5722L
#undef Java_Main_OP_SUBGROUP_AVC_MCE_GET_DEFAULT_LOW_PENALTY_COST_TABLE_INTEL
#define Java_Main_OP_SUBGROUP_AVC_MCE_GET_DEFAULT_LOW_PENALTY_COST_TABLE_INTEL 5723L
#undef Java_Main_OP_SUBGROUP_AVC_MCE_SET_MOTION_VECTOR_COST_FUNCTION_INTEL
#define Java_Main_OP_SUBGROUP_AVC_MCE_SET_MOTION_VECTOR_COST_FUNCTION_INTEL 5724L
#undef Java_Main_OP_SUBGROUP_AVC_MCE_GET_DEFAULT_INTRA_LUMA_MODE_PENALTY_INTEL
#define Java_Main_OP_SUBGROUP_AVC_MCE_GET_DEFAULT_INTRA_LUMA_MODE_PENALTY_INTEL 5725L
#undef Java_Main_OP_SUBGROUP_AVC_MCE_GET_DEFAULT_NON_DC_LUMA_INTRA_PENALTY_INTEL
#define Java_Main_OP_SUBGROUP_AVC_MCE_GET_DEFAULT_NON_DC_LUMA_INTRA_PENALTY_INTEL 5726L
#undef Java_Main_OP_SUBGROUP_AVC_MCE_GET_DEFAULT_INTRA_CHROMA_MODE_BASE_PENALTY_INTEL
#define Java_Main_OP_SUBGROUP_AVC_MCE_GET_DEFAULT_INTRA_CHROMA_MODE_BASE_PENALTY_INTEL 5727L
#undef Java_Main_OP_SUBGROUP_AVC_MCE_SET_AC_ONLY_HAAR_INTEL
#define Java_Main_OP_SUBGROUP_AVC_MCE_SET_AC_ONLY_HAAR_INTEL 5728L
#undef Java_Main_OP_SUBGROUP_AVC_MCE_SET_SOURCE_INTERLACED_FIELD_POLARITY_INTEL
#define Java_Main_OP_SUBGROUP_AVC_MCE_SET_SOURCE_INTERLACED_FIELD_POLARITY_INTEL 5729L
#undef Java_Main_OP_SUBGROUP_AVC_MCE_SET_SINGLE_REFERENCE_INTERLACED_FIELD_POLARITY_INTEL
#define Java_Main_OP_SUBGROUP_AVC_MCE_SET_SINGLE_REFERENCE_INTERLACED_FIELD_POLARITY_INTEL 5730L
#undef Java_Main_OP_SUBGROUP_AVC_MCE_SET_DUAL_REFERENCE_INTERLACED_FIELD_POLARITIES_INTEL
#define Java_Main_OP_SUBGROUP_AVC_MCE_SET_DUAL_REFERENCE_INTERLACED_FIELD_POLARITIES_INTEL 5731L
#undef Java_Main_OP_SUBGROUP_AVC_MCE_CONVERT_TO_IME_PAYLOAD_INTEL
#define Java_Main_OP_SUBGROUP_AVC_MCE_CONVERT_TO_IME_PAYLOAD_INTEL 5732L
#undef Java_Main_OP_SUBGROUP_AVC_MCE_CONVERT_TO_IME_RESULT_INTEL
#define Java_Main_OP_SUBGROUP_AVC_MCE_CONVERT_TO_IME_RESULT_INTEL 5733L
#undef Java_Main_OP_SUBGROUP_AVC_MCE_CONVERT_TO_REF_PAYLOAD_INTEL
#define Java_Main_OP_SUBGROUP_AVC_MCE_CONVERT_TO_REF_PAYLOAD_INTEL 5734L
#undef Java_Main_OP_SUBGROUP_AVC_MCE_CONVERT_TO_REF_RESULT_INTEL
#define Java_Main_OP_SUBGROUP_AVC_MCE_CONVERT_TO_REF_RESULT_INTEL 5735L
#undef Java_Main_OP_SUBGROUP_AVC_MCE_CONVERT_TO_SIC_PAYLOAD_INTEL
#define Java_Main_OP_SUBGROUP_AVC_MCE_CONVERT_TO_SIC_PAYLOAD_INTEL 5736L
#undef Java_Main_OP_SUBGROUP_AVC_MCE_CONVERT_TO_SIC_RESULT_INTEL
#define Java_Main_OP_SUBGROUP_AVC_MCE_CONVERT_TO_SIC_RESULT_INTEL 5737L
#undef Java_Main_OP_SUBGROUP_AVC_MCE_GET_MOTION_VECTORS_INTEL
#define Java_Main_OP_SUBGROUP_AVC_MCE_GET_MOTION_VECTORS_INTEL 5738L
#undef Java_Main_OP_SUBGROUP_AVC_MCE_GET_INTER_DISTORTIONS_INTEL
#define Java_Main_OP_SUBGROUP_AVC_MCE_GET_INTER_DISTORTIONS_INTEL 5739L
#undef Java_Main_OP_SUBGROUP_AVC_MCE_GET_BEST_INTER_DISTORTIONS_INTEL
#define Java_Main_OP_SUBGROUP_AVC_MCE_GET_BEST_INTER_DISTORTIONS_INTEL 5740L
#undef Java_Main_OP_SUBGROUP_AVC_MCE_GET_INTER_MAJOR_SHAPE_INTEL
#define Java_Main_OP_SUBGROUP_AVC_MCE_GET_INTER_MAJOR_SHAPE_INTEL 5741L
#undef Java_Main_OP_SUBGROUP_AVC_MCE_GET_INTER_MINOR_SHAPE_INTEL
#define Java_Main_OP_SUBGROUP_AVC_MCE_GET_INTER_MINOR_SHAPE_INTEL 5742L
#undef Java_Main_OP_SUBGROUP_AVC_MCE_GET_INTER_DIRECTIONS_INTEL
#define Java_Main_OP_SUBGROUP_AVC_MCE_GET_INTER_DIRECTIONS_INTEL 5743L
#undef Java_Main_OP_SUBGROUP_AVC_MCE_GET_INTER_MOTION_VECTOR_COUNT_INTEL
#define Java_Main_OP_SUBGROUP_AVC_MCE_GET_INTER_MOTION_VECTOR_COUNT_INTEL 5744L
#undef Java_Main_OP_SUBGROUP_AVC_MCE_GET_INTER_REFERENCE_IDS_INTEL
#define Java_Main_OP_SUBGROUP_AVC_MCE_GET_INTER_REFERENCE_IDS_INTEL 5745L
#undef Java_Main_OP_SUBGROUP_AVC_MCE_GET_INTER_REFERENCE_INTERLACED_FIELD_POLARITIES_INTEL
#define Java_Main_OP_SUBGROUP_AVC_MCE_GET_INTER_REFERENCE_INTERLACED_FIELD_POLARITIES_INTEL 5746L
#undef Java_Main_Op_Subgroup_Avc_Ime_Initialize_INTEL
#define Java_Main_Op_Subgroup_Avc_Ime_Initialize_INTEL 5747L
#undef Java_Main_OP_SUBGROUP_AVC_IME_SET_SINGLE_REFERENCE_INTEL
#define Java_Main_OP_SUBGROUP_AVC_IME_SET_SINGLE_REFERENCE_INTEL 5748L
#undef Java_Main_OP_SUBGROUP_AVC_IME_SET_DUAL_REFERENCE_INTEL
#define Java_Main_OP_SUBGROUP_AVC_IME_SET_DUAL_REFERENCE_INTEL 5749L
#undef Java_Main_OP_SUBGROUP_AVC_IME_REF_WINDOW_SIZE_INTEL
#define Java_Main_OP_SUBGROUP_AVC_IME_REF_WINDOW_SIZE_INTEL 5750L
#undef Java_Main_OP_SUBGROUP_AVC_IME_ADJUST_REF_OFFSET_INTEL
#define Java_Main_OP_SUBGROUP_AVC_IME_ADJUST_REF_OFFSET_INTEL 5751L
#undef Java_Main_OP_SUBGROUP_AVC_IME_CONVERT_TO_MCE_PAYLOAD_INTEL
#define Java_Main_OP_SUBGROUP_AVC_IME_CONVERT_TO_MCE_PAYLOAD_INTEL 5752L
#undef Java_Main_OP_SUBGROUP_AVC_IME_SET_MAX_MOTION_VECTOR_COUNT_INTEL
#define Java_Main_OP_SUBGROUP_AVC_IME_SET_MAX_MOTION_VECTOR_COUNT_INTEL 5753L
#undef Java_Main_OP_SUBGROUP_AVC_IME_SET_UNIDIRECTIONAL_MIX_DISABLE_INTEL
#define Java_Main_OP_SUBGROUP_AVC_IME_SET_UNIDIRECTIONAL_MIX_DISABLE_INTEL 5754L
#undef Java_Main_OP_SUBGROUP_AVC_IME_SET_EARLY_SEARCH_TERMINATION_THRESHOLD_INTEL
#define Java_Main_OP_SUBGROUP_AVC_IME_SET_EARLY_SEARCH_TERMINATION_THRESHOLD_INTEL 5755L
#undef Java_Main_OP_SUBGROUP_AVC_IME_SET_WEIGHTED_SAD_INTEL
#define Java_Main_OP_SUBGROUP_AVC_IME_SET_WEIGHTED_SAD_INTEL 5756L
#undef Java_Main_OP_SUBGROUP_AVC_IME_EVALUATE_WITH_SINGLE_REFERENCE_INTEL
#define Java_Main_OP_SUBGROUP_AVC_IME_EVALUATE_WITH_SINGLE_REFERENCE_INTEL 5757L
#undef Java_Main_OP_SUBGROUP_AVC_IME_EVALUATE_WITH_DUAL_REFERENCE_INTEL
#define Java_Main_OP_SUBGROUP_AVC_IME_EVALUATE_WITH_DUAL_REFERENCE_INTEL 5758L
#undef Java_Main_OP_SUBGROUP_AVC_IME_EVALUATE_WITH_SINGLE_REFERENCE_STREAMIN_INTEL
#define Java_Main_OP_SUBGROUP_AVC_IME_EVALUATE_WITH_SINGLE_REFERENCE_STREAMIN_INTEL 5759L
#undef Java_Main_OP_SUBGROUP_AVC_IME_EVALUATE_WITH_DUAL_REFERENCE_STREAMIN_INTEL
#define Java_Main_OP_SUBGROUP_AVC_IME_EVALUATE_WITH_DUAL_REFERENCE_STREAMIN_INTEL 5760L
#undef Java_Main_OP_SUBGROUP_AVC_IME_EVALUATE_WITH_SINGLE_REFERENCE_STREAMOUT_INTEL
#define Java_Main_OP_SUBGROUP_AVC_IME_EVALUATE_WITH_SINGLE_REFERENCE_STREAMOUT_INTEL 5761L
#undef Java_Main_OP_SUBGROUP_AVC_IME_EVALUATE_WITH_DUAL_REFERENCE_STREAMOUT_INTEL
#define Java_Main_OP_SUBGROUP_AVC_IME_EVALUATE_WITH_DUAL_REFERENCE_STREAMOUT_INTEL 5762L
#undef Java_Main_OP_SUBGROUP_AVC_IME_EVALUATE_WITH_SINGLE_REFERENCE_STREAMINOUT_INTEL
#define Java_Main_OP_SUBGROUP_AVC_IME_EVALUATE_WITH_SINGLE_REFERENCE_STREAMINOUT_INTEL 5763L
#undef Java_Main_OP_SUBGROUP_AVC_IME_EVALUATE_WITH_DUAL_REFERENCE_STREAMINOUT_INTEL
#define Java_Main_OP_SUBGROUP_AVC_IME_EVALUATE_WITH_DUAL_REFERENCE_STREAMINOUT_INTEL 5764L
#undef Java_Main_OP_SUBGROUP_AVC_IME_CONVERT_TO_MCE_RESULT_INTEL
#define Java_Main_OP_SUBGROUP_AVC_IME_CONVERT_TO_MCE_RESULT_INTEL 5765L
#undef Java_Main_OP_SUBGROUP_AVC_IME_GET_SINGLE_REFERENCE_STREAMIN_INTEL
#define Java_Main_OP_SUBGROUP_AVC_IME_GET_SINGLE_REFERENCE_STREAMIN_INTEL 5766L
#undef Java_Main_OP_SUBGROUP_AVC_IME_GET_DUAL_REFERENCE_STREAMIN_INTEL
#define Java_Main_OP_SUBGROUP_AVC_IME_GET_DUAL_REFERENCE_STREAMIN_INTEL 5767L
#undef Java_Main_OP_SUBGROUP_AVC_IME_STRIP_SINGLE_REFERENCE_STREAMOUT_INTEL
#define Java_Main_OP_SUBGROUP_AVC_IME_STRIP_SINGLE_REFERENCE_STREAMOUT_INTEL 5768L
#undef Java_Main_OP_SUBGROUP_AVC_IME_STRIP_DUAL_REFERENCE_STREAMOUT_INTEL
#define Java_Main_OP_SUBGROUP_AVC_IME_STRIP_DUAL_REFERENCE_STREAMOUT_INTEL 5769L
#undef Java_Main_OP_SUBGROUP_AVC_IME_GET_STREAMOUT_SINGLE_REFERENCE_MAJOR_SHAPE_MOTION_VECTORS_INTEL
#define Java_Main_OP_SUBGROUP_AVC_IME_GET_STREAMOUT_SINGLE_REFERENCE_MAJOR_SHAPE_MOTION_VECTORS_INTEL 5770L
#undef Java_Main_OP_SUBGROUP_AVC_IME_GET_STREAMOUT_SINGLE_REFERENCE_MAJOR_SHAPE_DISTORTIONS_INTEL
#define Java_Main_OP_SUBGROUP_AVC_IME_GET_STREAMOUT_SINGLE_REFERENCE_MAJOR_SHAPE_DISTORTIONS_INTEL 5771L
#undef Java_Main_OP_SUBGROUP_AVC_IME_GET_STREAMOUT_SINGLE_REFERENCE_MAJOR_SHAPE_REFERENCE_IDS_INTEL
#define Java_Main_OP_SUBGROUP_AVC_IME_GET_STREAMOUT_SINGLE_REFERENCE_MAJOR_SHAPE_REFERENCE_IDS_INTEL 5772L
#undef Java_Main_OP_SUBGROUP_AVC_IME_GET_STREAMOUT_DUAL_REFERENCE_MAJOR_SHAPE_MOTION_VECTORS_INTEL
#define Java_Main_OP_SUBGROUP_AVC_IME_GET_STREAMOUT_DUAL_REFERENCE_MAJOR_SHAPE_MOTION_VECTORS_INTEL 5773L
#undef Java_Main_OP_SUBGROUP_AVC_IME_GET_STREAMOUT_DUAL_REFERENCE_MAJOR_SHAPE_DISTORTIONS_INTEL
#define Java_Main_OP_SUBGROUP_AVC_IME_GET_STREAMOUT_DUAL_REFERENCE_MAJOR_SHAPE_DISTORTIONS_INTEL 5774L
#undef Java_Main_OP_SUBGROUP_AVC_IME_GET_STREAMOUT_DUAL_REFERENCE_MAJOR_SHAPE_REFERENCE_IDS_INTEL
#define Java_Main_OP_SUBGROUP_AVC_IME_GET_STREAMOUT_DUAL_REFERENCE_MAJOR_SHAPE_REFERENCE_IDS_INTEL 5775L
#undef Java_Main_OP_SUBGROUP_AVC_IME_GET_BORDER_REACHED_INTEL
#define Java_Main_OP_SUBGROUP_AVC_IME_GET_BORDER_REACHED_INTEL 5776L
#undef Java_Main_OP_SUBGROUP_AVC_IME_GET_TRUNCATED_SEARCH_INDICATION_INTEL
#define Java_Main_OP_SUBGROUP_AVC_IME_GET_TRUNCATED_SEARCH_INDICATION_INTEL 5777L
#undef Java_Main_OP_SUBGROUP_AVC_IME_GET_UNIDIRECTIONAL_EARLY_SEARCH_TERMINATION_INTEL
#define Java_Main_OP_SUBGROUP_AVC_IME_GET_UNIDIRECTIONAL_EARLY_SEARCH_TERMINATION_INTEL 5778L
#undef Java_Main_OP_SUBGROUP_AVC_IME_GET_WEIGHTING_PATTERN_MINIMUM_MOTION_VECTOR_INTEL
#define Java_Main_OP_SUBGROUP_AVC_IME_GET_WEIGHTING_PATTERN_MINIMUM_MOTION_VECTOR_INTEL 5779L
#undef Java_Main_OP_SUBGROUP_AVC_IME_GET_WEIGHTING_PATTERN_MINIMUM_DISTORTION_INTEL
#define Java_Main_OP_SUBGROUP_AVC_IME_GET_WEIGHTING_PATTERN_MINIMUM_DISTORTION_INTEL 5780L
#undef Java_Main_OP_SUBGROUP_AVC_FME_INITIALIZE_INTEL
#define Java_Main_OP_SUBGROUP_AVC_FME_INITIALIZE_INTEL 5781L
#undef Java_Main_OP_SUBGROUP_AVC_BME_INITIALIZE_INTEL
#define Java_Main_OP_SUBGROUP_AVC_BME_INITIALIZE_INTEL 5782L
#undef Java_Main_OP_SUBGROUP_AVC_REF_CONVERT_TO_MCE_PAYLOAD_INTEL
#define Java_Main_OP_SUBGROUP_AVC_REF_CONVERT_TO_MCE_PAYLOAD_INTEL 5783L
#undef Java_Main_OP_SUBGROUP_AVC_REF_SET_BIDIRECTIONAL_MIX_DISABLE_INTEL
#define Java_Main_OP_SUBGROUP_AVC_REF_SET_BIDIRECTIONAL_MIX_DISABLE_INTEL 5784L
#undef Java_Main_OP_SUBGROUP_AVC_REF_SET_BILINEAR_FILTER_ENABLE_INTEL
#define Java_Main_OP_SUBGROUP_AVC_REF_SET_BILINEAR_FILTER_ENABLE_INTEL 5785L
#undef Java_Main_OP_SUBGROUP_AVC_REF_EVALUATE_WITH_SINGLE_REFERENCE_INTEL
#define Java_Main_OP_SUBGROUP_AVC_REF_EVALUATE_WITH_SINGLE_REFERENCE_INTEL 5786L
#undef Java_Main_OP_SUBGROUP_AVC_REF_EVALUATE_WITH_DUAL_REFERENCE_INTEL
#define Java_Main_OP_SUBGROUP_AVC_REF_EVALUATE_WITH_DUAL_REFERENCE_INTEL 5787L
#undef Java_Main_OP_SUBGROUP_AVC_REF_EVALUATE_WITH_MULTI_REFERENCE_INTEL
#define Java_Main_OP_SUBGROUP_AVC_REF_EVALUATE_WITH_MULTI_REFERENCE_INTEL 5788L
#undef Java_Main_OP_SUBGROUP_AVC_REF_EVALUATE_WITH_MULTI_REFERENCE_INTERLACED_INTEL
#define Java_Main_OP_SUBGROUP_AVC_REF_EVALUATE_WITH_MULTI_REFERENCE_INTERLACED_INTEL 5789L
#undef Java_Main_OP_SUBGROUP_AVC_REF_CONVERT_TO_MCE_RESULT_INTEL
#define Java_Main_OP_SUBGROUP_AVC_REF_CONVERT_TO_MCE_RESULT_INTEL 5790L
#undef Java_Main_OP_SUBGROUP_AVC_SIC_INITIALIZE_INTEL
#define Java_Main_OP_SUBGROUP_AVC_SIC_INITIALIZE_INTEL 5791L
#undef Java_Main_OP_SUBGROUP_AVC_SIC_CONFIGURE_SKC_INTEL
#define Java_Main_OP_SUBGROUP_AVC_SIC_CONFIGURE_SKC_INTEL 5792L
#undef Java_Main_OP_SUBGROUP_AVC_SIC_CONFIGURE_IPE_LUMA_INTEL
#define Java_Main_OP_SUBGROUP_AVC_SIC_CONFIGURE_IPE_LUMA_INTEL 5793L
#undef Java_Main_OP_SUBGROUP_AVC_SIC_CONFIGURE_IPE_LUMA_CHROMA_INTEL
#define Java_Main_OP_SUBGROUP_AVC_SIC_CONFIGURE_IPE_LUMA_CHROMA_INTEL 5794L
#undef Java_Main_OP_SUBGROUP_AVC_SIC_GET_MOTION_VECTOR_MASK_INTEL
#define Java_Main_OP_SUBGROUP_AVC_SIC_GET_MOTION_VECTOR_MASK_INTEL 5795L
#undef Java_Main_OP_SUBGROUP_AVC_SIC_CONVERT_TO_MCE_PAYLOAD_INTEL
#define Java_Main_OP_SUBGROUP_AVC_SIC_CONVERT_TO_MCE_PAYLOAD_INTEL 5796L
#undef Java_Main_OP_SUBGROUP_AVC_SIC_SET_INTRA_LUMA_SHAPE_PENALTY_INTEL
#define Java_Main_OP_SUBGROUP_AVC_SIC_SET_INTRA_LUMA_SHAPE_PENALTY_INTEL 5797L
#undef Java_Main_OP_SUBGROUP_AVC_SIC_SET_INTRA_LUMA_MODE_COST_FUNCTION_INTEL
#define Java_Main_OP_SUBGROUP_AVC_SIC_SET_INTRA_LUMA_MODE_COST_FUNCTION_INTEL 5798L
#undef Java_Main_OP_SUBGROUP_AVC_SIC_SET_INTRA_CHROMA_MODE_COST_FUNCTION_INTEL
#define Java_Main_OP_SUBGROUP_AVC_SIC_SET_INTRA_CHROMA_MODE_COST_FUNCTION_INTEL 5799L
#undef Java_Main_OP_SUBGROUP_AVC_SIC_SET_BILINEAR_FILTER_ENABLE_INTEL
#define Java_Main_OP_SUBGROUP_AVC_SIC_SET_BILINEAR_FILTER_ENABLE_INTEL 5800L
#undef Java_Main_OP_SUBGROUP_AVC_SIC_SET_SKC_FORWARD_TRANSFORM_ENABLE_INTEL
#define Java_Main_OP_SUBGROUP_AVC_SIC_SET_SKC_FORWARD_TRANSFORM_ENABLE_INTEL 5801L
#undef Java_Main_OP_SUBGROUP_AVC_SIC_SET_BLOCK_BASED_RAW_SKIP_SAD_INTEL
#define Java_Main_OP_SUBGROUP_AVC_SIC_SET_BLOCK_BASED_RAW_SKIP_SAD_INTEL 5802L
#undef Java_Main_OP_SUBGROUP_AVC_SIC_EVALUATE_IPE_INTEL
#define Java_Main_OP_SUBGROUP_AVC_SIC_EVALUATE_IPE_INTEL 5803L
#undef Java_Main_OP_SUBGROUP_AVC_SIC_EVALUATE_WITH_SINGLE_REFERENCE_INTEL
#define Java_Main_OP_SUBGROUP_AVC_SIC_EVALUATE_WITH_SINGLE_REFERENCE_INTEL 5804L
#undef Java_Main_OP_SUBGROUP_AVC_SIC_EVALUATE_WITH_DUAL_REFERENCE_INTEL
#define Java_Main_OP_SUBGROUP_AVC_SIC_EVALUATE_WITH_DUAL_REFERENCE_INTEL 5805L
#undef Java_Main_OP_SUBGROUP_AVC_SIC_EVALUATE_WITH_MULTI_REFERENCE_INTEL
#define Java_Main_OP_SUBGROUP_AVC_SIC_EVALUATE_WITH_MULTI_REFERENCE_INTEL 5806L
#undef Java_Main_OP_SUBGROUP_AVC_SIC_EVALUATE_WITH_MULTI_REFERENCE_INTERLACED_INTEL
#define Java_Main_OP_SUBGROUP_AVC_SIC_EVALUATE_WITH_MULTI_REFERENCE_INTERLACED_INTEL 5807L
#undef Java_Main_OP_SUBGROUP_AVC_SIC_CONVERT_TO_MCE_RESULT_INTEL
#define Java_Main_OP_SUBGROUP_AVC_SIC_CONVERT_TO_MCE_RESULT_INTEL 5808L
#undef Java_Main_OP_SUBGROUP_AVC_SIC_GET_IPE_LUMA_SHAPE_INTEL
#define Java_Main_OP_SUBGROUP_AVC_SIC_GET_IPE_LUMA_SHAPE_INTEL 5809L
#undef Java_Main_OP_SUBGROUP_AVC_SIC_GET_BEST_IPE_LUMA_DISTORTION_INTEL
#define Java_Main_OP_SUBGROUP_AVC_SIC_GET_BEST_IPE_LUMA_DISTORTION_INTEL 5810L
#undef Java_Main_OP_SUBGROUP_AVC_SIC_GET_BEST_IPE_CHROMA_DISTORTION_INTEL
#define Java_Main_OP_SUBGROUP_AVC_SIC_GET_BEST_IPE_CHROMA_DISTORTION_INTEL 5811L
#undef Java_Main_OP_SUBGROUP_AVC_SIC_GET_PACKED_IPE_LUMA_MODES_INTEL
#define Java_Main_OP_SUBGROUP_AVC_SIC_GET_PACKED_IPE_LUMA_MODES_INTEL 5812L
#undef Java_Main_OP_SUBGROUP_AVC_SIC_GET_IPE_CHROMA_MODE_INTEL
#define Java_Main_OP_SUBGROUP_AVC_SIC_GET_IPE_CHROMA_MODE_INTEL 5813L
#undef Java_Main_OP_SUBGROUP_AVC_SIC_GET_PACKED_SKC_LUMA_COUNT_THRESHOLD_INTEL
#define Java_Main_OP_SUBGROUP_AVC_SIC_GET_PACKED_SKC_LUMA_COUNT_THRESHOLD_INTEL 5814L
#undef Java_Main_OP_SUBGROUP_AVC_SIC_GET_PACKED_SKC_LUMA_SUM_THRESHOLD_INTEL
#define Java_Main_OP_SUBGROUP_AVC_SIC_GET_PACKED_SKC_LUMA_SUM_THRESHOLD_INTEL 5815L
#undef Java_Main_OP_SUBGROUP_AVC_SIC_GET_INTER_RAW_SADS_INTEL
#define Java_Main_OP_SUBGROUP_AVC_SIC_GET_INTER_RAW_SADS_INTEL 5816L
#undef Java_Main_OP_LOOP_CONTROL_INTEL
#define Java_Main_OP_LOOP_CONTROL_INTEL 5887L
#undef Java_Main_OP_READ_PIPE_BLOCKING_INTEL
#define Java_Main_OP_READ_PIPE_BLOCKING_INTEL 5946L
#undef Java_Main_OP_WRITE_PIPE_BLOCKING_INTEL
#define Java_Main_OP_WRITE_PIPE_BLOCKING_INTEL 5947L
#undef Java_Main_OP_FPGA_REG_INTEL
#define Java_Main_OP_FPGA_REG_INTEL 5949L
#undef Java_Main_OP_RAY_QUERY_GET_RAYTMIN_KHR
#define Java_Main_OP_RAY_QUERY_GET_RAYTMIN_KHR 6016L
#undef Java_Main_OP_RAY_QUERY_GET_RAYFLAGS_KHR
#define Java_Main_OP_RAY_QUERY_GET_RAYFLAGS_KHR 6017L
#undef Java_Main_OP_RAY_QUERY_GET_INTERSECTION_T_KHR
#define Java_Main_OP_RAY_QUERY_GET_INTERSECTION_T_KHR 6018L
#undef Java_Main_OP_RAY_QUERY_GET_INTERSECTION_INSTANCE_CUSTOM_INDEX_KHR
#define Java_Main_OP_RAY_QUERY_GET_INTERSECTION_INSTANCE_CUSTOM_INDEX_KHR 6019L
#undef Java_Main_OP_RAY_QUERY_GET_INTERSECTION_INSTANCE_ID_KHR
#define Java_Main_OP_RAY_QUERY_GET_INTERSECTION_INSTANCE_ID_KHR 6020L
#undef Java_Main_OP_RAY_QUERY_GET_INTERSECTION_INSTANCE_SHADER_BINDING_TABLE_RECORD_OFFSET_KHR
#define Java_Main_OP_RAY_QUERY_GET_INTERSECTION_INSTANCE_SHADER_BINDING_TABLE_RECORD_OFFSET_KHR 6021L
#undef Java_Main_OP_RAY_QUERY_GET_INTERSECTION_GEOMETRY_INDEX_KHR
#define Java_Main_OP_RAY_QUERY_GET_INTERSECTION_GEOMETRY_INDEX_KHR 6022L
#undef Java_Main_OP_RAY_QUERY_GET_INTERSECTION_PRIMITIVE_INDEX_KHR
#define Java_Main_OP_RAY_QUERY_GET_INTERSECTION_PRIMITIVE_INDEX_KHR 6023L
#undef Java_Main_OP_RAY_QUERY_GET_INTERSECTION_BARYCENTRICS_KHR
#define Java_Main_OP_RAY_QUERY_GET_INTERSECTION_BARYCENTRICS_KHR 6024L
#undef Java_Main_OP_RAY_QUERY_GET_INTERSECTION_FRONT_FACE_KHR
#define Java_Main_OP_RAY_QUERY_GET_INTERSECTION_FRONT_FACE_KHR 6025L
#undef Java_Main_OP_RAY_QUERY_GET_INTERSECTION_CANDIDATE_AABB_OPAQUE_KHR
#define Java_Main_OP_RAY_QUERY_GET_INTERSECTION_CANDIDATE_AABB_OPAQUE_KHR 6026L
#undef Java_Main_OP_RAY_QUERY_GET_INTERSECTION_OBJECT_RAY_DIRECTION_KHR
#define Java_Main_OP_RAY_QUERY_GET_INTERSECTION_OBJECT_RAY_DIRECTION_KHR 6027L
#undef Java_Main_OP_RAY_QUERY_GET_INTERSECTION_OBJECT_RAY_ORIGIN_KHR
#define Java_Main_OP_RAY_QUERY_GET_INTERSECTION_OBJECT_RAY_ORIGIN_KHR 6028L
#undef Java_Main_OP_RAY_QUERY_GET_WORLD_RAY_DIRECTION_KHR
#define Java_Main_OP_RAY_QUERY_GET_WORLD_RAY_DIRECTION_KHR 6029L
#undef Java_Main_OP_RAY_QUERY_GET_WORLD_RAY_ORIGIN_KHR
#define Java_Main_OP_RAY_QUERY_GET_WORLD_RAY_ORIGIN_KHR 6030L
#undef Java_Main_OP_RAY_QUERY_GET_INTERSECTION_OBJECT_TO_WORLD_KHR
#define Java_Main_OP_RAY_QUERY_GET_INTERSECTION_OBJECT_TO_WORLD_KHR 6031L
#undef Java_Main_OP_RAY_QUERY_GET_INTERSECTION_WORLD_TO_OBJECT_KHR
#define Java_Main_OP_RAY_QUERY_GET_INTERSECTION_WORLD_TO_OBJECT_KHR 6032L
#undef Java_Main_OP_ATOMIC_F_ADD_EXT
#define Java_Main_OP_ATOMIC_F_ADD_EXT 6035L
#undef Java_Main_OP_MAX
#define Java_Main_OP_MAX 2147483647L
#undef Java_Main_REACH_VIA_CONTROL_FLOW
#define Java_Main_REACH_VIA_CONTROL_FLOW 0L
#undef Java_Main_REACH_DEAD_CONTINUE
#define Java_Main_REACH_DEAD_CONTINUE 1L
#undef Java_Main_REACH_DEAD_MERGE
#define Java_Main_REACH_DEAD_MERGE 2L
#undef Java_Main_GLSLANG_ERROR_NONE
#define Java_Main_GLSLANG_ERROR_NONE 0L
#undef Java_Main_GLSLANG_ERROR_INVALID_LENGTH
#define Java_Main_GLSLANG_ERROR_INVALID_LENGTH 1L
#undef Java_Main_GLSLANG_ERROR_ARRAY_INDEX_OUT_OF_BOUNDS
#define Java_Main_GLSLANG_ERROR_ARRAY_INDEX_OUT_OF_BOUNDS 2L
#undef Java_Main_GLSLANG_ERROR_NOT_YET_IMPLEMENTED
#define Java_Main_GLSLANG_ERROR_NOT_YET_IMPLEMENTED 3L
#undef Java_Main_GLSLANG_ERROR_INVALID_ARGUMENT
#define Java_Main_GLSLANG_ERROR_INVALID_ARGUMENT 4L
#undef Java_Main_GLSLANG_ERROR_MODE_NONE
#define Java_Main_GLSLANG_ERROR_MODE_NONE 0L
#undef Java_Main_GLSLANG_ERROR_MODE_CODE
#define Java_Main_GLSLANG_ERROR_MODE_CODE 1L
#undef Java_Main_GLSLANG_ERROR_MODE_EXCEPTION
#define Java_Main_GLSLANG_ERROR_MODE_EXCEPTION 2L
/*
 * Class:     Java_Main
 * Method:    ShInitialize
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_Java_Main_ShInitialize
  (JNIEnv *, jclass);

/*
 * Class:     Java_Main
 * Method:    ShFinalize
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_Java_Main_ShFinalize
  (JNIEnv *, jclass);

/*
 * Class:     Java_Main
 * Method:    TInputLanguage
 * Signature: (IIII)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TInputLanguage__IIII
  (JNIEnv *, jclass, jint, jint, jint, jint);

/*
 * Class:     Java_Main
 * Method:    TInputLanguage
 * Signature: ()[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TInputLanguage__
  (JNIEnv *, jclass);

/*
 * Class:     Java_Main
 * Method:    TInputLanguage_setLanguageFamily
 * Signature: ([BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TInputLanguage_1setLanguageFamily
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TInputLanguage_setStage
 * Signature: ([BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TInputLanguage_1setStage
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TInputLanguage_setDialect
 * Signature: ([BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TInputLanguage_1setDialect
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TInputLanguage_setDialectVersion
 * Signature: ([BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TInputLanguage_1setDialectVersion
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TInputLanguage_getLanguageFamily
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TInputLanguage_1getLanguageFamily
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TInputLanguage_getStage
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TInputLanguage_1getStage
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TInputLanguage_getDialect
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TInputLanguage_1getDialect
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TInputLanguage_getDialectVersion
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TInputLanguage_1getDialectVersion
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TClient
 * Signature: (II)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TClient__II
  (JNIEnv *, jclass, jint, jint);

/*
 * Class:     Java_Main
 * Method:    TClient
 * Signature: ()[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TClient__
  (JNIEnv *, jclass);

/*
 * Class:     Java_Main
 * Method:    TClient_setClient
 * Signature: ([BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TClient_1setClient
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TClient_setVersion
 * Signature: ([BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TClient_1setVersion
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TClient_getClient
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TClient_1getClient
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TClient_getVersion
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TClient_1getVersion
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TTarget
 * Signature: (IIZ)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TTarget__IIZ
  (JNIEnv *, jclass, jint, jint, jboolean);

/*
 * Class:     Java_Main
 * Method:    TTarget
 * Signature: ()[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TTarget__
  (JNIEnv *, jclass);

/*
 * Class:     Java_Main
 * Method:    TTarget_setLanguage
 * Signature: ([BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TTarget_1setLanguage
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TTarget_setVersion
 * Signature: ([BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TTarget_1setVersion
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TTarget_setHlslFunctionality1
 * Signature: ([BZ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TTarget_1setHlslFunctionality1
  (JNIEnv *, jclass, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    TTarget_getLanguage
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TTarget_1getLanguage
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TTarget_getVersion
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TTarget_1getVersion
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TTarget_getHlslFunctionality1
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TTarget_1getHlslFunctionality1
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TEnvironment
 * Signature: ([B[B[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TEnvironment___3B_3B_3B
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TEnvironment
 * Signature: ()[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TEnvironment__
  (JNIEnv *, jclass);

/*
 * Class:     Java_Main
 * Method:    TEnvironment_setInput
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TEnvironment_1setInput
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TEnvironment_setClient
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TEnvironment_1setClient
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TEnvironment_setTarget
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TEnvironment_1setTarget
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TEnvironment_getInput
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TEnvironment_1getInput
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TEnvironment_getClient
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TEnvironment_1getClient
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TEnvironment_getTarget
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TEnvironment_1getTarget
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    ShBinding
 * Signature: (Ljava/lang/String;I)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_ShBinding__Ljava_lang_String_2I
  (JNIEnv *, jclass, jstring, jint);

/*
 * Class:     Java_Main
 * Method:    ShBinding
 * Signature: ()[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_ShBinding__
  (JNIEnv *, jclass);

/*
 * Class:     Java_Main
 * Method:    ShBinding_setName
 * Signature: ([BLjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_ShBinding_1setName
  (JNIEnv *, jclass, jbyteArray, jstring);

/*
 * Class:     Java_Main
 * Method:    ShBinding_setBinding
 * Signature: ([BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_ShBinding_1setBinding
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    ShBinding_getName
 * Signature: ([B)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_Java_Main_ShBinding_1getName
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    ShBinding_getBinding
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_ShBinding_1getBinding
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    ShBindingTable
 * Signature: (I[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_ShBindingTable__I_3B
  (JNIEnv *, jclass, jint, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    ShBindingTable
 * Signature: ()[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_ShBindingTable__
  (JNIEnv *, jclass);

/*
 * Class:     Java_Main
 * Method:    ShBindingTable_setNumBindings
 * Signature: ([BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_ShBindingTable_1setNumBindings
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    ShBindingTable_setBindings
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_ShBindingTable_1setBindings
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    ShBindingTable_getNumBindings
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_ShBindingTable_1getNumBindings
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    ShBindingTable_getBindings
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_ShBindingTable_1getBindings
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    ShConstructCompiler
 * Signature: (II)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_ShConstructCompiler
  (JNIEnv *, jclass, jint, jint);

/*
 * Class:     Java_Main
 * Method:    ShConstructLinker
 * Signature: (II)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_ShConstructLinker
  (JNIEnv *, jclass, jint, jint);

/*
 * Class:     Java_Main
 * Method:    ShConstructUniformMap
 * Signature: ()[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_ShConstructUniformMap
  (JNIEnv *, jclass);

/*
 * Class:     Java_Main
 * Method:    ShDestruct
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_ShDestruct
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TBuiltInResource
 * Signature: ([I[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TBuiltInResource___3I_3B
  (JNIEnv *, jclass, jintArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TBuiltInResource
 * Signature: ()[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TBuiltInResource__
  (JNIEnv *, jclass);

/*
 * Class:     Java_Main
 * Method:    TLimits
 * Signature: ([Z)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TLimits___3Z
  (JNIEnv *, jclass, jbooleanArray);

/*
 * Class:     Java_Main
 * Method:    TLimits
 * Signature: ()[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TLimits__
  (JNIEnv *, jclass);

/*
 * Class:     Java_Main
 * Method:    ShCompile
 * Signature: ([B[Ljava/lang/String;II[BIIZI)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_ShCompile
  (JNIEnv *, jclass, jbyteArray, jobjectArray, jint, jint, jbyteArray, jint, jint, jboolean, jint);

/*
 * Class:     Java_Main
 * Method:    ShLinkExt
 * Signature: ([B[BI)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_ShLinkExt
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    ShSetEncryptionMethod
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_ShSetEncryptionMethod
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    ShGetInfoLog
 * Signature: ([B)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_Java_Main_ShGetInfoLog
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    ShGetExecutable
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_ShGetExecutable
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    ShSetVirtualAttributeBindings
 * Signature: ([B[B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_ShSetVirtualAttributeBindings
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    ShSetFixedAttributeBindings
 * Signature: ([B[B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_ShSetFixedAttributeBindings
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    ShExcludeAttributes
 * Signature: ([B[II)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_ShExcludeAttributes
  (JNIEnv *, jclass, jbyteArray, jintArray, jint);

/*
 * Class:     Java_Main
 * Method:    ShGetUniformLocation
 * Signature: ([BLjava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_ShGetUniformLocation
  (JNIEnv *, jclass, jbyteArray, jstring);

/*
 * Class:     Java_Main
 * Method:    Version
 * Signature: ()[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_Version__
  (JNIEnv *, jclass);

/*
 * Class:     Java_Main
 * Method:    Version
 * Signature: (IIILjava/lang/String;)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_Version__IIILjava_lang_String_2
  (JNIEnv *, jclass, jint, jint, jint, jstring);

/*
 * Class:     Java_Main
 * Method:    Version_setMajor
 * Signature: ([BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_Version_1setMajor
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    Version_setMinor
 * Signature: ([BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_Version_1setMinor
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    Version_setPatch
 * Signature: ([BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_Version_1setPatch
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    Version_getMajor
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_Version_1getMajor
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    Version_getMinor
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_Version_1getMinor
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    Version_getPatch
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_Version_1getPatch
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    Version_getFlavor
 * Signature: ([B)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_Java_Main_Version_1getFlavor
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TShader
 * Signature: (I)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TShader
  (JNIEnv *, jclass, jint);

/*
 * Class:     Java_Main
 * Method:    TShader_setStrings
 * Signature: ([B[Ljava/lang/String;I)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TShader_1setStrings
  (JNIEnv *, jclass, jbyteArray, jobjectArray, jint);

/*
 * Class:     Java_Main
 * Method:    TShader_setStringsWithLengths
 * Signature: ([B[Ljava/lang/String;[II)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TShader_1setStringsWithLengths
  (JNIEnv *, jclass, jbyteArray, jobjectArray, jintArray, jint);

/*
 * Class:     Java_Main
 * Method:    TShader_setStringsWithLengthsAndNames
 * Signature: ([B[Ljava/lang/String;[I[Ljava/lang/String;I)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TShader_1setStringsWithLengthsAndNames
  (JNIEnv *, jclass, jbyteArray, jobjectArray, jintArray, jobjectArray, jint);

/*
 * Class:     Java_Main
 * Method:    TShader_setPreamble
 * Signature: ([BLjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TShader_1setPreamble
  (JNIEnv *, jclass, jbyteArray, jstring);

/*
 * Class:     Java_Main
 * Method:    TShader_setEntryPoint
 * Signature: ([BLjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TShader_1setEntryPoint
  (JNIEnv *, jclass, jbyteArray, jstring);

/*
 * Class:     Java_Main
 * Method:    TShader_setSourceEntryPoint
 * Signature: ([BLjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TShader_1setSourceEntryPoint
  (JNIEnv *, jclass, jbyteArray, jstring);

/*
 * Class:     Java_Main
 * Method:    TShader_addProcesses
 * Signature: ([B[Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TShader_1addProcesses
  (JNIEnv *, jclass, jbyteArray, jobjectArray);

/*
 * Class:     Java_Main
 * Method:    TShader_setShiftBinding
 * Signature: ([BIJ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TShader_1setShiftBinding
  (JNIEnv *, jclass, jbyteArray, jint, jlong);

/*
 * Class:     Java_Main
 * Method:    TShader_setShiftSamplerBinding
 * Signature: ([BJ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TShader_1setShiftSamplerBinding
  (JNIEnv *, jclass, jbyteArray, jlong);

/*
 * Class:     Java_Main
 * Method:    TShader_setShiftTextureBinding
 * Signature: ([BJ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TShader_1setShiftTextureBinding
  (JNIEnv *, jclass, jbyteArray, jlong);

/*
 * Class:     Java_Main
 * Method:    TShader_setShiftImageBinding
 * Signature: ([BJ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TShader_1setShiftImageBinding
  (JNIEnv *, jclass, jbyteArray, jlong);

/*
 * Class:     Java_Main
 * Method:    TShader_setShiftUboBinding
 * Signature: ([BJ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TShader_1setShiftUboBinding
  (JNIEnv *, jclass, jbyteArray, jlong);

/*
 * Class:     Java_Main
 * Method:    TShader_setShiftUavBinding
 * Signature: ([BJ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TShader_1setShiftUavBinding
  (JNIEnv *, jclass, jbyteArray, jlong);

/*
 * Class:     Java_Main
 * Method:    TShader_setShiftCbufferBinding
 * Signature: ([BJ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TShader_1setShiftCbufferBinding
  (JNIEnv *, jclass, jbyteArray, jlong);

/*
 * Class:     Java_Main
 * Method:    TShader_setShiftSsboBinding
 * Signature: ([BJ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TShader_1setShiftSsboBinding
  (JNIEnv *, jclass, jbyteArray, jlong);

/*
 * Class:     Java_Main
 * Method:    TShader_setShiftBindingForSet
 * Signature: ([BIJJ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TShader_1setShiftBindingForSet
  (JNIEnv *, jclass, jbyteArray, jint, jlong, jlong);

/*
 * Class:     Java_Main
 * Method:    TShader_setResourceSetBinding
 * Signature: ([B[Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TShader_1setResourceSetBinding
  (JNIEnv *, jclass, jbyteArray, jobjectArray);

/*
 * Class:     Java_Main
 * Method:    TShader_setAutoMapBindings
 * Signature: ([BZ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TShader_1setAutoMapBindings
  (JNIEnv *, jclass, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    TShader_setAutoMapLocations
 * Signature: ([BZ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TShader_1setAutoMapLocations
  (JNIEnv *, jclass, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    TShader_addUniformLocationOverride
 * Signature: ([BLjava/lang/String;I)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TShader_1addUniformLocationOverride
  (JNIEnv *, jclass, jbyteArray, jstring, jint);

/*
 * Class:     Java_Main
 * Method:    TShader_setUniformLocationBase
 * Signature: ([BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TShader_1setUniformLocationBase
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TShader_setInvertY
 * Signature: ([BZ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TShader_1setInvertY
  (JNIEnv *, jclass, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    TShader_setHlslIoMapping
 * Signature: ([BZ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TShader_1setHlslIoMapping
  (JNIEnv *, jclass, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    TShader_setFlattenUniformArrays
 * Signature: ([BZ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TShader_1setFlattenUniformArrays
  (JNIEnv *, jclass, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    TShader_setNoStorageFormat
 * Signature: ([BZ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TShader_1setNoStorageFormat
  (JNIEnv *, jclass, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    TShader_setNanMinMaxClamp
 * Signature: ([BZ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TShader_1setNanMinMaxClamp
  (JNIEnv *, jclass, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    TShader_setTextureSamplerTransformMode
 * Signature: ([BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TShader_1setTextureSamplerTransformMode
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TShader_setEnvInput
 * Signature: ([BIIII)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TShader_1setEnvInput
  (JNIEnv *, jclass, jbyteArray, jint, jint, jint, jint);

/*
 * Class:     Java_Main
 * Method:    TShader_setEnvClient
 * Signature: ([BII)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TShader_1setEnvClient
  (JNIEnv *, jclass, jbyteArray, jint, jint);

/*
 * Class:     Java_Main
 * Method:    TShader_setEnvTarget
 * Signature: ([BII)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TShader_1setEnvTarget
  (JNIEnv *, jclass, jbyteArray, jint, jint);

/*
 * Class:     Java_Main
 * Method:    TShader_getStrings
 * Signature: ([B)[Ljava/lang/String;
 */
JNIEXPORT jobjectArray JNICALL Java_Java_Main_TShader_1getStrings
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TShader_setEnvTargetHlslFunctionality1
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TShader_1setEnvTargetHlslFunctionality1
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TShader_getEnvTargetHlslFunctionality1
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TShader_1getEnvTargetHlslFunctionality1
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TShader_Includer_IncludeResult
 * Signature: (Ljava/lang/String;Ljava/lang/String;J[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TShader_1Includer_1IncludeResult
  (JNIEnv *, jclass, jstring, jstring, jlong, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TShader_Includer_IncludeResult_setUserData
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TShader_1Includer_1IncludeResult_1setUserData
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TShader_Includer_IncludeResult_getHeaderName
 * Signature: ([B)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_Java_Main_TShader_1Includer_1IncludeResult_1getHeaderName
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TShader_Includer_IncludeResult_getHeaderData
 * Signature: ([B)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_Java_Main_TShader_1Includer_1IncludeResult_1getHeaderData
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TShader_Includer_IncludeResult_getHeaderLength
 * Signature: ([B)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_TShader_1Includer_1IncludeResult_1getHeaderLength
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TShader_Includer_IncludeResult_getUserData
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TShader_1Includer_1IncludeResult_1getUserData
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TShader_ForbidIncluder
 * Signature: ()[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TShader_1ForbidIncluder
  (JNIEnv *, jclass);

/*
 * Class:     Java_Main
 * Method:    TShader_ForbidIncluder_includeSystem
 * Signature: ([BLjava/lang/String;Ljava/lang/String;J)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TShader_1ForbidIncluder_1includeSystem
  (JNIEnv *, jclass, jbyteArray, jstring, jstring, jlong);

/*
 * Class:     Java_Main
 * Method:    TShader_ForbidIncluder_includeLocal
 * Signature: ([BLjava/lang/String;Ljava/lang/String;J)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TShader_1ForbidIncluder_1includeLocal
  (JNIEnv *, jclass, jbyteArray, jstring, jstring, jlong);

/*
 * Class:     Java_Main
 * Method:    TShader_ForbidIncluder_releaseInclude
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TShader_1ForbidIncluder_1releaseInclude
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TShader_parse
 * Signature: ([B[BIIZZI[B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TShader_1parse___3B_3BIIZZI_3B
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jint, jint, jboolean, jboolean, jint, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TShader_parse
 * Signature: ([B[BIIZZI)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TShader_1parse___3B_3BIIZZI
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jint, jint, jboolean, jboolean, jint);

/*
 * Class:     Java_Main
 * Method:    TShader_parse
 * Signature: ([B[BIZI)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TShader_1parse___3B_3BIZI
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jint, jboolean, jint);

/*
 * Class:     Java_Main
 * Method:    TShader_parse
 * Signature: ([B[BIZI[B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TShader_1parse___3B_3BIZI_3B
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jint, jboolean, jint, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TShader_preprocess
 * Signature: ([B[BIIZZI[Ljava/lang/String;[B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TShader_1preprocess
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jint, jint, jboolean, jboolean, jint, jobjectArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TShader_getInfoLog
 * Signature: ([B)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_Java_Main_TShader_1getInfoLog
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TShader_getInfoDebugLog
 * Signature: ([B)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_Java_Main_TShader_1getInfoDebugLog
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TShader_getStage
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TShader_1getStage
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TShader_getIntermediate
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TShader_1getIntermediate
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TObjectReflection
 * Signature: (Ljava/lang/String;[BIIII)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TObjectReflection
  (JNIEnv *, jclass, jstring, jbyteArray, jint, jint, jint, jint);

/*
 * Class:     Java_Main
 * Method:    TObjectReflection_getType
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TObjectReflection_1getType
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TObjectReflection_getBinding
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TObjectReflection_1getBinding
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TObjectReflection_dump
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TObjectReflection_1dump
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TObjectReflection_setName
 * Signature: ([BLjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TObjectReflection_1setName
  (JNIEnv *, jclass, jbyteArray, jstring);

/*
 * Class:     Java_Main
 * Method:    TObjectReflection_setOffset
 * Signature: ([BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TObjectReflection_1setOffset
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TObjectReflection_setGlDefineType
 * Signature: ([BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TObjectReflection_1setGlDefineType
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TObjectReflection_setSize
 * Signature: ([BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TObjectReflection_1setSize
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TObjectReflection_setIndex
 * Signature: ([BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TObjectReflection_1setIndex
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TObjectReflection_setCounterIndex
 * Signature: ([BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TObjectReflection_1setCounterIndex
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TObjectReflection_setNumMembers
 * Signature: ([BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TObjectReflection_1setNumMembers
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TObjectReflection_setArrayStride
 * Signature: ([BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TObjectReflection_1setArrayStride
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TObjectReflection_setTopLevelArraySize
 * Signature: ([BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TObjectReflection_1setTopLevelArraySize
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TObjectReflection_setTopLevelArrayStride
 * Signature: ([BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TObjectReflection_1setTopLevelArrayStride
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TObjectReflection_setStages
 * Signature: ([BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TObjectReflection_1setStages
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TObjectReflection_getName
 * Signature: ([B)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_Java_Main_TObjectReflection_1getName
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TObjectReflection_getOffset
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TObjectReflection_1getOffset
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TObjectReflection_getGlDefineType
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TObjectReflection_1getGlDefineType
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TObjectReflection_getSize
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TObjectReflection_1getSize
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TObjectReflection_getIndex
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TObjectReflection_1getIndex
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TObjectReflection_getCounterIndex
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TObjectReflection_1getCounterIndex
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TObjectReflection_getNumMembers
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TObjectReflection_1getNumMembers
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TObjectReflection_getArrayStride
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TObjectReflection_1getArrayStride
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TObjectReflection_getTopLevelArraySize
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TObjectReflection_1getTopLevelArraySize
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TObjectReflection_getTopLevelArrayStride
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TObjectReflection_1getTopLevelArrayStride
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TObjectReflection_getStages
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TObjectReflection_1getStages
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TObjectReflection_badReflection
 * Signature: ()[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TObjectReflection_1badReflection
  (JNIEnv *, jclass);

/*
 * Class:     Java_Main
 * Method:    TIoMapResolver
 * Signature: ()[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TIoMapResolver
  (JNIEnv *, jclass);

/*
 * Class:     Java_Main
 * Method:    TVarEntryInfo
 * Signature: (I[BZIIIIII)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TVarEntryInfo__I_3BZIIIIII
  (JNIEnv *, jclass, jint, jbyteArray, jboolean, jint, jint, jint, jint, jint, jint);

/*
 * Class:     Java_Main
 * Method:    TVarEntryInfo
 * Signature: ()[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TVarEntryInfo__
  (JNIEnv *, jclass);

/*
 * Class:     Java_Main
 * Method:    TVarEntryInfo_setId
 * Signature: ([BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TVarEntryInfo_1setId
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TVarEntryInfo_setSymbol
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TVarEntryInfo_1setSymbol
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TVarEntryInfo_setLive
 * Signature: ([BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TVarEntryInfo_1setLive
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TVarEntryInfo_setNewBinding
 * Signature: ([BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TVarEntryInfo_1setNewBinding
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TVarEntryInfo_setNewSet
 * Signature: ([BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TVarEntryInfo_1setNewSet
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TVarEntryInfo_setNewLocation
 * Signature: ([BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TVarEntryInfo_1setNewLocation
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TVarEntryInfo_setNewComponent
 * Signature: ([BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TVarEntryInfo_1setNewComponent
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TVarEntryInfo_setNewIndex
 * Signature: ([BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TVarEntryInfo_1setNewIndex
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TVarEntryInfo_setStage
 * Signature: ([BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TVarEntryInfo_1setStage
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TVarEntryInfo_getId
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TVarEntryInfo_1getId
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TVarEntryInfo_getSymbol
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TVarEntryInfo_1getSymbol
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TVarEntryInfo_getLive
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TVarEntryInfo_1getLive
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TVarEntryInfo_getNewBinding
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TVarEntryInfo_1getNewBinding
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TVarEntryInfo_getNewSet
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TVarEntryInfo_1getNewSet
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TVarEntryInfo_getNewLocation
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TVarEntryInfo_1getNewLocation
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TVarEntryInfo_getNewComponent
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TVarEntryInfo_1getNewComponent
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TVarEntryInfo_getNewIndex
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TVarEntryInfo_1getNewIndex
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TVarEntryInfo_getStage
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TVarEntryInfo_1getStage
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TVarEntryInfo_TOrderById
 * Signature: ()[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TVarEntryInfo_1TOrderById
  (JNIEnv *, jclass);

/*
 * Class:     Java_Main
 * Method:    TVarEntryInfo_TOrderById_operatorCall
 * Signature: ([B[B[B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TVarEntryInfo_1TOrderById_1operatorCall
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TVarEntryInfo_TOrderByPriority
 * Signature: ()[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TVarEntryInfo_1TOrderByPriority
  (JNIEnv *, jclass);

/*
 * Class:     Java_Main
 * Method:    TVarEntryInfo_TOrderByPriority_operatorCall
 * Signature: ([B[B[B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TVarEntryInfo_1TOrderByPriority_1operatorCall
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TInfoSink
 * Signature: ()[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TInfoSink
  (JNIEnv *, jclass);

/*
 * Class:     Java_Main
 * Method:    TInfoSink_setInfo
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TInfoSink_1setInfo
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TInfoSink_setDebug
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TInfoSink_1setDebug
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TInfoSink_getInfo
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TInfoSink_1getInfo
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TInfoSink_getDebug
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TInfoSink_1getDebug
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermSymbol
 * Signature: (ILjava/lang/String;[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TIntermSymbol
  (JNIEnv *, jclass, jint, jstring, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermSymbol_getId
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TIntermSymbol_1getId
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermSymbol_changeId
 * Signature: ([BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TIntermSymbol_1changeId
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TIntermSymbol_getName
 * Signature: ([B)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_Java_Main_TIntermSymbol_1getName
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermSymbol_traverse
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TIntermSymbol_1traverse
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermSymbol_getAsSymbolNode
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TIntermSymbol_1getAsSymbolNode
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermSymbol_setConstArray
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TIntermSymbol_1setConstArray
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermSymbol_getConstArray
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TIntermSymbol_1getConstArray
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermSymbol_setConstSubtree
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TIntermSymbol_1setConstSubtree
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermSymbol_getConstSubtree
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TIntermSymbol_1getConstSubtree
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermSymbol_setFlattenSubset
 * Signature: ([BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TIntermSymbol_1setFlattenSubset
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TIntermSymbol_getFlattenSubset
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TIntermSymbol_1getFlattenSubset
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermSymbol_switchId
 * Signature: ([BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TIntermSymbol_1switchId
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TIntermTraverser
 * Signature: (ZZZZ)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TIntermTraverser
  (JNIEnv *, jclass, jboolean, jboolean, jboolean, jboolean);

/*
 * Class:     Java_Main
 * Method:    TIntermTraverser_visitSymbol
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TIntermTraverser_1visitSymbol
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermTraverser_visitConstantUnion
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TIntermTraverser_1visitConstantUnion
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermTraverser_visitBinary
 * Signature: ([BI[B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TIntermTraverser_1visitBinary
  (JNIEnv *, jclass, jbyteArray, jint, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermTraverser_visitUnary
 * Signature: ([BI[B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TIntermTraverser_1visitUnary
  (JNIEnv *, jclass, jbyteArray, jint, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermTraverser_visitSelection
 * Signature: ([BI[B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TIntermTraverser_1visitSelection
  (JNIEnv *, jclass, jbyteArray, jint, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermTraverser_visitAggregate
 * Signature: ([BI[B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TIntermTraverser_1visitAggregate
  (JNIEnv *, jclass, jbyteArray, jint, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermTraverser_visitLoop
 * Signature: ([BI[B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TIntermTraverser_1visitLoop
  (JNIEnv *, jclass, jbyteArray, jint, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermTraverser_visitBranch
 * Signature: ([BI[B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TIntermTraverser_1visitBranch
  (JNIEnv *, jclass, jbyteArray, jint, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermTraverser_visitSwitch
 * Signature: ([BI[B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TIntermTraverser_1visitSwitch
  (JNIEnv *, jclass, jbyteArray, jint, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermTraverser_getMaxDepth
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TIntermTraverser_1getMaxDepth
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermTraverser_incrementDepth
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TIntermTraverser_1incrementDepth
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermTraverser_decrementDepth
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TIntermTraverser_1decrementDepth
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermTraverser_getParentNode
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TIntermTraverser_1getParentNode
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermTraverser_getPreVisit
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TIntermTraverser_1getPreVisit
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermTraverser_getInVisit
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TIntermTraverser_1getInVisit
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermTraverser_getPostVisit
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TIntermTraverser_1getPostVisit
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermTraverser_getRightToLeft
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TIntermTraverser_1getRightToLeft
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TConstUnionArray
 * Signature: ()[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TConstUnionArray__
  (JNIEnv *, jclass);

/*
 * Class:     Java_Main
 * Method:    TConstUnionArray
 * Signature: (I)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TConstUnionArray__I
  (JNIEnv *, jclass, jint);

/*
 * Class:     Java_Main
 * Method:    TConstUnionArray
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TConstUnionArray___3B
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TConstUnionArray
 * Signature: ([BII)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TConstUnionArray___3BII
  (JNIEnv *, jclass, jbyteArray, jint, jint);

/*
 * Class:     Java_Main
 * Method:    TConstUnionArray
 * Signature: (I[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TConstUnionArray__I_3B
  (JNIEnv *, jclass, jint, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TConstUnionArray_size
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TConstUnionArray_1size
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TConstUnionArray_dot
 * Signature: ([B[B)D
 */
JNIEXPORT jdouble JNICALL Java_Java_Main_TConstUnionArray_1dot
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TConstUnionArray_empty
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TConstUnionArray_1empty
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TConstUnionArray_operatorAt
 * Signature: ([BJ)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TConstUnionArray_1operatorAt
  (JNIEnv *, jclass, jbyteArray, jlong);

/*
 * Class:     Java_Main
 * Method:    TConstUnionArray_operatorEqual
 * Signature: ([B[B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TConstUnionArray_1operatorEqual
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TConstUnionArray_operatorNotEqual
 * Signature: ([B[B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TConstUnionArray_1operatorNotEqual
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TConstUnion
 * Signature: ()[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TConstUnion
  (JNIEnv *, jclass);

/*
 * Class:     Java_Main
 * Method:    TConstUnion_setI8Const
 * Signature: ([BB)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TConstUnion_1setI8Const
  (JNIEnv *, jclass, jbyteArray, jbyte);

/*
 * Class:     Java_Main
 * Method:    TConstUnion_setU8Const
 * Signature: ([BS)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TConstUnion_1setU8Const
  (JNIEnv *, jclass, jbyteArray, jshort);

/*
 * Class:     Java_Main
 * Method:    TConstUnion_setI16Const
 * Signature: ([BS)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TConstUnion_1setI16Const
  (JNIEnv *, jclass, jbyteArray, jshort);

/*
 * Class:     Java_Main
 * Method:    TConstUnion_setU16Const
 * Signature: ([BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TConstUnion_1setU16Const
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TConstUnion_setIConst
 * Signature: ([BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TConstUnion_1setIConst
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TConstUnion_setUConst
 * Signature: ([BJ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TConstUnion_1setUConst
  (JNIEnv *, jclass, jbyteArray, jlong);

/*
 * Class:     Java_Main
 * Method:    TConstUnion_setI64Const
 * Signature: ([BLjava/math/BigInteger;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TConstUnion_1setI64Const
  (JNIEnv *, jclass, jbyteArray, jobject);

/*
 * Class:     Java_Main
 * Method:    TConstUnion_setU64Const
 * Signature: ([BLjava/math/BigInteger;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TConstUnion_1setU64Const
  (JNIEnv *, jclass, jbyteArray, jobject);

/*
 * Class:     Java_Main
 * Method:    TConstUnion_setDConst
 * Signature: ([BD)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TConstUnion_1setDConst
  (JNIEnv *, jclass, jbyteArray, jdouble);

/*
 * Class:     Java_Main
 * Method:    TConstUnion_setBConst
 * Signature: ([BZ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TConstUnion_1setBConst
  (JNIEnv *, jclass, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    TConstUnion_setSConst
 * Signature: ([BLjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TConstUnion_1setSConst
  (JNIEnv *, jclass, jbyteArray, jstring);

/*
 * Class:     Java_Main
 * Method:    TConstUnion_getI8Const
 * Signature: ([B)B
 */
JNIEXPORT jbyte JNICALL Java_Java_Main_TConstUnion_1getI8Const
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TConstUnion_getU8Const
 * Signature: ([B)S
 */
JNIEXPORT jshort JNICALL Java_Java_Main_TConstUnion_1getU8Const
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TConstUnion_getI16Const
 * Signature: ([B)S
 */
JNIEXPORT jshort JNICALL Java_Java_Main_TConstUnion_1getI16Const
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TConstUnion_getU16Const
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TConstUnion_1getU16Const
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TConstUnion_getIConst
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TConstUnion_1getIConst
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TConstUnion_getUConst
 * Signature: ([B)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_TConstUnion_1getUConst
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TConstUnion_getI64Const
 * Signature: ([B)Ljava/math/BigInteger;
 */
JNIEXPORT jobject JNICALL Java_Java_Main_TConstUnion_1getI64Const
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TConstUnion_getU64Const
 * Signature: ([B)Ljava/math/BigInteger;
 */
JNIEXPORT jobject JNICALL Java_Java_Main_TConstUnion_1getU64Const
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TConstUnion_getDConst
 * Signature: ([B)D
 */
JNIEXPORT jdouble JNICALL Java_Java_Main_TConstUnion_1getDConst
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TConstUnion_getBConst
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TConstUnion_1getBConst
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TConstUnion_getSConst
 * Signature: ([B)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_Java_Main_TConstUnion_1getSConst
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TConstUnion_getType
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TConstUnion_1getType
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TConstUnion_operatorEqual
 * Signature: ([BB)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TConstUnion_1operatorEqual___3BB
  (JNIEnv *, jclass, jbyteArray, jbyte);

/*
 * Class:     Java_Main
 * Method:    TConstUnion_operatorEqualUnsigned
 * Signature: ([BS)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TConstUnion_1operatorEqualUnsigned___3BS
  (JNIEnv *, jclass, jbyteArray, jshort);

/*
 * Class:     Java_Main
 * Method:    TConstUnion_operatorEqual
 * Signature: ([BS)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TConstUnion_1operatorEqual___3BS
  (JNIEnv *, jclass, jbyteArray, jshort);

/*
 * Class:     Java_Main
 * Method:    TConstUnion_operatorEqualUnsigned
 * Signature: ([BI)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TConstUnion_1operatorEqualUnsigned___3BI
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TConstUnion_operatorEqual
 * Signature: ([BI)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TConstUnion_1operatorEqual___3BI
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TConstUnion_operatorEqual
 * Signature: ([BJ)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TConstUnion_1operatorEqual___3BJ
  (JNIEnv *, jclass, jbyteArray, jlong);

/*
 * Class:     Java_Main
 * Method:    TConstUnion_operatorEqual
 * Signature: ([BLjava/math/BigInteger;)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TConstUnion_1operatorEqual___3BLjava_math_BigInteger_2
  (JNIEnv *, jclass, jbyteArray, jobject);

/*
 * Class:     Java_Main
 * Method:    TConstUnion_operatorEqualUnsigned
 * Signature: ([BLjava/math/BigInteger;)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TConstUnion_1operatorEqualUnsigned___3BLjava_math_BigInteger_2
  (JNIEnv *, jclass, jbyteArray, jobject);

/*
 * Class:     Java_Main
 * Method:    TConstUnion_operatorEqual
 * Signature: ([BD)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TConstUnion_1operatorEqual___3BD
  (JNIEnv *, jclass, jbyteArray, jdouble);

/*
 * Class:     Java_Main
 * Method:    TConstUnion_operatorEqual
 * Signature: ([BZ)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TConstUnion_1operatorEqual___3BZ
  (JNIEnv *, jclass, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    TConstUnion_operatorEqual
 * Signature: ([B[B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TConstUnion_1operatorEqual___3B_3B
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TConstUnion_operatorNotEqual
 * Signature: ([BB)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TConstUnion_1operatorNotEqual___3BB
  (JNIEnv *, jclass, jbyteArray, jbyte);

/*
 * Class:     Java_Main
 * Method:    TConstUnion_operatorNotEqualUnsigned
 * Signature: ([BS)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TConstUnion_1operatorNotEqualUnsigned___3BS
  (JNIEnv *, jclass, jbyteArray, jshort);

/*
 * Class:     Java_Main
 * Method:    TConstUnion_operatorNotEqual
 * Signature: ([BS)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TConstUnion_1operatorNotEqual___3BS
  (JNIEnv *, jclass, jbyteArray, jshort);

/*
 * Class:     Java_Main
 * Method:    TConstUnion_operatorNotEqualUnsigned
 * Signature: ([BI)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TConstUnion_1operatorNotEqualUnsigned___3BI
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TConstUnion_operatorNotEqual
 * Signature: ([BI)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TConstUnion_1operatorNotEqual___3BI
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TConstUnion_operatorNotEqual
 * Signature: ([BJ)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TConstUnion_1operatorNotEqual___3BJ
  (JNIEnv *, jclass, jbyteArray, jlong);

/*
 * Class:     Java_Main
 * Method:    TConstUnion_operatorNotEqual
 * Signature: ([BLjava/math/BigInteger;)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TConstUnion_1operatorNotEqual___3BLjava_math_BigInteger_2
  (JNIEnv *, jclass, jbyteArray, jobject);

/*
 * Class:     Java_Main
 * Method:    TConstUnion_operatorNotEqualUnsigned
 * Signature: ([BLjava/math/BigInteger;)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TConstUnion_1operatorNotEqualUnsigned___3BLjava_math_BigInteger_2
  (JNIEnv *, jclass, jbyteArray, jobject);

/*
 * Class:     Java_Main
 * Method:    TConstUnion_operatorNotEqual
 * Signature: ([BF)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TConstUnion_1operatorNotEqual___3BF
  (JNIEnv *, jclass, jbyteArray, jfloat);

/*
 * Class:     Java_Main
 * Method:    TConstUnion_operatorNotEqual
 * Signature: ([BZ)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TConstUnion_1operatorNotEqual___3BZ
  (JNIEnv *, jclass, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    TConstUnion_operatorNotEqual
 * Signature: ([B[B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TConstUnion_1operatorNotEqual___3B_3B
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TConstUnion_operatorGreaterThan
 * Signature: ([B[B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TConstUnion_1operatorGreaterThan
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TConstUnion_operatorLowerThan
 * Signature: ([B[B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TConstUnion_1operatorLowerThan
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TConstUnion_operatorPlus
 * Signature: ([B[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TConstUnion_1operatorPlus
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TConstUnion_operatorMinus
 * Signature: ([B[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TConstUnion_1operatorMinus
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TConstUnion_operatorMul
 * Signature: ([B[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TConstUnion_1operatorMul
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TConstUnion_operatorMod
 * Signature: ([B[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TConstUnion_1operatorMod
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TConstUnion_operatorShiftRight
 * Signature: ([B[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TConstUnion_1operatorShiftRight
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TConstUnion_operatorShiftLeft
 * Signature: ([B[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TConstUnion_1operatorShiftLeft
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TConstUnion_operatorBitwiseAnd
 * Signature: ([B[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TConstUnion_1operatorBitwiseAnd
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TConstUnion_operatorBitwiseOr
 * Signature: ([B[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TConstUnion_1operatorBitwiseOr
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TConstUnion_operatorBitwiseXor
 * Signature: ([B[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TConstUnion_1operatorBitwiseXor
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TConstUnion_operatorBitwiseInvert
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TConstUnion_1operatorBitwiseInvert
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TConstUnion_operatorAnd
 * Signature: ([B[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TConstUnion_1operatorAnd
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TConstUnion_operatorOr
 * Signature: ([B[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TConstUnion_1operatorOr
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermTyped_getAsTyped
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TIntermTyped_1getAsTyped
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermTyped_setType
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TIntermTyped_1setType
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermTyped_getType
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TIntermTyped_1getType
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermTyped_getWritableType
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TIntermTyped_1getWritableType
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermTyped_getBasicType
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TIntermTyped_1getBasicType
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermTyped_getQualifier
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TIntermTyped_1getQualifier
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermTyped_propagatePrecision
 * Signature: ([BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TIntermTyped_1propagatePrecision
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TIntermTyped_getVectorSize
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TIntermTyped_1getVectorSize
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermTyped_getMatrixCols
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TIntermTyped_1getMatrixCols
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermTyped_getMatrixRows
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TIntermTyped_1getMatrixRows
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermTyped_isMatrix
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TIntermTyped_1isMatrix
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermTyped_isArray
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TIntermTyped_1isArray
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermTyped_isVector
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TIntermTyped_1isVector
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermTyped_isScalar
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TIntermTyped_1isScalar
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermTyped_isStruct
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TIntermTyped_1isStruct
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermTyped_isFloatingDomain
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TIntermTyped_1isFloatingDomain
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermTyped_isIntegerDomain
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TIntermTyped_1isIntegerDomain
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermTyped_isAtomic
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TIntermTyped_1isAtomic
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermTyped_isReference
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TIntermTyped_1isReference
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermTyped_getCompleteString
 * Signature: ([B)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_Java_Main_TIntermTyped_1getCompleteString
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TInfoSinkBase
 * Signature: ()[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TInfoSinkBase
  (JNIEnv *, jclass);

/*
 * Class:     Java_Main
 * Method:    TInfoSinkBase_erase
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TInfoSinkBase_1erase
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TInfoSinkBase_c_str
 * Signature: ([B)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_Java_Main_TInfoSinkBase_1c_1str
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TInfoSinkBase_prefix
 * Signature: ([BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TInfoSinkBase_1prefix
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TInfoSinkBase_location
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TInfoSinkBase_1location
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TInfoSinkBase_message
 * Signature: ([BILjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TInfoSinkBase_1message___3BILjava_lang_String_2
  (JNIEnv *, jclass, jbyteArray, jint, jstring);

/*
 * Class:     Java_Main
 * Method:    TInfoSinkBase_message
 * Signature: ([BILjava/lang/String;[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TInfoSinkBase_1message___3BILjava_lang_String_2_3B
  (JNIEnv *, jclass, jbyteArray, jint, jstring, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TInfoSinkBase_setOutputStream
 * Signature: ([BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TInfoSinkBase_1setOutputStream
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TInfoSinkBase_operatorShiftLeft
 * Signature: ([BC)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TInfoSinkBase_1operatorShiftLeft___3BC
  (JNIEnv *, jclass, jbyteArray, jchar);

/*
 * Class:     Java_Main
 * Method:    TInfoSinkBase_operatorShiftLeft
 * Signature: ([BLjava/lang/String;)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TInfoSinkBase_1operatorShiftLeft___3BLjava_lang_String_2
  (JNIEnv *, jclass, jbyteArray, jstring);

/*
 * Class:     Java_Main
 * Method:    TInfoSinkBase_operatorShiftLeft
 * Signature: ([BI)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TInfoSinkBase_1operatorShiftLeft___3BI
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TInfoSinkBase_operatorShiftLeft
 * Signature: ([BJ)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TInfoSinkBase_1operatorShiftLeft___3BJ
  (JNIEnv *, jclass, jbyteArray, jlong);

/*
 * Class:     Java_Main
 * Method:    TInfoSinkBase_operatorShiftLeft
 * Signature: ([BF)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TInfoSinkBase_1operatorShiftLeft___3BF
  (JNIEnv *, jclass, jbyteArray, jfloat);

/*
 * Class:     Java_Main
 * Method:    TInfoSinkBase_operatorPlus
 * Signature: ([BLjava/lang/String;)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TInfoSinkBase_1operatorPlus
  (JNIEnv *, jclass, jbyteArray, jstring);

/*
 * Class:     Java_Main
 * Method:    TSourceLoc
 * Signature: (Ljava/lang/String;III)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TSourceLoc__Ljava_lang_String_2III
  (JNIEnv *, jclass, jstring, jint, jint, jint);

/*
 * Class:     Java_Main
 * Method:    TSourceLoc
 * Signature: ()[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TSourceLoc__
  (JNIEnv *, jclass);

/*
 * Class:     Java_Main
 * Method:    TSourceLoc_init
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TSourceLoc_1init___3B
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TSourceLoc_init
 * Signature: ([BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TSourceLoc_1init___3BI
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TSourceLoc_getStringNameOrNum
 * Signature: ([BZ)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_Java_Main_TSourceLoc_1getStringNameOrNum
  (JNIEnv *, jclass, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    TSourceLoc_getFilename
 * Signature: ([B)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_Java_Main_TSourceLoc_1getFilename
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TSourceLoc_getFilenameStr
 * Signature: ([B)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_Java_Main_TSourceLoc_1getFilenameStr
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TSourceLoc_setName
 * Signature: ([BLjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TSourceLoc_1setName
  (JNIEnv *, jclass, jbyteArray, jstring);

/*
 * Class:     Java_Main
 * Method:    TSourceLoc_setString
 * Signature: ([BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TSourceLoc_1setString
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TSourceLoc_setLine
 * Signature: ([BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TSourceLoc_1setLine
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TSourceLoc_setColumn
 * Signature: ([BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TSourceLoc_1setColumn
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TSourceLoc_getName
 * Signature: ([B)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_Java_Main_TSourceLoc_1getName
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TSourceLoc_getString
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TSourceLoc_1getString
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TSourceLoc_getLine
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TSourceLoc_1getLine
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TSourceLoc_getColumn
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TSourceLoc_1getColumn
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TProgram
 * Signature: ()[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TProgram
  (JNIEnv *, jclass);

/*
 * Class:     Java_Main
 * Method:    TProgram_addShader
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TProgram_1addShader
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TProgram_getShaders
 * Signature: ([BI)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TProgram_1getShaders
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TProgram_link
 * Signature: ([BI)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TProgram_1link
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TProgram_getInfoLog
 * Signature: ([B)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_Java_Main_TProgram_1getInfoLog
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TProgram_getInfoDebugLog
 * Signature: ([B)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_Java_Main_TProgram_1getInfoDebugLog
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TProgram_getIntermediate
 * Signature: ([BI)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TProgram_1getIntermediate
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TProgram_buildReflection
 * Signature: ([BI)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TProgram_1buildReflection
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TProgram_getLocalSize
 * Signature: ([BI)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_TProgram_1getLocalSize
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TProgram_getReflectionIndex
 * Signature: ([BLjava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TProgram_1getReflectionIndex
  (JNIEnv *, jclass, jbyteArray, jstring);

/*
 * Class:     Java_Main
 * Method:    TProgram_getReflectionPipeIOIndex
 * Signature: ([BLjava/lang/String;Z)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TProgram_1getReflectionPipeIOIndex
  (JNIEnv *, jclass, jbyteArray, jstring, jboolean);

/*
 * Class:     Java_Main
 * Method:    TProgram_getNumUniformVariables
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TProgram_1getNumUniformVariables
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TProgram_getUniform
 * Signature: ([BI)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TProgram_1getUniform
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TProgram_getNumUniformBlocks
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TProgram_1getNumUniformBlocks
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TProgram_getUniformBlock
 * Signature: ([BI)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TProgram_1getUniformBlock
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TProgram_getNumPipeInputs
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TProgram_1getNumPipeInputs
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TProgram_getPipeInput
 * Signature: ([BI)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TProgram_1getPipeInput
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TProgram_getNumPipeOutputs
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TProgram_1getNumPipeOutputs
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TProgram_getPipeOutput
 * Signature: ([BI)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TProgram_1getPipeOutput
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TProgram_getNumBufferVariables
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TProgram_1getNumBufferVariables
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TProgram_getBufferVariable
 * Signature: ([BI)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TProgram_1getBufferVariable
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TProgram_getNumBufferBlocks
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TProgram_1getNumBufferBlocks
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TProgram_getBufferBlock
 * Signature: ([BI)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TProgram_1getBufferBlock
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TProgram_getNumAtomicCounters
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TProgram_1getNumAtomicCounters
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TProgram_getAtomicCounter
 * Signature: ([BI)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TProgram_1getAtomicCounter
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TProgram_getNumLiveUniformVariables
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TProgram_1getNumLiveUniformVariables
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TProgram_getNumLiveUniformBlocks
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TProgram_1getNumLiveUniformBlocks
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TProgram_getNumLiveAttributes
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TProgram_1getNumLiveAttributes
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TProgram_getUniformIndex
 * Signature: ([BLjava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TProgram_1getUniformIndex
  (JNIEnv *, jclass, jbyteArray, jstring);

/*
 * Class:     Java_Main
 * Method:    TProgram_getPipeIOIndex
 * Signature: ([BLjava/lang/String;Z)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TProgram_1getPipeIOIndex
  (JNIEnv *, jclass, jbyteArray, jstring, jboolean);

/*
 * Class:     Java_Main
 * Method:    TProgram_getUniformName
 * Signature: ([BI)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_Java_Main_TProgram_1getUniformName
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TProgram_getUniformBinding
 * Signature: ([BI)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TProgram_1getUniformBinding
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TProgram_getUniformStages
 * Signature: ([BI)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TProgram_1getUniformStages
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TProgram_getUniformBlockIndex
 * Signature: ([BI)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TProgram_1getUniformBlockIndex
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TProgram_getUniformType
 * Signature: ([BI)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TProgram_1getUniformType
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TProgram_getUniformBufferOffset
 * Signature: ([BI)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TProgram_1getUniformBufferOffset
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TProgram_getUniformArraySize
 * Signature: ([BI)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TProgram_1getUniformArraySize
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TProgram_getUniformTType
 * Signature: ([BI)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TProgram_1getUniformTType
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TProgram_getUniformBlockName
 * Signature: ([BI)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_Java_Main_TProgram_1getUniformBlockName
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TProgram_getUniformBlockSize
 * Signature: ([BI)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TProgram_1getUniformBlockSize
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TProgram_getUniformBlockBinding
 * Signature: ([BI)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TProgram_1getUniformBlockBinding
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TProgram_getUniformBlockCounterIndex
 * Signature: ([BI)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TProgram_1getUniformBlockCounterIndex
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TProgram_getUniformBlockTType
 * Signature: ([BI)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TProgram_1getUniformBlockTType
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TProgram_getAttributeName
 * Signature: ([BI)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_Java_Main_TProgram_1getAttributeName
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TProgram_getAttributeType
 * Signature: ([BI)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TProgram_1getAttributeType
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TProgram_getAttributeTType
 * Signature: ([BI)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TProgram_1getAttributeTType
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TProgram_dumpReflection
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TProgram_1dumpReflection
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TProgram_mapIO
 * Signature: ([B[B[B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TProgram_1mapIO
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIoMapper
 * Signature: ()[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TIoMapper
  (JNIEnv *, jclass);

/*
 * Class:     Java_Main
 * Method:    TIoMapper_addStage
 * Signature: ([BI[B[B[B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TIoMapper_1addStage
  (JNIEnv *, jclass, jbyteArray, jint, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIoMapper_doMap
 * Signature: ([B[B[B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TIoMapper_1doMap
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermediate
 * Signature: (III)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TIntermediate
  (JNIEnv *, jclass, jint, jint, jint);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_setVersion
 * Signature: ([BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TIntermediate_1setVersion
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_getVersion
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TIntermediate_1getVersion
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_setProfile
 * Signature: ([BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TIntermediate_1setProfile
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_getProfile
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TIntermediate_1getProfile
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_setSpv
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TIntermediate_1setSpv
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_getSpv
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TIntermediate_1getSpv
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_getStage
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TIntermediate_1getStage
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_addRequestedExtension
 * Signature: ([BLjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TIntermediate_1addRequestedExtension
  (JNIEnv *, jclass, jbyteArray, jstring);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_updateRequestedExtension
 * Signature: ([BLjava/lang/String;I)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TIntermediate_1updateRequestedExtension
  (JNIEnv *, jclass, jbyteArray, jstring, jint);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_getRequestedExtensions
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TIntermediate_1getRequestedExtensions
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_setTreeRoot
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TIntermediate_1setTreeRoot
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_getTreeRoot
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TIntermediate_1getTreeRoot
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_incrementEntryPointCount
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TIntermediate_1incrementEntryPointCount
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_getNumEntryPoints
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TIntermediate_1getNumEntryPoints
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_getNumErrors
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TIntermediate_1getNumErrors
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_addPushConstantCount
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TIntermediate_1addPushConstantCount
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_setLimits
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TIntermediate_1setLimits
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_postProcess
 * Signature: ([B[BI)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TIntermediate_1postProcess
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_removeTree
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TIntermediate_1removeTree
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_setEntryPointName
 * Signature: ([BLjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TIntermediate_1setEntryPointName
  (JNIEnv *, jclass, jbyteArray, jstring);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_setEntryPointMangledName
 * Signature: ([BLjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TIntermediate_1setEntryPointMangledName
  (JNIEnv *, jclass, jbyteArray, jstring);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_getEntryPointName
 * Signature: ([B)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_Java_Main_TIntermediate_1getEntryPointName
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_getEntryPointMangledName
 * Signature: ([B)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_Java_Main_TIntermediate_1getEntryPointMangledName
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_setInvertY
 * Signature: ([BZ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TIntermediate_1setInvertY
  (JNIEnv *, jclass, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_getInvertY
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TIntermediate_1getInvertY
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_setSource
 * Signature: ([BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TIntermediate_1setSource
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_getSource
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TIntermediate_1getSource
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_isRecursive
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TIntermediate_1isRecursive
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_addSymbol
 * Signature: ([B[B[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TIntermediate_1addSymbol___3B_3B_3B
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_addSymbol
 * Signature: ([B[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TIntermediate_1addSymbol___3B_3B
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_addSymbolVariable
 * Signature: ([B[B[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TIntermediate_1addSymbolVariable___3B_3B_3B
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_addSymbolVariable
 * Signature: ([B[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TIntermediate_1addSymbolVariable___3B_3B
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_addConversionType
 * Signature: ([BI[B[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TIntermediate_1addConversionType
  (JNIEnv *, jclass, jbyteArray, jint, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_addConversion
 * Signature: ([BI[B[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TIntermediate_1addConversion___3BI_3B_3B
  (JNIEnv *, jclass, jbyteArray, jint, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_addUniShapeConversion
 * Signature: ([BI[B[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TIntermediate_1addUniShapeConversion
  (JNIEnv *, jclass, jbyteArray, jint, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_addConversion
 * Signature: ([BI[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TIntermediate_1addConversion___3BI_3B
  (JNIEnv *, jclass, jbyteArray, jint, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_addBiShapeConversion
 * Signature: ([BI[B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TIntermediate_1addBiShapeConversion
  (JNIEnv *, jclass, jbyteArray, jint, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_addShapeConversion
 * Signature: ([B[B[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TIntermediate_1addShapeConversion
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_addBinaryMath
 * Signature: ([BI[B[B[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TIntermediate_1addBinaryMath
  (JNIEnv *, jclass, jbyteArray, jint, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_addAssign
 * Signature: ([BI[B[B[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TIntermediate_1addAssign
  (JNIEnv *, jclass, jbyteArray, jint, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_addIndex
 * Signature: ([BI[B[B[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TIntermediate_1addIndex
  (JNIEnv *, jclass, jbyteArray, jint, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_addUnaryMath
 * Signature: ([BI[B[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TIntermediate_1addUnaryMath
  (JNIEnv *, jclass, jbyteArray, jint, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_addBuiltInFunctionCall
 * Signature: ([B[BIZ[B[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TIntermediate_1addBuiltInFunctionCall
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jint, jboolean, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_canImplicitlyPromote
 * Signature: ([BIII)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TIntermediate_1canImplicitlyPromote
  (JNIEnv *, jclass, jbyteArray, jint, jint, jint);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_isIntegralPromotion
 * Signature: ([BII)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TIntermediate_1isIntegralPromotion
  (JNIEnv *, jclass, jbyteArray, jint, jint);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_isFPPromotion
 * Signature: ([BII)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TIntermediate_1isFPPromotion
  (JNIEnv *, jclass, jbyteArray, jint, jint);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_isIntegralConversion
 * Signature: ([BII)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TIntermediate_1isIntegralConversion
  (JNIEnv *, jclass, jbyteArray, jint, jint);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_isFPConversion
 * Signature: ([BII)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TIntermediate_1isFPConversion
  (JNIEnv *, jclass, jbyteArray, jint, jint);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_isFPIntegralConversion
 * Signature: ([BII)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TIntermediate_1isFPIntegralConversion
  (JNIEnv *, jclass, jbyteArray, jint, jint);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_mapTypeToConstructorOp
 * Signature: ([B[B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TIntermediate_1mapTypeToConstructorOp
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_growAggregate
 * Signature: ([B[B[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TIntermediate_1growAggregate___3B_3B_3B
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_growAggregate
 * Signature: ([B[B[B[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TIntermediate_1growAggregate___3B_3B_3B_3B
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_makeAggregate
 * Signature: ([B[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TIntermediate_1makeAggregate___3B_3B
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_makeAggregate
 * Signature: ([B[B[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TIntermediate_1makeAggregate___3B_3B_3B
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_makeAggregateLoc
 * Signature: ([B[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TIntermediate_1makeAggregateLoc
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_setAggregateOperator
 * Signature: ([B[BI[B[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TIntermediate_1setAggregateOperator
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jint, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_areAllChildConst
 * Signature: ([B[B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TIntermediate_1areAllChildConst
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_addSelection
 * Signature: ([B[B[B[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TIntermediate_1addSelection___3B_3B_3B_3B
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_addSelection
 * Signature: ([B[B[B[B[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TIntermediate_1addSelection___3B_3B_3B_3B_3B
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_addComma
 * Signature: ([B[B[B[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TIntermediate_1addComma
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_addMethod
 * Signature: ([B[B[BLjava/lang/String;[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TIntermediate_1addMethod
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray, jstring, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_addConstantUnion
 * Signature: ([B[B[B[BZ)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TIntermediate_1addConstantUnion___3B_3B_3B_3BZ
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_addConstantUnion
 * Signature: ([BB[BZ)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TIntermediate_1addConstantUnion___3BB_3BZ
  (JNIEnv *, jclass, jbyteArray, jbyte, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_addConstantUnion
 * Signature: ([BS[BZ)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TIntermediate_1addConstantUnion___3BS_3BZ
  (JNIEnv *, jclass, jbyteArray, jshort, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_addConstantUnionUnsignedChar
 * Signature: ([BS[BZ)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TIntermediate_1addConstantUnionUnsignedChar
  (JNIEnv *, jclass, jbyteArray, jshort, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_addConstantUnion
 * Signature: ([BI[BZ)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TIntermediate_1addConstantUnion___3BI_3BZ
  (JNIEnv *, jclass, jbyteArray, jint, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_addConstantUnionUnsignedShort
 * Signature: ([BI[BZ)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TIntermediate_1addConstantUnionUnsignedShort
  (JNIEnv *, jclass, jbyteArray, jint, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_addConstantUnion
 * Signature: ([BJ[BZ)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TIntermediate_1addConstantUnion___3BJ_3BZ
  (JNIEnv *, jclass, jbyteArray, jlong, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_addConstantUnion
 * Signature: ([BLjava/math/BigInteger;[BZ)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TIntermediate_1addConstantUnion___3BLjava_math_BigInteger_2_3BZ
  (JNIEnv *, jclass, jbyteArray, jobject, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_addConstantUnionUnsignedLong
 * Signature: ([BLjava/math/BigInteger;[BZ)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TIntermediate_1addConstantUnionUnsignedLong
  (JNIEnv *, jclass, jbyteArray, jobject, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_addConstantUnion
 * Signature: ([BZ[BZ)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TIntermediate_1addConstantUnion___3BZ_3BZ
  (JNIEnv *, jclass, jbyteArray, jboolean, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_addConstantUnion
 * Signature: ([BDI[BZ)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TIntermediate_1addConstantUnion___3BDI_3BZ
  (JNIEnv *, jclass, jbyteArray, jdouble, jint, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_addConstantUnion
 * Signature: ([BLjava/lang/String;[BZ)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TIntermediate_1addConstantUnion___3BLjava_lang_String_2_3BZ
  (JNIEnv *, jclass, jbyteArray, jstring, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_promoteConstantUnion
 * Signature: ([BI[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TIntermediate_1promoteConstantUnion
  (JNIEnv *, jclass, jbyteArray, jint, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_parseConstTree
 * Signature: ([B[B[BI[BZ)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TIntermediate_1parseConstTree
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray, jint, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_addLoop
 * Signature: ([B[B[B[BZ[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TIntermediate_1addLoop
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray, jbyteArray, jboolean, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_addForLoop
 * Signature: ([B[B[B[B[BZ[B[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TIntermediate_1addForLoop
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray, jbyteArray, jbyteArray, jboolean, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_addBranch
 * Signature: ([BI[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TIntermediate_1addBranch___3BI_3B
  (JNIEnv *, jclass, jbyteArray, jint, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_addBranch
 * Signature: ([BI[B[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TIntermediate_1addBranch___3BI_3B_3B
  (JNIEnv *, jclass, jbyteArray, jint, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_addSwizzle
 * Signature: ([B[B[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TIntermediate_1addSwizzle
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_addBinaryNode
 * Signature: ([BI[B[B[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TIntermediate_1addBinaryNode___3BI_3B_3B_3B
  (JNIEnv *, jclass, jbyteArray, jint, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_addBinaryNode
 * Signature: ([BI[B[B[B[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TIntermediate_1addBinaryNode___3BI_3B_3B_3B_3B
  (JNIEnv *, jclass, jbyteArray, jint, jbyteArray, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_addUnaryNode
 * Signature: ([BI[B[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TIntermediate_1addUnaryNode___3BI_3B_3B
  (JNIEnv *, jclass, jbyteArray, jint, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_addUnaryNode
 * Signature: ([BI[B[B[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TIntermediate_1addUnaryNode___3BI_3B_3B_3B
  (JNIEnv *, jclass, jbyteArray, jint, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_fold
 * Signature: ([B[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TIntermediate_1fold
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_foldConstructor
 * Signature: ([B[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TIntermediate_1foldConstructor
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_foldDereference
 * Signature: ([B[BI[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TIntermediate_1foldDereference
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jint, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_foldSwizzle
 * Signature: ([B[B[B[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TIntermediate_1foldSwizzle
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_addSymbolLinkageNodes
 * Signature: ([B[BI[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TIntermediate_1addSymbolLinkageNodes
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jint, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_addSymbolLinkageNode
 * Signature: ([B[B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TIntermediate_1addSymbolLinkageNode
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_setUseStorageBuffer
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TIntermediate_1setUseStorageBuffer
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_usingStorageBuffer
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TIntermediate_1usingStorageBuffer
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_setDepthReplacing
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TIntermediate_1setDepthReplacing
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_isDepthReplacing
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TIntermediate_1isDepthReplacing
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_setLocalSize
 * Signature: ([BII)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TIntermediate_1setLocalSize
  (JNIEnv *, jclass, jbyteArray, jint, jint);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_getLocalSize
 * Signature: ([BI)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_TIntermediate_1getLocalSize
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_setLocalSizeSpecId
 * Signature: ([BII)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TIntermediate_1setLocalSizeSpecId
  (JNIEnv *, jclass, jbyteArray, jint, jint);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_getLocalSizeSpecId
 * Signature: ([BI)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TIntermediate_1getLocalSizeSpecId
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_output
 * Signature: ([B[BZ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TIntermediate_1output
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_isEsProfile
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TIntermediate_1isEsProfile
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_getXfbMode
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TIntermediate_1getXfbMode
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_isMultiStream
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TIntermediate_1isMultiStream
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_getOutputPrimitive
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TIntermediate_1getOutputPrimitive
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_getPostDepthCoverage
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TIntermediate_1getPostDepthCoverage
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_getEarlyFragmentTests
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TIntermediate_1getEarlyFragmentTests
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_getDepth
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TIntermediate_1getDepth
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_getPixelCenterInteger
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TIntermediate_1getPixelCenterInteger
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_setOriginUpperLeft
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TIntermediate_1setOriginUpperLeft
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_getOriginUpperLeft
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TIntermediate_1getOriginUpperLeft
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_getInterlockOrdering
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TIntermediate_1getInterlockOrdering
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_getAutoMapBindings
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TIntermediate_1getAutoMapBindings
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_getAutoMapLocations
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TIntermediate_1getAutoMapLocations
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_getNumPushConstants
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TIntermediate_1getNumPushConstants
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_addShaderRecordCount
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TIntermediate_1addShaderRecordCount
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_addTaskNVCount
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TIntermediate_1addTaskNVCount
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_setUseVulkanMemoryModel
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TIntermediate_1setUseVulkanMemoryModel
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_usingVulkanMemoryModel
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TIntermediate_1usingVulkanMemoryModel
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_usingPhysicalStorageBuffer
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TIntermediate_1usingPhysicalStorageBuffer
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_usingVariablePointers
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TIntermediate_1usingVariablePointers
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_getXfbStride
 * Signature: ([BI)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_TIntermediate_1getXfbStride
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_hasLayoutDerivativeModeNone
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TIntermediate_1hasLayoutDerivativeModeNone
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_getLayoutDerivativeModeNone
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TIntermediate_1getLayoutDerivativeModeNone
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_setShiftBinding
 * Signature: ([BIJ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TIntermediate_1setShiftBinding
  (JNIEnv *, jclass, jbyteArray, jint, jlong);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_getShiftBinding
 * Signature: ([BI)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_TIntermediate_1getShiftBinding
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_setShiftBindingForSet
 * Signature: ([BIJJ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TIntermediate_1setShiftBindingForSet
  (JNIEnv *, jclass, jbyteArray, jint, jlong, jlong);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_getShiftBindingForSet
 * Signature: ([BIJ)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TIntermediate_1getShiftBindingForSet
  (JNIEnv *, jclass, jbyteArray, jint, jlong);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_hasShiftBindingForSet
 * Signature: ([BI)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TIntermediate_1hasShiftBindingForSet
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_setResourceSetBinding
 * Signature: ([B[Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TIntermediate_1setResourceSetBinding
  (JNIEnv *, jclass, jbyteArray, jobjectArray);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_getResourceSetBinding
 * Signature: ([B)[Ljava/lang/String;
 */
JNIEXPORT jobjectArray JNICALL Java_Java_Main_TIntermediate_1getResourceSetBinding
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_setAutoMapBindings
 * Signature: ([BZ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TIntermediate_1setAutoMapBindings
  (JNIEnv *, jclass, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_setAutoMapLocations
 * Signature: ([BZ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TIntermediate_1setAutoMapLocations
  (JNIEnv *, jclass, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_setFlattenUniformArrays
 * Signature: ([BZ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TIntermediate_1setFlattenUniformArrays
  (JNIEnv *, jclass, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_getFlattenUniformArrays
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TIntermediate_1getFlattenUniformArrays
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_getNoStorageFormat
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TIntermediate_1getNoStorageFormat
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_addCounterBufferName
 * Signature: ([B[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TIntermediate_1addCounterBufferName
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_hasCounterBufferName
 * Signature: ([BLjava/lang/String;)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TIntermediate_1hasCounterBufferName
  (JNIEnv *, jclass, jbyteArray, jstring);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_setTextureSamplerTransformMode
 * Signature: ([BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TIntermediate_1setTextureSamplerTransformMode
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_setInvocations
 * Signature: ([BI)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TIntermediate_1setInvocations
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_getInvocations
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TIntermediate_1getInvocations
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_setVertices
 * Signature: ([BI)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TIntermediate_1setVertices
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_getVertices
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TIntermediate_1getVertices
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_getInputPrimitive
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TIntermediate_1getInputPrimitive
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_setVertexSpacing
 * Signature: ([BI)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TIntermediate_1setVertexSpacing
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_getVertexSpacing
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TIntermediate_1getVertexSpacing
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_setVertexOrder
 * Signature: ([BI)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TIntermediate_1setVertexOrder
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_getVertexOrder
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TIntermediate_1getVertexOrder
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_setPointMode
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TIntermediate_1setPointMode
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_getPointMode
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TIntermediate_1getPointMode
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_setInterlockOrdering
 * Signature: ([BI)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TIntermediate_1setInterlockOrdering
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_setXfbMode
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TIntermediate_1setXfbMode
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_setMultiStream
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TIntermediate_1setMultiStream
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_setOutputPrimitive
 * Signature: ([BI)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TIntermediate_1setOutputPrimitive
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_setPostDepthCoverage
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TIntermediate_1setPostDepthCoverage
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_setEarlyFragmentTests
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TIntermediate_1setEarlyFragmentTests
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_setDepth
 * Signature: ([BI)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TIntermediate_1setDepth
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_setPixelCenterInteger
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TIntermediate_1setPixelCenterInteger
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_ddBlendEquation
 * Signature: ([BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TIntermediate_1ddBlendEquation
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_getBlendEquations
 * Signature: ([B)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_TIntermediate_1getBlendEquations
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_setXfbBufferStride
 * Signature: ([BIJ)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TIntermediate_1setXfbBufferStride
  (JNIEnv *, jclass, jbyteArray, jint, jlong);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_addXfbBufferOffset
 * Signature: ([B[B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TIntermediate_1addXfbBufferOffset
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_computeTypeXfbSize
 * Signature: ([B[BZZZ)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_TIntermediate_1computeTypeXfbSize___3B_3BZZZ
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jboolean, jboolean, jboolean);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_computeTypeXfbSize
 * Signature: ([B[BZ)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_TIntermediate_1computeTypeXfbSize___3B_3BZ
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_setLayoutOverrideCoverage
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TIntermediate_1setLayoutOverrideCoverage
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_getLayoutOverrideCoverage
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TIntermediate_1getLayoutOverrideCoverage
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_setGeoPassthroughEXT
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TIntermediate_1setGeoPassthroughEXT
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_getGeoPassthroughEXT
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TIntermediate_1getGeoPassthroughEXT
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_setLayoutDerivativeMode
 * Signature: ([BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TIntermediate_1setLayoutDerivativeMode
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_setLayoutPrimitiveCulling
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TIntermediate_1setLayoutPrimitiveCulling
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_getLayoutPrimitiveCulling
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TIntermediate_1getLayoutPrimitiveCulling
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_setPrimitives
 * Signature: ([BI)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TIntermediate_1setPrimitives
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_getPrimitives
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TIntermediate_1getPrimitives
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_addSemanticName
 * Signature: ([BLjava/lang/String;)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_Java_Main_TIntermediate_1addSemanticName
  (JNIEnv *, jclass, jbyteArray, jstring);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_addUniformLocationOverride
 * Signature: ([BLjava/lang/String;I)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TIntermediate_1addUniformLocationOverride
  (JNIEnv *, jclass, jbyteArray, jstring, jint);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_getUniformLocationOverride
 * Signature: ([BLjava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TIntermediate_1getUniformLocationOverride
  (JNIEnv *, jclass, jbyteArray, jstring);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_setUniformLocationBase
 * Signature: ([BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TIntermediate_1setUniformLocationBase
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_getUniformLocationBase
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TIntermediate_1getUniformLocationBase
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_setNeedsLegalization
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TIntermediate_1setNeedsLegalization
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_needsLegalization
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TIntermediate_1needsLegalization
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_setBinaryDoubleOutput
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TIntermediate_1setBinaryDoubleOutput
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_getBinaryDoubleOutput
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TIntermediate_1getBinaryDoubleOutput
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_setHlslFunctionality1
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TIntermediate_1setHlslFunctionality1
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_setHlslOffsets
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TIntermediate_1setHlslOffsets
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_setHlslIoMapping
 * Signature: ([BZ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TIntermediate_1setHlslIoMapping
  (JNIEnv *, jclass, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_getHlslFunctionality1
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TIntermediate_1getHlslFunctionality1
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_usingHlslOffsets
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TIntermediate_1usingHlslOffsets
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_usingHlslIoMapping
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TIntermediate_1usingHlslIoMapping
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_addToCallGraph
 * Signature: ([B[BLjava/lang/String;Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TIntermediate_1addToCallGraph
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jstring, jstring);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_merge
 * Signature: ([B[B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TIntermediate_1merge
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_finalCheck
 * Signature: ([B[BZ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TIntermediate_1finalCheck
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_buildConvertOp
 * Signature: ([BIII)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TIntermediate_1buildConvertOp
  (JNIEnv *, jclass, jbyteArray, jint, jint, jint);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_createConversion
 * Signature: ([BI[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TIntermediate_1createConversion
  (JNIEnv *, jclass, jbyteArray, jint, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_addIoAccessed
 * Signature: ([BLjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TIntermediate_1addIoAccessed
  (JNIEnv *, jclass, jbyteArray, jstring);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_inIoAccessed
 * Signature: ([BLjava/lang/String;)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TIntermediate_1inIoAccessed
  (JNIEnv *, jclass, jbyteArray, jstring);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_addUsedLocation
 * Signature: ([B[B[BZ)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TIntermediate_1addUsedLocation
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_checkLocationRange
 * Signature: ([BI[B[BZ)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TIntermediate_1checkLocationRange
  (JNIEnv *, jclass, jbyteArray, jint, jbyteArray, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_addUsedOffsets
 * Signature: ([BIII)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TIntermediate_1addUsedOffsets
  (JNIEnv *, jclass, jbyteArray, jint, jint, jint);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_addUsedConstantId
 * Signature: ([BI)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TIntermediate_1addUsedConstantId
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_promote
 * Signature: ([B[B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TIntermediate_1promote
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_setNanMinMaxClamp
 * Signature: ([BZ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TIntermediate_1setNanMinMaxClamp
  (JNIEnv *, jclass, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_getNanMinMaxClamp
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TIntermediate_1getNanMinMaxClamp
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_setSourceFile
 * Signature: ([BLjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TIntermediate_1setSourceFile
  (JNIEnv *, jclass, jbyteArray, jstring);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_getSourceFile
 * Signature: ([B)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_Java_Main_TIntermediate_1getSourceFile
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_addSourceText
 * Signature: ([BLjava/lang/String;J)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TIntermediate_1addSourceText
  (JNIEnv *, jclass, jbyteArray, jstring, jlong);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_getSourceText
 * Signature: ([B)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_Java_Main_TIntermediate_1getSourceText
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_getIncludeText
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TIntermediate_1getIncludeText
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_addIncludeText
 * Signature: ([BLjava/lang/String;Ljava/lang/String;J)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TIntermediate_1addIncludeText
  (JNIEnv *, jclass, jbyteArray, jstring, jstring, jlong);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_addProcesses
 * Signature: ([B[Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TIntermediate_1addProcesses
  (JNIEnv *, jclass, jbyteArray, jobjectArray);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_addProcess
 * Signature: ([BLjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TIntermediate_1addProcess
  (JNIEnv *, jclass, jbyteArray, jstring);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_addProcessArgument
 * Signature: ([BLjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TIntermediate_1addProcessArgument
  (JNIEnv *, jclass, jbyteArray, jstring);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_getProcesses
 * Signature: ([B)[Ljava/lang/String;
 */
JNIEXPORT jobjectArray JNICALL Java_Java_Main_TIntermediate_1getProcesses
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_findLValueBase
 * Signature: ([BZ)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TIntermediate_1findLValueBase
  (JNIEnv *, jclass, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_computeTypeLocationSize
 * Signature: ([BI)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TIntermediate_1computeTypeLocationSize
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_computeTypeUniformLocationSize
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TIntermediate_1computeTypeUniformLocationSize
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_getBaseAlignmentScalar
 * Signature: ([BI)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TIntermediate_1getBaseAlignmentScalar
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_getBaseAlignment
 * Signature: ([BIIIZ)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TIntermediate_1getBaseAlignment
  (JNIEnv *, jclass, jbyteArray, jint, jint, jint, jboolean);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_getScalarAlignment
 * Signature: ([BIIZ)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TIntermediate_1getScalarAlignment
  (JNIEnv *, jclass, jbyteArray, jint, jint, jboolean);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_getMemberAlignment
 * Signature: ([BIIIZ)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TIntermediate_1getMemberAlignment
  (JNIEnv *, jclass, jbyteArray, jint, jint, jint, jboolean);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_improperStraddle
 * Signature: ([BII)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TIntermediate_1improperStraddle
  (JNIEnv *, jclass, jbyteArray, jint, jint);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_updateOffset
 * Signature: ([B[BII)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TIntermediate_1updateOffset
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jint, jint);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_getOffset
 * Signature: ([BI)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TIntermediate_1getOffset
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_getBlockSize
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TIntermediate_1getBlockSize
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermediate_computeBufferReferenceTypeSize
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TIntermediate_1computeBufferReferenceTypeSize
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TType
 * Signature: (IIIIIZ)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TType__IIIIIZ
  (JNIEnv *, jclass, jint, jint, jint, jint, jint, jboolean);

/*
 * Class:     Java_Main
 * Method:    TType
 * Signature: (IIIIIIZ)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TType__IIIIIIZ
  (JNIEnv *, jclass, jint, jint, jint, jint, jint, jint, jboolean);

/*
 * Class:     Java_Main
 * Method:    TType
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TType___3B
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TType
 * Signature: ([BI[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TType___3BI_3B
  (JNIEnv *, jclass, jbyteArray, jint, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TType
 * Signature: ([BIZ)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TType___3BIZ
  (JNIEnv *, jclass, jbyteArray, jint, jboolean);

/*
 * Class:     Java_Main
 * Method:    TType
 * Signature: ([BLjava/lang/String;)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TType___3BLjava_lang_String_2
  (JNIEnv *, jclass, jbyteArray, jstring);

/*
 * Class:     Java_Main
 * Method:    TType
 * Signature: ([BLjava/lang/String;[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TType___3BLjava_lang_String_2_3B
  (JNIEnv *, jclass, jbyteArray, jstring, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TType
 * Signature: (I[BLjava/lang/String;)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TType__I_3BLjava_lang_String_2
  (JNIEnv *, jclass, jint, jbyteArray, jstring);

/*
 * Class:     Java_Main
 * Method:    TType_shallowCopy
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TType_1shallowCopy
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TType_deepCopy
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TType_1deepCopy
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TType_makeTemporary
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TType_1makeTemporary
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TType_clone
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TType_1clone
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TType_makeVector
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TType_1makeVector
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TType_hideMember
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TType_1hideMember
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TType_hiddenMember
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TType_1hiddenMember
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TType_setFieldName
 * Signature: ([BLjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TType_1setFieldName
  (JNIEnv *, jclass, jbyteArray, jstring);

/*
 * Class:     Java_Main
 * Method:    TType_getFieldName
 * Signature: ([B)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_Java_Main_TType_1getFieldName
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TType_getShaderInterface
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TType_1getShaderInterface
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TType_getBasicType
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TType_1getBasicType
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TType_getSampler
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TType_1getSampler
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TType_getQualifier
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TType_1getQualifier
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TType_getVectorSize
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TType_1getVectorSize
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TType_getMatrixCols
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TType_1getMatrixCols
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TType_getMatrixRows
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TType_1getMatrixRows
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TType_getOuterArraySize
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TType_1getOuterArraySize
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TType_getOuterArrayNode
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TType_1getOuterArrayNode
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TType_getCumulativeArraySize
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TType_1getCumulativeArraySize
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TType_isArrayOfArrays
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TType_1isArrayOfArrays
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TType_getImplicitArraySize
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TType_1getImplicitArraySize
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TType_getArraySizes
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TType_1getArraySizes
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TType_getReferentType
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TType_1getReferentType
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TType_getTypeParameters
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TType_1getTypeParameters
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TType_isScalar
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TType_1isScalar
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TType_isScalarOrVec1
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TType_1isScalarOrVec1
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TType_isVector
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TType_1isVector
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TType_isMatrix
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TType_1isMatrix
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TType_isArray
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TType_1isArray
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TType_isSizedArray
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TType_1isSizedArray
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TType_isUnsizedArray
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TType_1isUnsizedArray
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TType_isArrayVariablyIndexed
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TType_1isArrayVariablyIndexed
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TType_setArrayVariablyIndexed
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TType_1setArrayVariablyIndexed
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TType_updateImplicitArraySize
 * Signature: ([BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TType_1updateImplicitArraySize
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TType_isStruct
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TType_1isStruct
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TType_isFloatingDomain
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TType_1isFloatingDomain
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TType_isIntegerDomain
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TType_1isIntegerDomain
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TType_isOpaque
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TType_1isOpaque
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TType_isBuiltIn
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TType_1isBuiltIn
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TType_isImage
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TType_1isImage
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TType_isSubpass
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TType_1isSubpass
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TType_isTexture
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TType_1isTexture
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TType_isUnusableName
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TType_1isUnusableName
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TType_isParameterized
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TType_1isParameterized
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TType_isAtomic
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TType_1isAtomic
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TType_isCoopMat
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TType_1isCoopMat
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TType_isReference
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TType_1isReference
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TType_contains
 * Signature: ([B[B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TType_1contains
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TType_containsBasicType
 * Signature: ([BI)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TType_1containsBasicType
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TType_containsArray
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TType_1containsArray
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TType_containsStructure
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TType_1containsStructure
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TType_containsUnsizedArray
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TType_1containsUnsizedArray
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TType_containsOpaque
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TType_1containsOpaque
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TType_containsBuiltIn
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TType_1containsBuiltIn
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TType_containsNonOpaque
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TType_1containsNonOpaque
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TType_containsSpecializationSize
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TType_1containsSpecializationSize
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TType_containsDouble
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TType_1containsDouble
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TType_contains16BitFloat
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TType_1contains16BitFloat
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TType_contains64BitInt
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TType_1contains64BitInt
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TType_contains16BitInt
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TType_1contains16BitInt
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TType_contains8BitInt
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TType_1contains8BitInt
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TType_containsCoopMat
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TType_1containsCoopMat
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TType_containsReference
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TType_1containsReference
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TType_updateArraySizes
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TType_1updateArraySizes
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TType_copyArraySizes
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TType_1copyArraySizes
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TType_transferArraySizes
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TType_1transferArraySizes
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TType_clearArraySizes
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TType_1clearArraySizes
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TType_copyArrayInnerSizes
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TType_1copyArrayInnerSizes
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TType_changeOuterArraySize
 * Signature: ([BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TType_1changeOuterArraySize
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TType_adoptImplicitArraySizes
 * Signature: ([BZ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TType_1adoptImplicitArraySizes
  (JNIEnv *, jclass, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    TType_updateTypeParameters
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TType_1updateTypeParameters
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TType_copyTypeParameters
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TType_1copyTypeParameters
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TType_transferTypeParameters
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TType_1transferTypeParameters
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TType_clearTypeParameters
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TType_1clearTypeParameters
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TType_copyTypeParametersInnerSizes
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TType_1copyTypeParametersInnerSizes
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TType_getBasicString
 * Signature: ([B)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_Java_Main_TType_1getBasicString___3B
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TType_getBasicTypeString
 * Signature: ([B)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_Java_Main_TType_1getBasicTypeString
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TType_getCompleteString
 * Signature: ([B)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_Java_Main_TType_1getCompleteString
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TType_getStorageQualifierString
 * Signature: ([B)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_Java_Main_TType_1getStorageQualifierString
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TType_getBuiltInVariableString
 * Signature: ([B)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_Java_Main_TType_1getBuiltInVariableString
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TType_getPrecisionQualifierString
 * Signature: ([B)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_Java_Main_TType_1getPrecisionQualifierString
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TType_getStruct
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TType_1getStruct
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TType_setStruct
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TType_1setStruct
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TType_getWritableStruct
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TType_1getWritableStruct
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TType_setBasicType
 * Signature: ([BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TType_1setBasicType
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TType_computeNumComponents
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TType_1computeNumComponents
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TType_appendMangledName
 * Signature: ([BLjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TType_1appendMangledName
  (JNIEnv *, jclass, jbyteArray, jstring);

/*
 * Class:     Java_Main
 * Method:    TType_sameStructType
 * Signature: ([B[B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TType_1sameStructType
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TType_sameReferenceType
 * Signature: ([B[B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TType_1sameReferenceType
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TType_sameElementType
 * Signature: ([B[B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TType_1sameElementType
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TType_sameArrayness
 * Signature: ([B[B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TType_1sameArrayness
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TType_sameInnerArrayness
 * Signature: ([B[B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TType_1sameInnerArrayness
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TType_sameTypeParameters
 * Signature: ([B[B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TType_1sameTypeParameters
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TType_sameElementShape
 * Signature: ([B[B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TType_1sameElementShape
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TType_coopMatParameterOK
 * Signature: ([B[B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TType_1coopMatParameterOK
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TType_sameCoopMatBaseType
 * Signature: ([B[B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TType_1sameCoopMatBaseType
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TType_getBufferReferenceAlignment
 * Signature: ([B)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_TType_1getBufferReferenceAlignment
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TType_getBasicString
 * Signature: (I)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_Java_Main_TType_1getBasicString__I
  (JNIEnv *, jclass, jint);

/*
 * Class:     Java_Main
 * Method:    TType_operatorEqual
 * Signature: ([B[B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TType_1operatorEqual
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TType_operatorNotEqual
 * Signature: ([B[B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TType_1operatorNotEqual
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TPublicType
 * Signature: ()[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TPublicType
  (JNIEnv *, jclass);

/*
 * Class:     Java_Main
 * Method:    TPublicType_isCoopmat
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TPublicType_1isCoopmat
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TPublicType_initType
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TPublicType_1initType
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TPublicType_initQualifiers
 * Signature: ([BZ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TPublicType_1initQualifiers
  (JNIEnv *, jclass, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    TPublicType_init
 * Signature: ([B[BZ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TPublicType_1init
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    TPublicType_setVector
 * Signature: ([BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TPublicType_1setVector
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TPublicType_setMatrix
 * Signature: ([BII)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TPublicType_1setMatrix
  (JNIEnv *, jclass, jbyteArray, jint, jint);

/*
 * Class:     Java_Main
 * Method:    TPublicType_isScalar
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TPublicType_1isScalar
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TPublicType_isImage
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TPublicType_1isImage
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TPublicType_isSubpass
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TPublicType_1isSubpass
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TPublicType_setBasicType
 * Signature: ([BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TPublicType_1setBasicType
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TPublicType_setSampler
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TPublicType_1setSampler
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TPublicType_setQualifier
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TPublicType_1setQualifier
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TPublicType_setShaderQualifiers
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TPublicType_1setShaderQualifiers
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TPublicType_setVectorSize
 * Signature: ([BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TPublicType_1setVectorSize
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TPublicType_setMatrixCols
 * Signature: ([BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TPublicType_1setMatrixCols
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TPublicType_setMatrixRows
 * Signature: ([BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TPublicType_1setMatrixRows
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TPublicType_setCoopmat
 * Signature: ([BZ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TPublicType_1setCoopmat
  (JNIEnv *, jclass, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    TPublicType_setArraySizes
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TPublicType_1setArraySizes
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TPublicType_setUserDef
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TPublicType_1setUserDef
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TPublicType_setLoc
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TPublicType_1setLoc
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TPublicType_setTypeParameters
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TPublicType_1setTypeParameters
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TPublicType_getBasicType
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TPublicType_1getBasicType
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TPublicType_getSampler
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TPublicType_1getSampler
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TPublicType_getQualifier
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TPublicType_1getQualifier
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TPublicType_getShaderQualifiers
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TPublicType_1getShaderQualifiers
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TPublicType_getVectorSize
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TPublicType_1getVectorSize
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TPublicType_getMatrixCols
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TPublicType_1getMatrixCols
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TPublicType_getMatrixRows
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TPublicType_1getMatrixRows
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TPublicType_getCoopmat
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TPublicType_1getCoopmat
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TPublicType_getArraySizes
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TPublicType_1getArraySizes
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TPublicType_getUserDef
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TPublicType_1getUserDef
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TPublicType_getLoc
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TPublicType_1getLoc
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TPublicType_getTypeParameters
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TPublicType_1getTypeParameters
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TSampler
 * Signature: ()[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TSampler
  (JNIEnv *, jclass);

/*
 * Class:     Java_Main
 * Method:    TSampler_is1D
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TSampler_1is1D
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TSampler_isBuffer
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TSampler_1isBuffer
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TSampler_isRect
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TSampler_1isRect
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TSampler_isSubpass
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TSampler_1isSubpass
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TSampler_isCombined
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TSampler_1isCombined
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TSampler_isImage
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TSampler_1isImage
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TSampler_isImageClass
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TSampler_1isImageClass
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TSampler_isMultiSample
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TSampler_1isMultiSample
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TSampler_isExternal
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TSampler_1isExternal
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TSampler_setExternal
 * Signature: ([BZ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TSampler_1setExternal
  (JNIEnv *, jclass, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    TSampler_isYuv
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TSampler_1isYuv
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TSampler_isTexture
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TSampler_1isTexture
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TSampler_isPureSampler
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TSampler_1isPureSampler
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TSampler_setCombined
 * Signature: ([BZ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TSampler_1setCombined
  (JNIEnv *, jclass, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    TSampler_setBasicType
 * Signature: ([BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TSampler_1setBasicType
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TSampler_getBasicType
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TSampler_1getBasicType
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TSampler_isShadow
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TSampler_1isShadow
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TSampler_isArrayed
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TSampler_1isArrayed
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TSampler_clear
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TSampler_1clear
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TSampler_set
 * Signature: ([BIIZZZ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TSampler_1set
  (JNIEnv *, jclass, jbyteArray, jint, jint, jboolean, jboolean, jboolean);

/*
 * Class:     Java_Main
 * Method:    TSampler_setImage
 * Signature: ([BIIZZZ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TSampler_1setImage___3BIIZZZ
  (JNIEnv *, jclass, jbyteArray, jint, jint, jboolean, jboolean, jboolean);

/*
 * Class:     Java_Main
 * Method:    TSampler_setTexture
 * Signature: ([BIIZZZ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TSampler_1setTexture
  (JNIEnv *, jclass, jbyteArray, jint, jint, jboolean, jboolean, jboolean);

/*
 * Class:     Java_Main
 * Method:    TSampler_setPureSampler
 * Signature: ([BZ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TSampler_1setPureSampler
  (JNIEnv *, jclass, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    TSampler_setSubpass
 * Signature: ([BIZ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TSampler_1setSubpass
  (JNIEnv *, jclass, jbyteArray, jint, jboolean);

/*
 * Class:     Java_Main
 * Method:    TSampler_setArrayed
 * Signature: ([BZ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TSampler_1setArrayed
  (JNIEnv *, jclass, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    TSampler_setShadow
 * Signature: ([BZ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TSampler_1setShadow
  (JNIEnv *, jclass, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    TSampler_setMs
 * Signature: ([BZ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TSampler_1setMs
  (JNIEnv *, jclass, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    TSampler_setImage
 * Signature: ([BZ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TSampler_1setImage___3BZ
  (JNIEnv *, jclass, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    TSampler_setSampler
 * Signature: ([BZ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TSampler_1setSampler
  (JNIEnv *, jclass, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    TSampler_setYuv
 * Signature: ([BZ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TSampler_1setYuv
  (JNIEnv *, jclass, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    TSampler_setDim
 * Signature: ([BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TSampler_1setDim
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TSampler_setVectorSize
 * Signature: ([BJ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TSampler_1setVectorSize
  (JNIEnv *, jclass, jbyteArray, jlong);

/*
 * Class:     Java_Main
 * Method:    TSampler_setStructReturnIndex
 * Signature: ([BJ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TSampler_1setStructReturnIndex
  (JNIEnv *, jclass, jbyteArray, jlong);

/*
 * Class:     Java_Main
 * Method:    TSampler_getDim
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TSampler_1getDim
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TSampler_getStructReturnIndex
 * Signature: ([B)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_TSampler_1getStructReturnIndex
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TSampler_getVectorSize
 * Signature: ([B)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_TSampler_1getVectorSize
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TSampler_getStructReturnIndexBits
 * Signature: ()J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_TSampler_1getStructReturnIndexBits
  (JNIEnv *, jclass);

/*
 * Class:     Java_Main
 * Method:    TSampler_getStructReturnSlots
 * Signature: ()J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_TSampler_1getStructReturnSlots
  (JNIEnv *, jclass);

/*
 * Class:     Java_Main
 * Method:    TSampler_getNoReturnStruct
 * Signature: ()J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_TSampler_1getNoReturnStruct
  (JNIEnv *, jclass);

/*
 * Class:     Java_Main
 * Method:    TSampler_operatorEqual
 * Signature: ([B[B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TSampler_1operatorEqual
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TSampler_operatorNotEqual
 * Signature: ([B[B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TSampler_1operatorNotEqual
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TTypeLoc
 * Signature: ()[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TTypeLoc__
  (JNIEnv *, jclass);

/*
 * Class:     Java_Main
 * Method:    TTypeLoc
 * Signature: ([B[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TTypeLoc___3B_3B
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TTypeLoc_setType
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TTypeLoc_1setType
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TTypeLoc_setLoc
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TTypeLoc_1setLoc
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TTypeLoc_getType
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TTypeLoc_1getType
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TTypeLoc_getLoc
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TTypeLoc_1getLoc
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TArraySizes
 * Signature: ()[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TArraySizes
  (JNIEnv *, jclass);

/*
 * Class:     Java_Main
 * Method:    TArraySizes_getNumDims
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TArraySizes_1getNumDims
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TArraySizes_getDimSize
 * Signature: ([BI)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TArraySizes_1getDimSize
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TArraySizes_getDimNode
 * Signature: ([BI)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TArraySizes_1getDimNode
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TArraySizes_setDimSize
 * Signature: ([BII)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TArraySizes_1setDimSize
  (JNIEnv *, jclass, jbyteArray, jint, jint);

/*
 * Class:     Java_Main
 * Method:    TArraySizes_getOuterSize
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TArraySizes_1getOuterSize
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TArraySizes_getOuterNode
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TArraySizes_1getOuterNode
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TArraySizes_getCumulativeSize
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TArraySizes_1getCumulativeSize
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TArraySizes_addInnerSize
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TArraySizes_1addInnerSize___3B
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TArraySizes_addInnerSize
 * Signature: ([BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TArraySizes_1addInnerSize___3BI
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TArraySizes_addInnerSize
 * Signature: ([BI[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TArraySizes_1addInnerSize___3BI_3B
  (JNIEnv *, jclass, jbyteArray, jint, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TArraySizes_addInnerSize
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TArraySizes_1addInnerSize___3B_3B
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TArraySizes_addInnerSizes
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TArraySizes_1addInnerSizes
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TArraySizes_changeOuterSize
 * Signature: ([BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TArraySizes_1changeOuterSize
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TArraySizes_getImplicitSize
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TArraySizes_1getImplicitSize
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TArraySizes_updateImplicitSize
 * Signature: ([BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TArraySizes_1updateImplicitSize
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TArraySizes_isInnerUnsized
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TArraySizes_1isInnerUnsized
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TArraySizes_clearInnerUnsized
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TArraySizes_1clearInnerUnsized
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TArraySizes_isInnerSpecialization
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TArraySizes_1isInnerSpecialization
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TArraySizes_isOuterSpecialization
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TArraySizes_1isOuterSpecialization
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TArraySizes_hasUnsized
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TArraySizes_1hasUnsized
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TArraySizes_isSized
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TArraySizes_1isSized
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TArraySizes_dereference
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TArraySizes_1dereference
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TArraySizes_copyDereferenced
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TArraySizes_1copyDereferenced
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TArraySizes_sameInnerArrayness
 * Signature: ([B[B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TArraySizes_1sameInnerArrayness
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TArraySizes_setVariablyIndexed
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TArraySizes_1setVariablyIndexed
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TArraySizes_isVariablyIndexed
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TArraySizes_1isVariablyIndexed
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TArraySizes_operatorAssign
 * Signature: ([B[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TArraySizes_1operatorAssign
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TArraySizes_operatorEqual
 * Signature: ([B[B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TArraySizes_1operatorEqual
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TArraySizes_operatorNotEqual
 * Signature: ([B[B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TArraySizes_1operatorNotEqual
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TArraySize
 * Signature: ()[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TArraySize__
  (JNIEnv *, jclass);

/*
 * Class:     Java_Main
 * Method:    TArraySize
 * Signature: (J[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TArraySize__J_3B
  (JNIEnv *, jclass, jlong, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TArraySize_setSize
 * Signature: ([BJ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TArraySize_1setSize
  (JNIEnv *, jclass, jbyteArray, jlong);

/*
 * Class:     Java_Main
 * Method:    TArraySize_setNode
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TArraySize_1setNode
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TArraySize_getSize
 * Signature: ([B)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_TArraySize_1getSize
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TArraySize_getNode
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TArraySize_1getNode
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TArraySize_operatorEqual
 * Signature: ([B[B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TArraySize_1operatorEqual
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermNode_getLoc
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TIntermNode_1getLoc
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermNode_setLoc
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TIntermNode_1setLoc
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermNode_traverse
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TIntermNode_1traverse
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermNode_getAsTyped
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TIntermNode_1getAsTyped
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermNode_getAsOperator
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TIntermNode_1getAsOperator
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermNode_getAsConstantUnion
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TIntermNode_1getAsConstantUnion
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermNode_getAsAggregate
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TIntermNode_1getAsAggregate
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermNode_getAsUnaryNode
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TIntermNode_1getAsUnaryNode
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermNode_getAsBinaryNode
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TIntermNode_1getAsBinaryNode
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermNode_getAsSelectionNode
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TIntermNode_1getAsSelectionNode
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermNode_getAsSwitchNode
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TIntermNode_1getAsSwitchNode
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermNode_getAsMethodNode
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TIntermNode_1getAsMethodNode
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermNode_getAsSymbolNode
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TIntermNode_1getAsSymbolNode
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermNode_getAsBranchNode
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TIntermNode_1getAsBranchNode
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermNode_getAsLoopNode
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TIntermNode_1getAsLoopNode
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermLoop
 * Signature: ([B[B[BZ)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TIntermLoop
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    TIntermLoop_getAsLoopNode
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TIntermLoop_1getAsLoopNode
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermLoop_traverse
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TIntermLoop_1traverse
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermLoop_getBody
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TIntermLoop_1getBody
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermLoop_getTest
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TIntermLoop_1getTest
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermLoop_getTerminal
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TIntermLoop_1getTerminal
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermLoop_testFirst
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TIntermLoop_1testFirst
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermLoop_setUnroll
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TIntermLoop_1setUnroll
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermLoop_setDontUnroll
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TIntermLoop_1setDontUnroll
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermLoop_getUnroll
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TIntermLoop_1getUnroll
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermLoop_getDontUnroll
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TIntermLoop_1getDontUnroll
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermLoop_setLoopDependency
 * Signature: ([BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TIntermLoop_1setLoopDependency
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TIntermLoop_getLoopDependency
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TIntermLoop_1getLoopDependency
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermLoop_setMinIterations
 * Signature: ([BJ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TIntermLoop_1setMinIterations
  (JNIEnv *, jclass, jbyteArray, jlong);

/*
 * Class:     Java_Main
 * Method:    TIntermLoop_getMinIterations
 * Signature: ([B)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_TIntermLoop_1getMinIterations
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermLoop_setMaxIterations
 * Signature: ([BJ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TIntermLoop_1setMaxIterations
  (JNIEnv *, jclass, jbyteArray, jlong);

/*
 * Class:     Java_Main
 * Method:    TIntermLoop_getMaxIterations
 * Signature: ([B)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_TIntermLoop_1getMaxIterations
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermLoop_setIterationMultiple
 * Signature: ([BJ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TIntermLoop_1setIterationMultiple
  (JNIEnv *, jclass, jbyteArray, jlong);

/*
 * Class:     Java_Main
 * Method:    TIntermLoop_getIterationMultiple
 * Signature: ([B)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_TIntermLoop_1getIterationMultiple
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermLoop_setPeelCount
 * Signature: ([BJ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TIntermLoop_1setPeelCount
  (JNIEnv *, jclass, jbyteArray, jlong);

/*
 * Class:     Java_Main
 * Method:    TIntermLoop_getPeelCount
 * Signature: ([B)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_TIntermLoop_1getPeelCount
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermLoop_setPartialCount
 * Signature: ([BJ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TIntermLoop_1setPartialCount
  (JNIEnv *, jclass, jbyteArray, jlong);

/*
 * Class:     Java_Main
 * Method:    TIntermLoop_getPartialCount
 * Signature: ([B)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_TIntermLoop_1getPartialCount
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermBranch
 * Signature: (I[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TIntermBranch
  (JNIEnv *, jclass, jint, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermBranch_getAsBranchNode
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TIntermBranch_1getAsBranchNode
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermBranch_traverse
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TIntermBranch_1traverse
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermBranch_getFlowOp
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TIntermBranch_1getFlowOp
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermBranch_getExpression
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TIntermBranch_1getExpression
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermBranch_setExpression
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TIntermBranch_1setExpression
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermBranch_updatePrecision
 * Signature: ([BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TIntermBranch_1updatePrecision
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TIntermConstantUnion
 * Signature: ([B[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TIntermConstantUnion
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermConstantUnion_getConstArray
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TIntermConstantUnion_1getConstArray
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermConstantUnion_getAsConstantUnion
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TIntermConstantUnion_1getAsConstantUnion
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermConstantUnion_traverse
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TIntermConstantUnion_1traverse
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermConstantUnion_foldTyped
 * Signature: ([BI[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TIntermConstantUnion_1foldTyped
  (JNIEnv *, jclass, jbyteArray, jint, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermConstantUnion_fold
 * Signature: ([BI[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TIntermConstantUnion_1fold
  (JNIEnv *, jclass, jbyteArray, jint, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermConstantUnion_setLiteral
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TIntermConstantUnion_1setLiteral
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermConstantUnion_setExpression
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TIntermConstantUnion_1setExpression
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermConstantUnion_isLiteral
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TIntermConstantUnion_1isLiteral
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermSelection
 * Signature: ([B[B[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TIntermSelection___3B_3B_3B
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermSelection
 * Signature: ([B[B[B[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TIntermSelection___3B_3B_3B_3B
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermSelection_traverse
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TIntermSelection_1traverse
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermSelection_getCondition
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TIntermSelection_1getCondition
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermSelection_getTrueBlock
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TIntermSelection_1getTrueBlock
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermSelection_getFalseBlock
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TIntermSelection_1getFalseBlock
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermSelection_getAsSelectionNode
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TIntermSelection_1getAsSelectionNode
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermSelection_setNoShortCircuit
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TIntermSelection_1setNoShortCircuit
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermSelection_getShortCircuit
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TIntermSelection_1getShortCircuit
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermSelection_setFlatten
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TIntermSelection_1setFlatten
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermSelection_setDontFlatten
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TIntermSelection_1setDontFlatten
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermSelection_getFlatten
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TIntermSelection_1getFlatten
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermSelection_getDontFlatten
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TIntermSelection_1getDontFlatten
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermSwitch
 * Signature: ([B[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TIntermSwitch
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermSwitch_traverse
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TIntermSwitch_1traverse
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermSwitch_getCondition
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TIntermSwitch_1getCondition
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermSwitch_getBody
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TIntermSwitch_1getBody
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermSwitch_getAsSwitchNode
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TIntermSwitch_1getAsSwitchNode
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermSwitch_setFlatten
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TIntermSwitch_1setFlatten
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermSwitch_setDontFlatten
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TIntermSwitch_1setDontFlatten
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermSwitch_getFlatten
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TIntermSwitch_1getFlatten
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermSwitch_getDontFlatten
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TIntermSwitch_1getDontFlatten
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermMethod
 * Signature: ([B[BLjava/lang/String;)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TIntermMethod
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jstring);

/*
 * Class:     Java_Main
 * Method:    TIntermMethod_getAsMethodNode
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TIntermMethod_1getAsMethodNode
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermMethod_getMethodName
 * Signature: ([B)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_Java_Main_TIntermMethod_1getMethodName
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermMethod_getObject
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TIntermMethod_1getObject
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermMethod_traverse
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TIntermMethod_1traverse
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermAggregate
 * Signature: ()[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TIntermAggregate__
  (JNIEnv *, jclass);

/*
 * Class:     Java_Main
 * Method:    TIntermAggregate
 * Signature: (I)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TIntermAggregate__I
  (JNIEnv *, jclass, jint);

/*
 * Class:     Java_Main
 * Method:    TIntermAggregate_getAsAggregate
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TIntermAggregate_1getAsAggregate
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermAggregate_setOperator
 * Signature: ([BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TIntermAggregate_1setOperator
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TIntermAggregate_getSequence
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TIntermAggregate_1getSequence
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermAggregate_setName
 * Signature: ([BLjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TIntermAggregate_1setName
  (JNIEnv *, jclass, jbyteArray, jstring);

/*
 * Class:     Java_Main
 * Method:    TIntermAggregate_getName
 * Signature: ([B)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_Java_Main_TIntermAggregate_1getName
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermAggregate_traverse
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TIntermAggregate_1traverse
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermAggregate_setUserDefined
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TIntermAggregate_1setUserDefined
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermAggregate_isUserDefined
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TIntermAggregate_1isUserDefined
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermAggregate_getQualifierList
 * Signature: ([B)[I
 */
JNIEXPORT jintArray JNICALL Java_Java_Main_TIntermAggregate_1getQualifierList
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermAggregate_setOptimize
 * Signature: ([BZ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TIntermAggregate_1setOptimize
  (JNIEnv *, jclass, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    TIntermAggregate_setDebug
 * Signature: ([BZ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TIntermAggregate_1setDebug
  (JNIEnv *, jclass, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    TIntermAggregate_getOptimize
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TIntermAggregate_1getOptimize
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermAggregate_getDebug
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TIntermAggregate_1getDebug
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermAggregate_setPragmaTable
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TIntermAggregate_1setPragmaTable
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermAggregate_getPragmaTable
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TIntermAggregate_1getPragmaTable
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermOperator_getAsOperator
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TIntermOperator_1getAsOperator
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermOperator_getOp
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TIntermOperator_1getOp
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermOperator_setOp
 * Signature: ([BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TIntermOperator_1setOp
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TIntermOperator_modifiesState
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TIntermOperator_1modifiesState
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermOperator_isConstructor
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TIntermOperator_1isConstructor
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermOperator_isTexture
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TIntermOperator_1isTexture
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermOperator_isSampling
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TIntermOperator_1isSampling
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermOperator_isImage
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TIntermOperator_1isImage
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermOperator_isSparseTexture
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TIntermOperator_1isSparseTexture
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermOperator_isImageFootprint
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TIntermOperator_1isImageFootprint
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermOperator_isSparseImage
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TIntermOperator_1isSparseImage
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermOperator_isSubgroup
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TIntermOperator_1isSubgroup
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermOperator_setOperationPrecision
 * Signature: ([BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TIntermOperator_1setOperationPrecision
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TIntermOperator_getOperationPrecision
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TIntermOperator_1getOperationPrecision
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermOperator_getCompleteString
 * Signature: ([B)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_Java_Main_TIntermOperator_1getCompleteString
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermOperator_crackTexture
 * Signature: ([B[B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TIntermOperator_1crackTexture
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermBinary
 * Signature: (I)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TIntermBinary
  (JNIEnv *, jclass, jint);

/*
 * Class:     Java_Main
 * Method:    TIntermBinary_traverse
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TIntermBinary_1traverse
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermBinary_setLeft
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TIntermBinary_1setLeft
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermBinary_setRight
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TIntermBinary_1setRight
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermBinary_getLeft
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TIntermBinary_1getLeft
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermBinary_getRight
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TIntermBinary_1getRight
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermBinary_getAsBinaryNode
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TIntermBinary_1getAsBinaryNode
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermBinary_updatePrecision
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TIntermBinary_1updatePrecision
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermUnary
 * Signature: (I[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TIntermUnary__I_3B
  (JNIEnv *, jclass, jint, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermUnary
 * Signature: (I)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TIntermUnary__I
  (JNIEnv *, jclass, jint);

/*
 * Class:     Java_Main
 * Method:    TIntermUnary_traverse
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TIntermUnary_1traverse
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermUnary_setOperand
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TIntermUnary_1setOperand
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermUnary_getOperand
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TIntermUnary_1getOperand
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermUnary_getAsUnaryNode
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TIntermUnary_1getAsUnaryNode
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermUnary_updatePrecision
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TIntermUnary_1updatePrecision
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermNodePair
 * Signature: ([B[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TIntermNodePair___3B_3B
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermNodePair
 * Signature: ()[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TIntermNodePair__
  (JNIEnv *, jclass);

/*
 * Class:     Java_Main
 * Method:    TIntermNodePair_setNode1
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TIntermNodePair_1setNode1
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermNodePair_setNode2
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TIntermNodePair_1setNode2
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermNodePair_getNode1
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TIntermNodePair_1getNode1
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIntermNodePair_getNode2
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TIntermNodePair_1getNode2
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TPragmaTable
 * Signature: ()[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TPragmaTable
  (JNIEnv *, jclass);

/*
 * Class:     Java_Main
 * Method:    TCrackedTextureOp
 * Signature: ()[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TCrackedTextureOp__
  (JNIEnv *, jclass);

/*
 * Class:     Java_Main
 * Method:    TCrackedTextureOp
 * Signature: (ZZZZZZZZZZZ)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TCrackedTextureOp__ZZZZZZZZZZZ
  (JNIEnv *, jclass, jboolean, jboolean, jboolean, jboolean, jboolean, jboolean, jboolean, jboolean, jboolean, jboolean, jboolean);

/*
 * Class:     Java_Main
 * Method:    TCrackedTextureOp_setQuery
 * Signature: ([BZ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TCrackedTextureOp_1setQuery
  (JNIEnv *, jclass, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    TCrackedTextureOp_setProj
 * Signature: ([BZ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TCrackedTextureOp_1setProj
  (JNIEnv *, jclass, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    TCrackedTextureOp_setLod
 * Signature: ([BZ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TCrackedTextureOp_1setLod
  (JNIEnv *, jclass, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    TCrackedTextureOp_setFetch
 * Signature: ([BZ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TCrackedTextureOp_1setFetch
  (JNIEnv *, jclass, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    TCrackedTextureOp_setOffset
 * Signature: ([BZ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TCrackedTextureOp_1setOffset
  (JNIEnv *, jclass, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    TCrackedTextureOp_setOffsets
 * Signature: ([BZ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TCrackedTextureOp_1setOffsets
  (JNIEnv *, jclass, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    TCrackedTextureOp_setGather
 * Signature: ([BZ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TCrackedTextureOp_1setGather
  (JNIEnv *, jclass, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    TCrackedTextureOp_setGrad
 * Signature: ([BZ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TCrackedTextureOp_1setGrad
  (JNIEnv *, jclass, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    TCrackedTextureOp_setSubpass
 * Signature: ([BZ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TCrackedTextureOp_1setSubpass
  (JNIEnv *, jclass, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    TCrackedTextureOp_setLodClamp
 * Signature: ([BZ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TCrackedTextureOp_1setLodClamp
  (JNIEnv *, jclass, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    TCrackedTextureOp_setFragMask
 * Signature: ([BZ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TCrackedTextureOp_1setFragMask
  (JNIEnv *, jclass, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    TCrackedTextureOp_getQuery
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TCrackedTextureOp_1getQuery
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TCrackedTextureOp_getProj
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TCrackedTextureOp_1getProj
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TCrackedTextureOp_getLod
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TCrackedTextureOp_1getLod
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TCrackedTextureOp_getFetch
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TCrackedTextureOp_1getFetch
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TCrackedTextureOp_getOffset
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TCrackedTextureOp_1getOffset
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TCrackedTextureOp_getOffsets
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TCrackedTextureOp_1getOffsets
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TCrackedTextureOp_getGather
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TCrackedTextureOp_1getGather
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TCrackedTextureOp_getGrad
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TCrackedTextureOp_1getGrad
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TCrackedTextureOp_getSubpass
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TCrackedTextureOp_1getSubpass
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TCrackedTextureOp_getLodClamp
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TCrackedTextureOp_1getLodClamp
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TCrackedTextureOp_getFragMask
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TCrackedTextureOp_1getFragMask
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TSwizzleSelectors
 * Signature: ()[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TSwizzleSelectors
  (JNIEnv *, jclass);

/*
 * Class:     Java_Main
 * Method:    TSwizzleSelectors_push_back
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TSwizzleSelectors_1push_1back
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TSwizzleSelectors_resize
 * Signature: ([BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TSwizzleSelectors_1resize
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TSwizzleSelectors_size
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TSwizzleSelectors_1size
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TSwizzleSelectors_operatorAt
 * Signature: ([BI)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TSwizzleSelectors_1operatorAt
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TSwizzleSelectorsInt
 * Signature: ()[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TSwizzleSelectorsInt
  (JNIEnv *, jclass);

/*
 * Class:     Java_Main
 * Method:    TSwizzleSelectorsInt_push_back
 * Signature: ([BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TSwizzleSelectorsInt_1push_1back
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TSwizzleSelectorsInt_resize
 * Signature: ([BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TSwizzleSelectorsInt_1resize
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TSwizzleSelectorsInt_size
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TSwizzleSelectorsInt_1size
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TSwizzleSelectorsInt_operatorAt
 * Signature: ([BI)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TSwizzleSelectorsInt_1operatorAt
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TSymbolTable
 * Signature: ()[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TSymbolTable
  (JNIEnv *, jclass);

/*
 * Class:     Java_Main
 * Method:    TSymbolTable_adoptLevels
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TSymbolTable_1adoptLevels
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TSymbolTable_isEmpty
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TSymbolTable_1isEmpty
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TSymbolTable_atBuiltInLevel
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TSymbolTable_1atBuiltInLevel
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TSymbolTable_atGlobalLevel
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TSymbolTable_1atGlobalLevel
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TSymbolTable_setNoBuiltInRedeclarations
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TSymbolTable_1setNoBuiltInRedeclarations
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TSymbolTable_setSeparateNameSpaces
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TSymbolTable_1setSeparateNameSpaces
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TSymbolTable_push
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TSymbolTable_1push
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TSymbolTable_pushThis
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TSymbolTable_1pushThis
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TSymbolTable_pop
 * Signature: ([BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TSymbolTable_1pop
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TSymbolTable_insert
 * Signature: ([B[B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TSymbolTable_1insert
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TSymbolTable_amend
 * Signature: ([B[BI)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TSymbolTable_1amend
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TSymbolTable_makeInternalVariable
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TSymbolTable_1makeInternalVariable
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TSymbolTable_copyUpDeferredInsert
 * Signature: ([B[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TSymbolTable_1copyUpDeferredInsert
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TSymbolTable_copyUp
 * Signature: ([B[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TSymbolTable_1copyUp
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TSymbolTable_find
 * Signature: ([BLjava/lang/String;ZZI)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TSymbolTable_1find___3BLjava_lang_String_2ZZI
  (JNIEnv *, jclass, jbyteArray, jstring, jboolean, jboolean, jint);

/*
 * Class:     Java_Main
 * Method:    TSymbolTable_find
 * Signature: ([BLjava/lang/String;I)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TSymbolTable_1find___3BLjava_lang_String_2I
  (JNIEnv *, jclass, jbyteArray, jstring, jint);

/*
 * Class:     Java_Main
 * Method:    TSymbolTable_isFunctionNameVariable
 * Signature: ([BLjava/lang/String;)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TSymbolTable_1isFunctionNameVariable
  (JNIEnv *, jclass, jbyteArray, jstring);

/*
 * Class:     Java_Main
 * Method:    TSymbolTable_findFunctionNameList
 * Signature: ([BLjava/lang/String;[BZ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TSymbolTable_1findFunctionNameList
  (JNIEnv *, jclass, jbyteArray, jstring, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    TSymbolTable_relateToOperator
 * Signature: ([BLjava/lang/String;I)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TSymbolTable_1relateToOperator
  (JNIEnv *, jclass, jbyteArray, jstring, jint);

/*
 * Class:     Java_Main
 * Method:    TSymbolTable_setFunctionExtensions
 * Signature: ([BLjava/lang/String;[Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TSymbolTable_1setFunctionExtensions
  (JNIEnv *, jclass, jbyteArray, jstring, jobjectArray);

/*
 * Class:     Java_Main
 * Method:    TSymbolTable_setVariableExtensions
 * Signature: ([BLjava/lang/String;[Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TSymbolTable_1setVariableExtensions___3BLjava_lang_String_2_3Ljava_lang_String_2
  (JNIEnv *, jclass, jbyteArray, jstring, jobjectArray);

/*
 * Class:     Java_Main
 * Method:    TSymbolTable_setVariableExtensions
 * Signature: ([BLjava/lang/String;Ljava/lang/String;[Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TSymbolTable_1setVariableExtensions___3BLjava_lang_String_2Ljava_lang_String_2_3Ljava_lang_String_2
  (JNIEnv *, jclass, jbyteArray, jstring, jstring, jobjectArray);

/*
 * Class:     Java_Main
 * Method:    TSymbolTable_getMaxSymbolId
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TSymbolTable_1getMaxSymbolId
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TSymbolTable_dump
 * Signature: ([B[BZ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TSymbolTable_1dump
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    TSymbolTable_copyTable
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TSymbolTable_1copyTable
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TSymbolTable_setPreviousDefaultPrecisions
 * Signature: ([BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TSymbolTable_1setPreviousDefaultPrecisions
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TSymbolTable_readOnly
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TSymbolTable_1readOnly
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TQualifier
 * Signature: ()[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TQualifier
  (JNIEnv *, jclass);

/*
 * Class:     Java_Main
 * Method:    TQualifier_clear
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TQualifier_1clear
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TQualifier_makeTemporary
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TQualifier_1makeTemporary
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TQualifier_clearInterstage
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TQualifier_1clearInterstage
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TQualifier_clearInterpolation
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TQualifier_1clearInterpolation
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TQualifier_clearMemory
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TQualifier_1clearMemory
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TQualifier_isWriteOnly
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TQualifier_1isWriteOnly
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TQualifier_isReadOnly
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TQualifier_1isReadOnly
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TQualifier_isRestrict
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TQualifier_1isRestrict
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TQualifier_isCoherent
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TQualifier_1isCoherent
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TQualifier_isVolatile
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TQualifier_1isVolatile
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TQualifier_isSample
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TQualifier_1isSample
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TQualifier_isMemory
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TQualifier_1isMemory
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TQualifier_isMemoryQualifierImageAndSSBOOnly
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TQualifier_1isMemoryQualifierImageAndSSBOOnly
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TQualifier_bufferReferenceNeedsVulkanMemoryModel
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TQualifier_1bufferReferenceNeedsVulkanMemoryModel
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TQualifier_isInterpolation
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TQualifier_1isInterpolation
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TQualifier_isExplicitInterpolation
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TQualifier_1isExplicitInterpolation
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TQualifier_isAuxiliary
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TQualifier_1isAuxiliary
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TQualifier_isPatch
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TQualifier_1isPatch
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TQualifier_isNoContraction
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TQualifier_1isNoContraction
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TQualifier_setNoContraction
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TQualifier_1setNoContraction
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TQualifier_isPervertexNV
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TQualifier_1isPervertexNV
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TQualifier_isPipeInput
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TQualifier_1isPipeInput
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TQualifier_isPipeOutput
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TQualifier_1isPipeOutput
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TQualifier_isParamInput
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TQualifier_1isParamInput
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TQualifier_isParamOutput
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TQualifier_1isParamOutput
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TQualifier_isUniformOrBuffer
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TQualifier_1isUniformOrBuffer
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TQualifier_isIo
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TQualifier_1isIo
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TQualifier_isLinkable
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TQualifier_1isLinkable
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TQualifier_isPerPrimitive
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TQualifier_1isPerPrimitive
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TQualifier_isPerView
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TQualifier_1isPerView
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TQualifier_isTaskMemory
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TQualifier_1isTaskMemory
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TQualifier_isArrayedIo
 * Signature: ([BI)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TQualifier_1isArrayedIo
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TQualifier_clearLayout
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TQualifier_1clearLayout
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TQualifier_clearInterstageLayout
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TQualifier_1clearInterstageLayout
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TQualifier_clearStreamLayout
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TQualifier_1clearStreamLayout
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TQualifier_clearXfbLayout
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TQualifier_1clearXfbLayout
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TQualifier_hasNonXfbLayout
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TQualifier_1hasNonXfbLayout
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TQualifier_hasLayout
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TQualifier_1hasLayout
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TQualifier_hasUniformLayout
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TQualifier_1hasUniformLayout
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TQualifier_clearUniformLayout
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TQualifier_1clearUniformLayout
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TQualifier_hasMatrix
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TQualifier_1hasMatrix
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TQualifier_hasPacking
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TQualifier_1hasPacking
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TQualifier_hasAlign
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TQualifier_1hasAlign
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TQualifier_hasAnyLocation
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TQualifier_1hasAnyLocation
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TQualifier_hasLocation
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TQualifier_1hasLocation
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TQualifier_hasSet
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TQualifier_1hasSet
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TQualifier_hasBinding
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TQualifier_1hasBinding
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TQualifier_hasOffset
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TQualifier_1hasOffset
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TQualifier_isNonPerspective
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TQualifier_1isNonPerspective
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TQualifier_hasIndex
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TQualifier_1hasIndex
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TQualifier_getIndex
 * Signature: ([B)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_TQualifier_1getIndex
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TQualifier_hasComponent
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TQualifier_1hasComponent
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TQualifier_hasStream
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TQualifier_1hasStream
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TQualifier_hasFormat
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TQualifier_1hasFormat
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TQualifier_hasXfb
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TQualifier_1hasXfb
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TQualifier_hasXfbBuffer
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TQualifier_1hasXfbBuffer
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TQualifier_hasXfbStride
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TQualifier_1hasXfbStride
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TQualifier_hasXfbOffset
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TQualifier_1hasXfbOffset
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TQualifier_hasAttachment
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TQualifier_1hasAttachment
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TQualifier_getFormat
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TQualifier_1getFormat
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TQualifier_isPushConstant
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TQualifier_1isPushConstant
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TQualifier_isShaderRecord
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TQualifier_1isShaderRecord
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TQualifier_hasBufferReference
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TQualifier_1hasBufferReference
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TQualifier_hasBufferReferenceAlign
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TQualifier_1hasBufferReferenceAlign
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TQualifier_isNonUniform
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TQualifier_1isNonUniform
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TQualifier_hasSpecConstantId
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TQualifier_1hasSpecConstantId
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TQualifier_isSpecConstant
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TQualifier_1isSpecConstant
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TQualifier_isFrontEndConstant
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TQualifier_1isFrontEndConstant
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TQualifier_isConstant
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TQualifier_1isConstant
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TQualifier_makeSpecConstant
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TQualifier_1makeSpecConstant
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TQualifier_setSemanticName
 * Signature: ([BLjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TQualifier_1setSemanticName
  (JNIEnv *, jclass, jbyteArray, jstring);

/*
 * Class:     Java_Main
 * Method:    TQualifier_setStorage
 * Signature: ([BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TQualifier_1setStorage
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TQualifier_setBuiltIn
 * Signature: ([BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TQualifier_1setBuiltIn
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TQualifier_setDeclaredBuiltIn
 * Signature: ([BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TQualifier_1setDeclaredBuiltIn
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TQualifier_setPrecision
 * Signature: ([BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TQualifier_1setPrecision
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TQualifier_setInvariant
 * Signature: ([BZ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TQualifier_1setInvariant
  (JNIEnv *, jclass, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    TQualifier_setCentroid
 * Signature: ([BZ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TQualifier_1setCentroid
  (JNIEnv *, jclass, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    TQualifier_setSmooth
 * Signature: ([BZ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TQualifier_1setSmooth
  (JNIEnv *, jclass, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    TQualifier_setFlat
 * Signature: ([BZ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TQualifier_1setFlat
  (JNIEnv *, jclass, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    TQualifier_setSpecConstant
 * Signature: ([BZ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TQualifier_1setSpecConstant
  (JNIEnv *, jclass, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    TQualifier_setNonUniform
 * Signature: ([BZ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TQualifier_1setNonUniform
  (JNIEnv *, jclass, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    TQualifier_setExplicitOffset
 * Signature: ([BZ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TQualifier_1setExplicitOffset
  (JNIEnv *, jclass, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    TQualifier_setNopersp
 * Signature: ([BZ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TQualifier_1setNopersp
  (JNIEnv *, jclass, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    TQualifier_setExplicitInterp
 * Signature: ([BZ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TQualifier_1setExplicitInterp
  (JNIEnv *, jclass, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    TQualifier_setPervertexNV
 * Signature: ([BZ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TQualifier_1setPervertexNV
  (JNIEnv *, jclass, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    TQualifier_setPerPrimitiveNV
 * Signature: ([BZ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TQualifier_1setPerPrimitiveNV
  (JNIEnv *, jclass, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    TQualifier_setPerViewNV
 * Signature: ([BZ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TQualifier_1setPerViewNV
  (JNIEnv *, jclass, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    TQualifier_setPerTaskNV
 * Signature: ([BZ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TQualifier_1setPerTaskNV
  (JNIEnv *, jclass, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    TQualifier_setPatch
 * Signature: ([BZ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TQualifier_1setPatch
  (JNIEnv *, jclass, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    TQualifier_setSample
 * Signature: ([BZ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TQualifier_1setSample
  (JNIEnv *, jclass, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    TQualifier_setRestrict
 * Signature: ([BZ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TQualifier_1setRestrict
  (JNIEnv *, jclass, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    TQualifier_setReadonly
 * Signature: ([BZ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TQualifier_1setReadonly
  (JNIEnv *, jclass, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    TQualifier_setWriteonly
 * Signature: ([BZ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TQualifier_1setWriteonly
  (JNIEnv *, jclass, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    TQualifier_setCoherent
 * Signature: ([BZ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TQualifier_1setCoherent
  (JNIEnv *, jclass, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    TQualifier_setVolatil
 * Signature: ([BZ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TQualifier_1setVolatil
  (JNIEnv *, jclass, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    TQualifier_setDevicecoherent
 * Signature: ([BZ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TQualifier_1setDevicecoherent
  (JNIEnv *, jclass, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    TQualifier_setQueuefamilycoherent
 * Signature: ([BZ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TQualifier_1setQueuefamilycoherent
  (JNIEnv *, jclass, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    TQualifier_setWorkgroupcoherent
 * Signature: ([BZ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TQualifier_1setWorkgroupcoherent
  (JNIEnv *, jclass, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    TQualifier_setSubgroupcoherent
 * Signature: ([BZ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TQualifier_1setSubgroupcoherent
  (JNIEnv *, jclass, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    TQualifier_setShadercallcoherent
 * Signature: ([BZ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TQualifier_1setShadercallcoherent
  (JNIEnv *, jclass, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    TQualifier_setNonprivate
 * Signature: ([BZ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TQualifier_1setNonprivate
  (JNIEnv *, jclass, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    TQualifier_setLayoutMatrix
 * Signature: ([BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TQualifier_1setLayoutMatrix
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TQualifier_setLayoutPacking
 * Signature: ([BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TQualifier_1setLayoutPacking
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TQualifier_setLayoutOffset
 * Signature: ([BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TQualifier_1setLayoutOffset
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TQualifier_setLayoutAlign
 * Signature: ([BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TQualifier_1setLayoutAlign
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TQualifier_setLayoutLocation
 * Signature: ([BJ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TQualifier_1setLayoutLocation
  (JNIEnv *, jclass, jbyteArray, jlong);

/*
 * Class:     Java_Main
 * Method:    TQualifier_setLayoutComponent
 * Signature: ([BJ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TQualifier_1setLayoutComponent
  (JNIEnv *, jclass, jbyteArray, jlong);

/*
 * Class:     Java_Main
 * Method:    TQualifier_setLayoutSet
 * Signature: ([BJ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TQualifier_1setLayoutSet
  (JNIEnv *, jclass, jbyteArray, jlong);

/*
 * Class:     Java_Main
 * Method:    TQualifier_setLayoutBinding
 * Signature: ([BJ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TQualifier_1setLayoutBinding
  (JNIEnv *, jclass, jbyteArray, jlong);

/*
 * Class:     Java_Main
 * Method:    TQualifier_setLayoutIndex
 * Signature: ([BJ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TQualifier_1setLayoutIndex
  (JNIEnv *, jclass, jbyteArray, jlong);

/*
 * Class:     Java_Main
 * Method:    TQualifier_setLayoutStream
 * Signature: ([BJ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TQualifier_1setLayoutStream
  (JNIEnv *, jclass, jbyteArray, jlong);

/*
 * Class:     Java_Main
 * Method:    TQualifier_setLayoutXfbBuffer
 * Signature: ([BJ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TQualifier_1setLayoutXfbBuffer
  (JNIEnv *, jclass, jbyteArray, jlong);

/*
 * Class:     Java_Main
 * Method:    TQualifier_setLayoutXfbStride
 * Signature: ([BJ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TQualifier_1setLayoutXfbStride
  (JNIEnv *, jclass, jbyteArray, jlong);

/*
 * Class:     Java_Main
 * Method:    TQualifier_setLayoutXfbOffset
 * Signature: ([BJ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TQualifier_1setLayoutXfbOffset
  (JNIEnv *, jclass, jbyteArray, jlong);

/*
 * Class:     Java_Main
 * Method:    TQualifier_setLayoutAttachment
 * Signature: ([BJ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TQualifier_1setLayoutAttachment
  (JNIEnv *, jclass, jbyteArray, jlong);

/*
 * Class:     Java_Main
 * Method:    TQualifier_setLayoutSpecConstantId
 * Signature: ([BJ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TQualifier_1setLayoutSpecConstantId
  (JNIEnv *, jclass, jbyteArray, jlong);

/*
 * Class:     Java_Main
 * Method:    TQualifier_setLayoutBufferReferenceAlign
 * Signature: ([BJ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TQualifier_1setLayoutBufferReferenceAlign
  (JNIEnv *, jclass, jbyteArray, jlong);

/*
 * Class:     Java_Main
 * Method:    TQualifier_setLayoutFormat
 * Signature: ([BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TQualifier_1setLayoutFormat
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TQualifier_setLayoutPushConstant
 * Signature: ([BZ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TQualifier_1setLayoutPushConstant
  (JNIEnv *, jclass, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    TQualifier_setLayoutBufferReference
 * Signature: ([BZ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TQualifier_1setLayoutBufferReference
  (JNIEnv *, jclass, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    TQualifier_setLayoutPassthrough
 * Signature: ([BZ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TQualifier_1setLayoutPassthrough
  (JNIEnv *, jclass, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    TQualifier_setLayoutViewportRelative
 * Signature: ([BZ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TQualifier_1setLayoutViewportRelative
  (JNIEnv *, jclass, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    TQualifier_setLayoutSecondaryViewportRelativeOffset
 * Signature: ([BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TQualifier_1setLayoutSecondaryViewportRelativeOffset
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TQualifier_setLayoutShaderRecord
 * Signature: ([BZ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TQualifier_1setLayoutShaderRecord
  (JNIEnv *, jclass, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    TQualifier_getSemanticName
 * Signature: ([B)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_Java_Main_TQualifier_1getSemanticName
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TQualifier_getStorage
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TQualifier_1getStorage
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TQualifier_getBuiltIn
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TQualifier_1getBuiltIn
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TQualifier_getDeclaredBuiltIn
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TQualifier_1getDeclaredBuiltIn
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TQualifier_getPrecision
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TQualifier_1getPrecision
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TQualifier_getInvariant
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TQualifier_1getInvariant
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TQualifier_getCentroid
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TQualifier_1getCentroid
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TQualifier_getSmooth
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TQualifier_1getSmooth
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TQualifier_getFlat
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TQualifier_1getFlat
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TQualifier_getSpecConstant
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TQualifier_1getSpecConstant
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TQualifier_getNonUniform
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TQualifier_1getNonUniform
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TQualifier_getExplicitOffset
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TQualifier_1getExplicitOffset
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TQualifier_getNoContraction
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TQualifier_1getNoContraction
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TQualifier_getNopersp
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TQualifier_1getNopersp
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TQualifier_getExplicitInterp
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TQualifier_1getExplicitInterp
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TQualifier_getPervertexNV
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TQualifier_1getPervertexNV
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TQualifier_getPerPrimitiveNV
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TQualifier_1getPerPrimitiveNV
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TQualifier_getPerViewNV
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TQualifier_1getPerViewNV
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TQualifier_getPerTaskNV
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TQualifier_1getPerTaskNV
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TQualifier_getPatch
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TQualifier_1getPatch
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TQualifier_getSample
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TQualifier_1getSample
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TQualifier_getRestrict
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TQualifier_1getRestrict
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TQualifier_getReadonly
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TQualifier_1getReadonly
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TQualifier_getWriteonly
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TQualifier_1getWriteonly
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TQualifier_getCoherent
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TQualifier_1getCoherent
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TQualifier_getVolatil
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TQualifier_1getVolatil
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TQualifier_getDevicecoherent
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TQualifier_1getDevicecoherent
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TQualifier_getQueuefamilycoherent
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TQualifier_1getQueuefamilycoherent
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TQualifier_getWorkgroupcoherent
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TQualifier_1getWorkgroupcoherent
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TQualifier_getSubgroupcoherent
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TQualifier_1getSubgroupcoherent
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TQualifier_getShadercallcoherent
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TQualifier_1getShadercallcoherent
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TQualifier_getNonprivate
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TQualifier_1getNonprivate
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TQualifier_getLayoutMatrix
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TQualifier_1getLayoutMatrix
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TQualifier_getLayoutPacking
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TQualifier_1getLayoutPacking
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TQualifier_getLayoutOffset
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TQualifier_1getLayoutOffset
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TQualifier_getLayoutAlign
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TQualifier_1getLayoutAlign
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TQualifier_getLayoutLocation
 * Signature: ([B)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_TQualifier_1getLayoutLocation
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TQualifier_getLayoutComponent
 * Signature: ([B)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_TQualifier_1getLayoutComponent
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TQualifier_getLayoutSet
 * Signature: ([B)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_TQualifier_1getLayoutSet
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TQualifier_getLayoutBinding
 * Signature: ([B)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_TQualifier_1getLayoutBinding
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TQualifier_getLayoutIndex
 * Signature: ([B)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_TQualifier_1getLayoutIndex
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TQualifier_getLayoutStream
 * Signature: ([B)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_TQualifier_1getLayoutStream
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TQualifier_getLayoutXfbBuffer
 * Signature: ([B)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_TQualifier_1getLayoutXfbBuffer
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TQualifier_getLayoutXfbStride
 * Signature: ([B)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_TQualifier_1getLayoutXfbStride
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TQualifier_getLayoutXfbOffset
 * Signature: ([B)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_TQualifier_1getLayoutXfbOffset
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TQualifier_getLayoutAttachment
 * Signature: ([B)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_TQualifier_1getLayoutAttachment
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TQualifier_getLayoutSpecConstantId
 * Signature: ([B)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_TQualifier_1getLayoutSpecConstantId
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TQualifier_getLayoutBufferReferenceAlign
 * Signature: ([B)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_TQualifier_1getLayoutBufferReferenceAlign
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TQualifier_getLayoutFormat
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TQualifier_1getLayoutFormat
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TQualifier_getLayoutPushConstant
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TQualifier_1getLayoutPushConstant
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TQualifier_getLayoutBufferReference
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TQualifier_1getLayoutBufferReference
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TQualifier_getLayoutPassthrough
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TQualifier_1getLayoutPassthrough
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TQualifier_getLayoutViewportRelative
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TQualifier_1getLayoutViewportRelative
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TQualifier_getLayoutSecondaryViewportRelativeOffset
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TQualifier_1getLayoutSecondaryViewportRelativeOffset
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TQualifier_getLayoutShaderRecord
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TQualifier_1getLayoutShaderRecord
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TQualifier_getLayoutLocationEnd
 * Signature: ()J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_TQualifier_1getLayoutLocationEnd
  (JNIEnv *, jclass);

/*
 * Class:     Java_Main
 * Method:    TQualifier_getLayoutComponentEnd
 * Signature: ()J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_TQualifier_1getLayoutComponentEnd
  (JNIEnv *, jclass);

/*
 * Class:     Java_Main
 * Method:    TQualifier_getLayoutSetEnd
 * Signature: ()J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_TQualifier_1getLayoutSetEnd
  (JNIEnv *, jclass);

/*
 * Class:     Java_Main
 * Method:    TQualifier_getLayoutBindingEnd
 * Signature: ()J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_TQualifier_1getLayoutBindingEnd
  (JNIEnv *, jclass);

/*
 * Class:     Java_Main
 * Method:    TQualifier_getLayoutIndexEnd
 * Signature: ()J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_TQualifier_1getLayoutIndexEnd
  (JNIEnv *, jclass);

/*
 * Class:     Java_Main
 * Method:    TQualifier_getLayoutStreamEnd
 * Signature: ()J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_TQualifier_1getLayoutStreamEnd
  (JNIEnv *, jclass);

/*
 * Class:     Java_Main
 * Method:    TQualifier_getLayoutXfbBufferEnd
 * Signature: ()J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_TQualifier_1getLayoutXfbBufferEnd
  (JNIEnv *, jclass);

/*
 * Class:     Java_Main
 * Method:    TQualifier_getLayoutXfbStrideEnd
 * Signature: ()J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_TQualifier_1getLayoutXfbStrideEnd
  (JNIEnv *, jclass);

/*
 * Class:     Java_Main
 * Method:    TQualifier_getLayoutXfbOffsetEnd
 * Signature: ()J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_TQualifier_1getLayoutXfbOffsetEnd
  (JNIEnv *, jclass);

/*
 * Class:     Java_Main
 * Method:    TQualifier_getLayoutAttachmentEnd
 * Signature: ()J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_TQualifier_1getLayoutAttachmentEnd
  (JNIEnv *, jclass);

/*
 * Class:     Java_Main
 * Method:    TQualifier_getLayoutSpecConstantIdEnd
 * Signature: ()J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_TQualifier_1getLayoutSpecConstantIdEnd
  (JNIEnv *, jclass);

/*
 * Class:     Java_Main
 * Method:    TQualifier_getLayoutBufferReferenceAlignEnd
 * Signature: ()J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_TQualifier_1getLayoutBufferReferenceAlignEnd
  (JNIEnv *, jclass);

/*
 * Class:     Java_Main
 * Method:    TQualifier_getLayoutPackingString
 * Signature: (I)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_Java_Main_TQualifier_1getLayoutPackingString
  (JNIEnv *, jclass, jint);

/*
 * Class:     Java_Main
 * Method:    TQualifier_getLayoutMatrixString
 * Signature: (I)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_Java_Main_TQualifier_1getLayoutMatrixString
  (JNIEnv *, jclass, jint);

/*
 * Class:     Java_Main
 * Method:    TQualifier_getLayoutFormatString
 * Signature: (I)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_Java_Main_TQualifier_1getLayoutFormatString
  (JNIEnv *, jclass, jint);

/*
 * Class:     Java_Main
 * Method:    TQualifier_getLayoutDepthString
 * Signature: (I)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_Java_Main_TQualifier_1getLayoutDepthString
  (JNIEnv *, jclass, jint);

/*
 * Class:     Java_Main
 * Method:    TQualifier_getBlendEquationString
 * Signature: (I)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_Java_Main_TQualifier_1getBlendEquationString
  (JNIEnv *, jclass, jint);

/*
 * Class:     Java_Main
 * Method:    TQualifier_getGeometryString
 * Signature: (I)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_Java_Main_TQualifier_1getGeometryString
  (JNIEnv *, jclass, jint);

/*
 * Class:     Java_Main
 * Method:    TQualifier_getVertexSpacingString
 * Signature: (I)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_Java_Main_TQualifier_1getVertexSpacingString
  (JNIEnv *, jclass, jint);

/*
 * Class:     Java_Main
 * Method:    TQualifier_getVertexOrderString
 * Signature: (I)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_Java_Main_TQualifier_1getVertexOrderString
  (JNIEnv *, jclass, jint);

/*
 * Class:     Java_Main
 * Method:    TQualifier_mapGeometryToSize
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TQualifier_1mapGeometryToSize
  (JNIEnv *, jclass, jint);

/*
 * Class:     Java_Main
 * Method:    TQualifier_getInterlockOrderingString
 * Signature: (I)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_Java_Main_TQualifier_1getInterlockOrderingString
  (JNIEnv *, jclass, jint);

/*
 * Class:     Java_Main
 * Method:    TIoRange
 * Signature: ([B[BII)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TIoRange
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jint, jint);

/*
 * Class:     Java_Main
 * Method:    TIoRange_overlap
 * Signature: ([B[B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TIoRange_1overlap
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIoRange_setLocation
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TIoRange_1setLocation
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIoRange_setComponent
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TIoRange_1setComponent
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIoRange_setBasicType
 * Signature: ([BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TIoRange_1setBasicType
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TIoRange_setindex
 * Signature: ([BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TIoRange_1setindex
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TIoRange_getLocation
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TIoRange_1getLocation
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIoRange_getComponent
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TIoRange_1getComponent
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIoRange_getBasicType
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TIoRange_1getBasicType
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIoRange_getIndex
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TIoRange_1getIndex
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TRange
 * Signature: (II)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TRange
  (JNIEnv *, jclass, jint, jint);

/*
 * Class:     Java_Main
 * Method:    TRange_overlap
 * Signature: ([B[B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TRange_1overlap
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TRange_setStart
 * Signature: ([BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TRange_1setStart
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TRange_setLast
 * Signature: ([BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TRange_1setLast
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TRange_getStart
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TRange_1getStart
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TRange_getLast
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TRange_1getLast
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TAllocation
 * Signature: (J[B[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TAllocation
  (JNIEnv *, jclass, jlong, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TAllocation_check
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TAllocation_1check
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TAllocation_checkAllocList
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TAllocation_1checkAllocList
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TAllocation_allocationSize
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_TAllocation_1allocationSize
  (JNIEnv *, jclass, jlong);

/*
 * Class:     Java_Main
 * Method:    TAllocation_offsetAllocation
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TAllocation_1offsetAllocation
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TPoolAllocator
 * Signature: (II)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TPoolAllocator
  (JNIEnv *, jclass, jint, jint);

/*
 * Class:     Java_Main
 * Method:    TPoolAllocator_push
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TPoolAllocator_1push
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TPoolAllocator_pop
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TPoolAllocator_1pop
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TPoolAllocator_popAll
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TPoolAllocator_1popAll
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TPoolAllocator_allocate
 * Signature: ([BJ)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TPoolAllocator_1allocate
  (JNIEnv *, jclass, jbyteArray, jlong);

/*
 * Class:     Java_Main
 * Method:    TShHandleBase
 * Signature: ()[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TShHandleBase
  (JNIEnv *, jclass);

/*
 * Class:     Java_Main
 * Method:    TShHandleBase_getAsCompiler
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TShHandleBase_1getAsCompiler
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TShHandleBase_getAsLinker
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TShHandleBase_1getAsLinker
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TShHandleBase_getAsUniformMap
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TShHandleBase_1getAsUniformMap
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TShHandleBase_getPool
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TShHandleBase_1getPool
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TUniformMap_getAsUniformMap
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TUniformMap_1getAsUniformMap
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TUniformMap_getInfoSink
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TUniformMap_1getInfoSink
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TUniformMap_setInfoSink
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TUniformMap_1setInfoSink
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TCompiler_getLanguage
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TCompiler_1getLanguage
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TCompiler_getInfoSink
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TCompiler_1getInfoSink
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TCompiler_getAsCompiler
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TCompiler_1getAsCompiler
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TCompiler_linkable
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TCompiler_1linkable
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TCompiler_setInfoSink
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TCompiler_1setInfoSink
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TLinker_getAsLinker
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TLinker_1getAsLinker
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TLinker_link
 * Signature: ([B[B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TLinker_1link
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TLinker_setAppAttributeBindings
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TLinker_1setAppAttributeBindings
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TLinker_setFixedAttributeBindings
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TLinker_1setFixedAttributeBindings
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TLinker_setExcludedAttributes
 * Signature: ([B[II)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TLinker_1setExcludedAttributes
  (JNIEnv *, jclass, jbyteArray, jintArray, jint);

/*
 * Class:     Java_Main
 * Method:    TLinker_getUniformBindings
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TLinker_1getUniformBindings
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TLinker_getObjectCode
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TLinker_1getObjectCode
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TLinker_getInfoSink
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TLinker_1getInfoSink
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TLinker_setInfoSink
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TLinker_1setInfoSink
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TShaderQualifiers
 * Signature: (IZZIIIIZ[I[Z[IZZIZIIZZZIZ)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TShaderQualifiers__IZZIIIIZ_3I_3Z_3IZZIZIIZZZIZ
  (JNIEnv *, jclass, jint, jboolean, jboolean, jint, jint, jint, jint, jboolean, jintArray, jbooleanArray, jintArray, jboolean, jboolean, jint, jboolean, jint, jint, jboolean, jboolean, jboolean, jint, jboolean);

/*
 * Class:     Java_Main
 * Method:    TShaderQualifiers
 * Signature: ()[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TShaderQualifiers__
  (JNIEnv *, jclass);

/*
 * Class:     Java_Main
 * Method:    TShaderQualifiers_getDepth
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TShaderQualifiers_1getDepth
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TShaderQualifiers_init
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TShaderQualifiers_1init
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TShaderQualifiers_hasBlendEquation
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TShaderQualifiers_1hasBlendEquation
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TShaderQualifiers_merge
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TShaderQualifiers_1merge
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TShaderQualifiers_setGeometry
 * Signature: ([BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TShaderQualifiers_1setGeometry
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TShaderQualifiers_setPixelCenterInteger
 * Signature: ([BZ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TShaderQualifiers_1setPixelCenterInteger
  (JNIEnv *, jclass, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    TShaderQualifiers_setOriginUpperLeft
 * Signature: ([BZ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TShaderQualifiers_1setOriginUpperLeft
  (JNIEnv *, jclass, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    TShaderQualifiers_setInvocations
 * Signature: ([BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TShaderQualifiers_1setInvocations
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TShaderQualifiers_setVertices
 * Signature: ([BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TShaderQualifiers_1setVertices
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TShaderQualifiers_setSpacing
 * Signature: ([BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TShaderQualifiers_1setSpacing
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TShaderQualifiers_setOrder
 * Signature: ([BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TShaderQualifiers_1setOrder
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TShaderQualifiers_setPointMode
 * Signature: ([BZ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TShaderQualifiers_1setPointMode
  (JNIEnv *, jclass, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    TShaderQualifiers_setLocalSize
 * Signature: ([B[I)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TShaderQualifiers_1setLocalSize
  (JNIEnv *, jclass, jbyteArray, jintArray);

/*
 * Class:     Java_Main
 * Method:    TShaderQualifiers_setLocalSizeNotDefault
 * Signature: ([B[Z)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TShaderQualifiers_1setLocalSizeNotDefault
  (JNIEnv *, jclass, jbyteArray, jbooleanArray);

/*
 * Class:     Java_Main
 * Method:    TShaderQualifiers_setLocalSizeSpecId
 * Signature: ([B[I)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TShaderQualifiers_1setLocalSizeSpecId
  (JNIEnv *, jclass, jbyteArray, jintArray);

/*
 * Class:     Java_Main
 * Method:    TShaderQualifiers_setEarlyFragmentTests
 * Signature: ([BZ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TShaderQualifiers_1setEarlyFragmentTests
  (JNIEnv *, jclass, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    TShaderQualifiers_setPostDepthCoverage
 * Signature: ([BZ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TShaderQualifiers_1setPostDepthCoverage
  (JNIEnv *, jclass, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    TShaderQualifiers_setLayoutDepth
 * Signature: ([BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TShaderQualifiers_1setLayoutDepth
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TShaderQualifiers_setBlendEquation
 * Signature: ([BZ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TShaderQualifiers_1setBlendEquation
  (JNIEnv *, jclass, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    TShaderQualifiers_setNumViews
 * Signature: ([BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TShaderQualifiers_1setNumViews
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TShaderQualifiers_setInterlockOrdering
 * Signature: ([BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TShaderQualifiers_1setInterlockOrdering
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TShaderQualifiers_setLayoutOverrideCoverage
 * Signature: ([BZ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TShaderQualifiers_1setLayoutOverrideCoverage
  (JNIEnv *, jclass, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    TShaderQualifiers_setLayoutDerivativeGroupQuads
 * Signature: ([BZ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TShaderQualifiers_1setLayoutDerivativeGroupQuads
  (JNIEnv *, jclass, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    TShaderQualifiers_setLayoutDerivativeGroupLinear
 * Signature: ([BZ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TShaderQualifiers_1setLayoutDerivativeGroupLinear
  (JNIEnv *, jclass, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    TShaderQualifiers_setPrimitives
 * Signature: ([BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TShaderQualifiers_1setPrimitives
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TShaderQualifiers_setLayoutPrimitiveCulling
 * Signature: ([BZ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TShaderQualifiers_1setLayoutPrimitiveCulling
  (JNIEnv *, jclass, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    TShaderQualifiers_getGeometry
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TShaderQualifiers_1getGeometry
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TShaderQualifiers_getPixelCenterInteger
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TShaderQualifiers_1getPixelCenterInteger
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TShaderQualifiers_getOriginUpperLeft
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TShaderQualifiers_1getOriginUpperLeft
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TShaderQualifiers_getInvocations
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TShaderQualifiers_1getInvocations
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TShaderQualifiers_getVertices
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TShaderQualifiers_1getVertices
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TShaderQualifiers_getSpacing
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TShaderQualifiers_1getSpacing
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TShaderQualifiers_getOrder
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TShaderQualifiers_1getOrder
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TShaderQualifiers_getPointMode
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TShaderQualifiers_1getPointMode
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TShaderQualifiers_getLocalSize
 * Signature: ([B)[I
 */
JNIEXPORT jintArray JNICALL Java_Java_Main_TShaderQualifiers_1getLocalSize
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TShaderQualifiers_getLocalSizeNotDefault
 * Signature: ([B)[Z
 */
JNIEXPORT jbooleanArray JNICALL Java_Java_Main_TShaderQualifiers_1getLocalSizeNotDefault
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TShaderQualifiers_getLocalSizeSpecId
 * Signature: ([B)[I
 */
JNIEXPORT jintArray JNICALL Java_Java_Main_TShaderQualifiers_1getLocalSizeSpecId
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TShaderQualifiers_getEarlyFragmentTests
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TShaderQualifiers_1getEarlyFragmentTests
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TShaderQualifiers_getPostDepthCoverage
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TShaderQualifiers_1getPostDepthCoverage
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TShaderQualifiers_getLayoutDepth
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TShaderQualifiers_1getLayoutDepth
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TShaderQualifiers_getBlendEquation
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TShaderQualifiers_1getBlendEquation
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TShaderQualifiers_getNumViews
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TShaderQualifiers_1getNumViews
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TShaderQualifiers_getInterlockOrdering
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TShaderQualifiers_1getInterlockOrdering
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TShaderQualifiers_getLayoutOverrideCoverage
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TShaderQualifiers_1getLayoutOverrideCoverage
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TShaderQualifiers_getLayoutDerivativeGroupQuads
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TShaderQualifiers_1getLayoutDerivativeGroupQuads
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TShaderQualifiers_getLayoutDerivativeGroupLinear
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TShaderQualifiers_1getLayoutDerivativeGroupLinear
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TShaderQualifiers_getPrimitives
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TShaderQualifiers_1getPrimitives
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TShaderQualifiers_getLayoutPrimitiveCulling
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TShaderQualifiers_1getLayoutPrimitiveCulling
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TSmallArrayVector
 * Signature: ()[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TSmallArrayVector
  (JNIEnv *, jclass);

/*
 * Class:     Java_Main
 * Method:    TSmallArrayVector_size
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TSmallArrayVector_1size
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TSmallArrayVector_frontSize
 * Signature: ([B)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_TSmallArrayVector_1frontSize
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TSmallArrayVector_frontNode
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TSmallArrayVector_1frontNode
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TSmallArrayVector_changeFront
 * Signature: ([BJ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TSmallArrayVector_1changeFront
  (JNIEnv *, jclass, jbyteArray, jlong);

/*
 * Class:     Java_Main
 * Method:    TSmallArrayVector_push_back
 * Signature: ([BJ[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TSmallArrayVector_1push_1back___3BJ_3B
  (JNIEnv *, jclass, jbyteArray, jlong, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TSmallArrayVector_push_back
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TSmallArrayVector_1push_1back___3B_3B
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TSmallArrayVector_pop_front
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TSmallArrayVector_1pop_1front
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TSmallArrayVector_copyNonFront
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TSmallArrayVector_1copyNonFront
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TSmallArrayVector_getDimSize
 * Signature: ([BI)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_TSmallArrayVector_1getDimSize
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TSmallArrayVector_setDimSize
 * Signature: ([BIJ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TSmallArrayVector_1setDimSize
  (JNIEnv *, jclass, jbyteArray, jint, jlong);

/*
 * Class:     Java_Main
 * Method:    TSmallArrayVector_getDimNode
 * Signature: ([BI)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TSmallArrayVector_1getDimNode
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TSmallArrayVector_operatorAssign
 * Signature: ([B[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TSmallArrayVector_1operatorAssign
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TSmallArrayVector_operatorEqual
 * Signature: ([B[B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TSmallArrayVector_1operatorEqual
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TSmallArrayVector_operatorNotEqual
 * Signature: ([B[B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TSmallArrayVector_1operatorNotEqual
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TPpToken
 * Signature: ()[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TPpToken
  (JNIEnv *, jclass);

/*
 * Class:     Java_Main
 * Method:    TPpToken_clear
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TPpToken_1clear
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TPpToken_setLoc
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TPpToken_1setLoc
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TPpToken_setSpace
 * Signature: ([BZ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TPpToken_1setSpace
  (JNIEnv *, jclass, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    TPpToken_setIval
 * Signature: ([BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TPpToken_1setIval
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TPpToken_setDval
 * Signature: ([BD)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TPpToken_1setDval
  (JNIEnv *, jclass, jbyteArray, jdouble);

/*
 * Class:     Java_Main
 * Method:    TPpToken_setI64val
 * Signature: ([BLjava/math/BigInteger;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TPpToken_1setI64val
  (JNIEnv *, jclass, jbyteArray, jobject);

/*
 * Class:     Java_Main
 * Method:    TPpToken_setName
 * Signature: ([BLjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TPpToken_1setName
  (JNIEnv *, jclass, jbyteArray, jstring);

/*
 * Class:     Java_Main
 * Method:    TPpToken_getLoc
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TPpToken_1getLoc
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TPpToken_getSpace
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TPpToken_1getSpace
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TPpToken_getIval
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TPpToken_1getIval
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TPpToken_getDval
 * Signature: ([B)D
 */
JNIEXPORT jdouble JNICALL Java_Java_Main_TPpToken_1getDval
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TPpToken_getI64val
 * Signature: ([B)Ljava/math/BigInteger;
 */
JNIEXPORT jobject JNICALL Java_Java_Main_TPpToken_1getI64val
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TPpToken_getName
 * Signature: ([B)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_Java_Main_TPpToken_1getName
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TPpToken_operatorEqual
 * Signature: ([B[B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TPpToken_1operatorEqual
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TPpToken_operatorNotEqual
 * Signature: ([B[B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TPpToken_1operatorNotEqual
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TStringAtomMap
 * Signature: ()[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TStringAtomMap
  (JNIEnv *, jclass);

/*
 * Class:     Java_Main
 * Method:    TStringAtomMap_getAtom
 * Signature: ([BLjava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TStringAtomMap_1getAtom
  (JNIEnv *, jclass, jbyteArray, jstring);

/*
 * Class:     Java_Main
 * Method:    TStringAtomMap_getAddAtom
 * Signature: ([BLjava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TStringAtomMap_1getAddAtom
  (JNIEnv *, jclass, jbyteArray, jstring);

/*
 * Class:     Java_Main
 * Method:    TStringAtomMap_getString
 * Signature: ([BI)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_Java_Main_TStringAtomMap_1getString
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TPpContext
 * Signature: ([BLjava/lang/String;[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TPpContext
  (JNIEnv *, jclass, jbyteArray, jstring, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TPpContext_setPreamble
 * Signature: ([BLjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TPpContext_1setPreamble
  (JNIEnv *, jclass, jbyteArray, jstring);

/*
 * Class:     Java_Main
 * Method:    TPpContext_tokenize
 * Signature: ([B[B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TPpContext_1tokenize
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TPpContext_tokenPaste
 * Signature: ([BI[B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TPpContext_1tokenPaste
  (JNIEnv *, jclass, jbyteArray, jint, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TPpContext_setInput
 * Signature: ([B[BZ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TPpContext_1setInput
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    TPpContext_pushInput
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TPpContext_1pushInput
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TPpContext_popInput
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TPpContext_1popInput
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TPpContext_setMacroDefs
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TPpContext_1setMacroDefs
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TPpContext_getMacroDefs
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TPpContext_1getMacroDefs
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TPpContext_tInput_scan
 * Signature: ([B[B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TPpContext_1tInput_1scan
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TPpContext_tInput_getch
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TPpContext_1tInput_1getch
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TPpContext_tInput_ungetch
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TPpContext_1tInput_1ungetch
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TPpContext_tInput_peekPasting
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TPpContext_1tInput_1peekPasting
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TPpContext_tInput_peekContinuedPasting
 * Signature: ([BI)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TPpContext_1tInput_1peekContinuedPasting
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TPpContext_tInput_endOfReplacementList
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TPpContext_1tInput_1endOfReplacementList
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TPpContext_tInput_isMacroInput
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TPpContext_1tInput_1isMacroInput
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TPpContext_tInput_notifyActivated
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TPpContext_1tInput_1notifyActivated
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TPpContext_tInput_notifyDeleted
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TPpContext_1tInput_1notifyDeleted
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TPpContext_TokenStream
 * Signature: ()[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TPpContext_1TokenStream
  (JNIEnv *, jclass);

/*
 * Class:     Java_Main
 * Method:    TPpContext_TokenStream_putToken
 * Signature: ([BI[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TPpContext_1TokenStream_1putToken
  (JNIEnv *, jclass, jbyteArray, jint, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TPpContext_TokenStream_peekToken
 * Signature: ([BI)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TPpContext_1TokenStream_1peekToken
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TPpContext_TokenStream_peekContinuedPasting
 * Signature: ([BI)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TPpContext_1TokenStream_1peekContinuedPasting
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TPpContext_TokenStream_getToken
 * Signature: ([B[B[B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TPpContext_1TokenStream_1getToken
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TPpContext_TokenStream_atEnd
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TPpContext_1TokenStream_1atEnd
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TPpContext_TokenStream_peekTokenizedPasting
 * Signature: ([BZ)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TPpContext_1TokenStream_1peekTokenizedPasting
  (JNIEnv *, jclass, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    TPpContext_TokenStream_peekUntokenizedPasting
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TPpContext_1TokenStream_1peekUntokenizedPasting
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TPpContext_TokenStream_reset
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TPpContext_1TokenStream_1reset
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TPpContext_TokenStream_Token
 * Signature: (I[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TPpContext_1TokenStream_1Token
  (JNIEnv *, jclass, jint, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TPpContext_TokenStream_Token_get
 * Signature: ([B[B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TPpContext_1TokenStream_1Token_1get
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TPpContext_TokenStream_Token_isAtom
 * Signature: ([BI)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TPpContext_1TokenStream_1Token_1isAtom
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TPpContext_TokenStream_Token_getAtom
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TPpContext_1TokenStream_1Token_1getAtom
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TPpContext_TokenStream_Token_nonSpaced
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TPpContext_1TokenStream_1Token_1nonSpaced
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TPpContext_MacroSymbol
 * Signature: ()[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TPpContext_1MacroSymbol
  (JNIEnv *, jclass);

/*
 * Class:     Java_Main
 * Method:    TPpContext_MacroSymbol_setArgs
 * Signature: ([B[I)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TPpContext_1MacroSymbol_1setArgs
  (JNIEnv *, jclass, jbyteArray, jintArray);

/*
 * Class:     Java_Main
 * Method:    TPpContext_MacroSymbol_setBody
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TPpContext_1MacroSymbol_1setBody
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TPpContext_MacroSymbol_setFunctionLike
 * Signature: ([BJ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TPpContext_1MacroSymbol_1setFunctionLike
  (JNIEnv *, jclass, jbyteArray, jlong);

/*
 * Class:     Java_Main
 * Method:    TPpContext_MacroSymbol_setBusy
 * Signature: ([BJ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TPpContext_1MacroSymbol_1setBusy
  (JNIEnv *, jclass, jbyteArray, jlong);

/*
 * Class:     Java_Main
 * Method:    TPpContext_MacroSymbol_setUndef
 * Signature: ([BJ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TPpContext_1MacroSymbol_1setUndef
  (JNIEnv *, jclass, jbyteArray, jlong);

/*
 * Class:     Java_Main
 * Method:    TPpContext_MacroSymbol_getArgs
 * Signature: ([B)[I
 */
JNIEXPORT jintArray JNICALL Java_Java_Main_TPpContext_1MacroSymbol_1getArgs
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TPpContext_MacroSymbol_getBody
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TPpContext_1MacroSymbol_1getBody
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TPpContext_MacroSymbol_getFunctionLike
 * Signature: ([B)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_TPpContext_1MacroSymbol_1getFunctionLike
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TPpContext_MacroSymbol_getBusy
 * Signature: ([B)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_TPpContext_1MacroSymbol_1getBusy
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TPpContext_MacroSymbol_getUndef
 * Signature: ([B)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_TPpContext_1MacroSymbol_1getUndef
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TPpContext_lookupMacroDef
 * Signature: ([BI)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TPpContext_1lookupMacroDef
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TPpContext_addMacroDef
 * Signature: ([BI[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TPpContext_1addMacroDef
  (JNIEnv *, jclass, jbyteArray, jint, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TBuiltInParseables_initialize
 * Signature: ([BII[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TBuiltInParseables_1initialize___3BII_3B
  (JNIEnv *, jclass, jbyteArray, jint, jint, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TBuiltInParseables_initialize
 * Signature: ([B[BII[BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TBuiltInParseables_1initialize___3B_3BII_3BI
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jint, jint, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TBuiltInParseables_getCommonString
 * Signature: ([B)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_Java_Main_TBuiltInParseables_1getCommonString
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TBuiltInParseables_getStageString
 * Signature: ([BI)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_Java_Main_TBuiltInParseables_1getStageString
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TBuiltInParseables_identifyBuiltIns
 * Signature: ([BII[BI[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TBuiltInParseables_1identifyBuiltIns___3BII_3BI_3B
  (JNIEnv *, jclass, jbyteArray, jint, jint, jbyteArray, jint, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TBuiltInParseables_identifyBuiltIns
 * Signature: ([BII[BI[B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TBuiltInParseables_1identifyBuiltIns___3BII_3BI_3B_3B
  (JNIEnv *, jclass, jbyteArray, jint, jint, jbyteArray, jint, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TBuiltIns
 * Signature: ()[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TBuiltIns
  (JNIEnv *, jclass);

/*
 * Class:     Java_Main
 * Method:    TBuiltIns_initialize
 * Signature: ([BII[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TBuiltIns_1initialize___3BII_3B
  (JNIEnv *, jclass, jbyteArray, jint, jint, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TBuiltIns_initialize
 * Signature: ([B[BII[BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TBuiltIns_1initialize___3B_3BII_3BI
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jint, jint, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TBuiltIns_identifyBuiltIns
 * Signature: ([BII[BI[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TBuiltIns_1identifyBuiltIns___3BII_3BI_3B
  (JNIEnv *, jclass, jbyteArray, jint, jint, jbyteArray, jint, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TBuiltIns_identifyBuiltIns
 * Signature: ([BII[BI[B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TBuiltIns_1identifyBuiltIns___3BII_3BI_3B_3B
  (JNIEnv *, jclass, jbyteArray, jint, jint, jbyteArray, jint, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TLiveTraverser
 * Signature: ([BZZZZ)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TLiveTraverser
  (JNIEnv *, jclass, jbyteArray, jboolean, jboolean, jboolean, jboolean);

/*
 * Class:     Java_Main
 * Method:    TLiveTraverser_pushFunction
 * Signature: ([BLjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TLiveTraverser_1pushFunction
  (JNIEnv *, jclass, jbyteArray, jstring);

/*
 * Class:     Java_Main
 * Method:    TLiveTraverser_pushGlobalReference
 * Signature: ([BLjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TLiveTraverser_1pushGlobalReference
  (JNIEnv *, jclass, jbyteArray, jstring);

/*
 * Class:     Java_Main
 * Method:    TLiveTraverser_setDestinations
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TLiveTraverser_1setDestinations
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TLiveTraverser_getDestinations
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TLiveTraverser_1getDestinations
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TPragma
 * Signature: (ZZ)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TPragma
  (JNIEnv *, jclass, jboolean, jboolean);

/*
 * Class:     Java_Main
 * Method:    TPragma_setOptimize
 * Signature: ([BZ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TPragma_1setOptimize
  (JNIEnv *, jclass, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    TPragma_setDebug
 * Signature: ([BZ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TPragma_1setDebug
  (JNIEnv *, jclass, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    TPragma_setPragmaTable
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TPragma_1setPragmaTable
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TPragma_getOptimize
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TPragma_1getOptimize
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TPragma_getDebug
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TPragma_1getDebug
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TPragma_getPragmaTable
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TPragma_1getPragmaTable
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParseContextBase_error
 * Signature: ([B[BLjava/lang/String;Ljava/lang/String;Ljava/lang/String;[[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseContextBase_1error
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jstring, jstring, jstring, jobjectArray);

/*
 * Class:     Java_Main
 * Method:    TParseContextBase_warn
 * Signature: ([B[BLjava/lang/String;Ljava/lang/String;Ljava/lang/String;[[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseContextBase_1warn
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jstring, jstring, jstring, jobjectArray);

/*
 * Class:     Java_Main
 * Method:    TParseContextBase_ppError
 * Signature: ([B[BLjava/lang/String;Ljava/lang/String;Ljava/lang/String;[[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseContextBase_1ppError
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jstring, jstring, jstring, jobjectArray);

/*
 * Class:     Java_Main
 * Method:    TParseContextBase_ppWarn
 * Signature: ([B[BLjava/lang/String;Ljava/lang/String;Ljava/lang/String;[[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseContextBase_1ppWarn
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jstring, jstring, jstring, jobjectArray);

/*
 * Class:     Java_Main
 * Method:    TParseContextBase_setLimits
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseContextBase_1setLimits
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParseContextBase_checkIndex
 * Signature: ([B[B[BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseContextBase_1checkIndex
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TParseContextBase_getLanguage
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TParseContextBase_1getLanguage
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParseContextBase_setScanContext
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseContextBase_1setScanContext
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParseContextBase_getScanContext
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TParseContextBase_1getScanContext
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParseContextBase_setPpContext
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseContextBase_1setPpContext
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParseContextBase_getPpContext
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TParseContextBase_1getPpContext
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParseContextBase_setLineCallback
 * Signature: ([BLJava/Main/Void_IntIntBooleanIntString;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseContextBase_1setLineCallback
  (JNIEnv *, jclass, jbyteArray, jobject);

/*
 * Class:     Java_Main
 * Method:    TParseContextBase_setExtensionCallback
 * Signature: ([BLJava/Main/Void_IntStringString;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseContextBase_1setExtensionCallback
  (JNIEnv *, jclass, jbyteArray, jobject);

/*
 * Class:     Java_Main
 * Method:    TParseContextBase_setVersionCallback
 * Signature: ([BLJava/Main/Void_IntIntString;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseContextBase_1setVersionCallback
  (JNIEnv *, jclass, jbyteArray, jobject);

/*
 * Class:     Java_Main
 * Method:    TParseContextBase_setPragmaCallback
 * Signature: ([BLJava/Main/Void_IntStringarray;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseContextBase_1setPragmaCallback
  (JNIEnv *, jclass, jbyteArray, jobject);

/*
 * Class:     Java_Main
 * Method:    TParseContextBase_setErrorCallback
 * Signature: ([BLJava/Main/Void_IntString;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseContextBase_1setErrorCallback
  (JNIEnv *, jclass, jbyteArray, jobject);

/*
 * Class:     Java_Main
 * Method:    TParseContextBase_reservedPpErrorCheck
 * Signature: ([B[BLjava/lang/String;Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseContextBase_1reservedPpErrorCheck
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jstring, jstring);

/*
 * Class:     Java_Main
 * Method:    TParseContextBase_lineContinuationCheck
 * Signature: ([B[BZ)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TParseContextBase_1lineContinuationCheck
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    TParseContextBase_lineDirectiveShouldSetNextLine
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TParseContextBase_1lineDirectiveShouldSetNextLine
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParseContextBase_handlePragma
 * Signature: ([B[B[Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseContextBase_1handlePragma
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jobjectArray);

/*
 * Class:     Java_Main
 * Method:    TParseContextBase_parseShaderStrings
 * Signature: ([B[B[BZ)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TParseContextBase_1parseShaderStrings
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    TParseContextBase_notifyVersion
 * Signature: ([BIILjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseContextBase_1notifyVersion
  (JNIEnv *, jclass, jbyteArray, jint, jint, jstring);

/*
 * Class:     Java_Main
 * Method:    TParseContextBase_notifyErrorDirective
 * Signature: ([BILjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseContextBase_1notifyErrorDirective
  (JNIEnv *, jclass, jbyteArray, jint, jstring);

/*
 * Class:     Java_Main
 * Method:    TParseContextBase_notifyLineDirective
 * Signature: ([BIIZILjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseContextBase_1notifyLineDirective
  (JNIEnv *, jclass, jbyteArray, jint, jint, jboolean, jint, jstring);

/*
 * Class:     Java_Main
 * Method:    TParseContextBase_notifyExtensionDirective
 * Signature: ([BILjava/lang/String;Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseContextBase_1notifyExtensionDirective
  (JNIEnv *, jclass, jbyteArray, jint, jstring, jstring);

/*
 * Class:     Java_Main
 * Method:    TParseContextBase_growGlobalUniformBlock
 * Signature: ([B[B[BLjava/lang/String;[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseContextBase_1growGlobalUniformBlock
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray, jstring, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParseContextBase_renameShaderFunction
 * Signature: ([BLjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseContextBase_1renameShaderFunction
  (JNIEnv *, jclass, jbyteArray, jstring);

/*
 * Class:     Java_Main
 * Method:    TParseContextBase_lValueErrorCheck
 * Signature: ([B[BLjava/lang/String;[B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TParseContextBase_1lValueErrorCheck
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jstring, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParseContextBase_rValueErrorCheck
 * Signature: ([B[BLjava/lang/String;[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseContextBase_1rValueErrorCheck
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jstring, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParseContextBase_setSymbolTable
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseContextBase_1setSymbolTable
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParseContextBase_setStatementNestingLevel
 * Signature: ([BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseContextBase_1setStatementNestingLevel
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TParseContextBase_setLoopNestingLevel
 * Signature: ([BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseContextBase_1setLoopNestingLevel
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TParseContextBase_setStructNestingLevel
 * Signature: ([BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseContextBase_1setStructNestingLevel
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TParseContextBase_setControlFlowNestingLevel
 * Signature: ([BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseContextBase_1setControlFlowNestingLevel
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TParseContextBase_setFunctionReturnsValue
 * Signature: ([BZ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseContextBase_1setFunctionReturnsValue
  (JNIEnv *, jclass, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    TParseContextBase_setPostEntryPointReturn
 * Signature: ([BZ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseContextBase_1setPostEntryPointReturn
  (JNIEnv *, jclass, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    TParseContextBase_setSwitchSequenceStack
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseContextBase_1setSwitchSequenceStack
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParseContextBase_setSwitchLevel
 * Signature: ([B[I)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseContextBase_1setSwitchLevel
  (JNIEnv *, jclass, jbyteArray, jintArray);

/*
 * Class:     Java_Main
 * Method:    TParseContextBase_setContextPragma
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseContextBase_1setContextPragma
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParseContextBase_setBeginInvocationInterlockCount
 * Signature: ([BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseContextBase_1setBeginInvocationInterlockCount
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TParseContextBase_setEndInvocationInterlockCount
 * Signature: ([BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseContextBase_1setEndInvocationInterlockCount
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TParseContextBase_getScopeMangler
 * Signature: ([B)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_Java_Main_TParseContextBase_1getScopeMangler
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParseContextBase_getSymbolTable
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TParseContextBase_1getSymbolTable
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParseContextBase_getStatementNestingLevel
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TParseContextBase_1getStatementNestingLevel
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParseContextBase_getLoopNestingLevel
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TParseContextBase_1getLoopNestingLevel
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParseContextBase_getStructNestingLevel
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TParseContextBase_1getStructNestingLevel
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParseContextBase_getControlFlowNestingLevel
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TParseContextBase_1getControlFlowNestingLevel
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParseContextBase_getCurrentFunctionType
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TParseContextBase_1getCurrentFunctionType
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParseContextBase_getFunctionReturnsValue
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TParseContextBase_1getFunctionReturnsValue
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParseContextBase_getPostEntryPointReturn
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TParseContextBase_1getPostEntryPointReturn
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParseContextBase_getSwitchSequenceStack
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TParseContextBase_1getSwitchSequenceStack
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParseContextBase_getSwitchLevel
 * Signature: ([B)[I
 */
JNIEXPORT jintArray JNICALL Java_Java_Main_TParseContextBase_1getSwitchLevel
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParseContextBase_getContextPragma
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TParseContextBase_1getContextPragma
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParseContextBase_getBeginInvocationInterlockCount
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TParseContextBase_1getBeginInvocationInterlockCount
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParseContextBase_getEndInvocationInterlockCount
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TParseContextBase_1getEndInvocationInterlockCount
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TPrecisionManager
 * Signature: ()[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TPrecisionManager
  (JNIEnv *, jclass);

/*
 * Class:     Java_Main
 * Method:    TPrecisionManager_respectPrecisionQualifiers
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TPrecisionManager_1respectPrecisionQualifiers
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TPrecisionManager_respectingPrecisionQualifiers
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TPrecisionManager_1respectingPrecisionQualifiers
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TPrecisionManager_shouldWarnAboutDefaults
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TPrecisionManager_1shouldWarnAboutDefaults
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TPrecisionManager_defaultWarningGiven
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TPrecisionManager_1defaultWarningGiven
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TPrecisionManager_warnAboutDefaults
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TPrecisionManager_1warnAboutDefaults
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TPrecisionManager_explicitIntDefaultSeen
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TPrecisionManager_1explicitIntDefaultSeen
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TPrecisionManager_explicitFloatDefaultSeen
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TPrecisionManager_1explicitFloatDefaultSeen
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParseContext
 * Signature: ([B[BZII[BI[BZILjava/lang/String;)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TParseContext
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jboolean, jint, jint, jbyteArray, jint, jbyteArray, jboolean, jint, jstring);

/*
 * Class:     Java_Main
 * Method:    TParseContext_obeyPrecisionQualifiers
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TParseContext_1obeyPrecisionQualifiers
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParseContext_setPrecisionDefaults
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseContext_1setPrecisionDefaults
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParseContext_setLimits
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseContext_1setLimits
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParseContext_parseShaderStrings
 * Signature: ([B[B[BZ)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TParseContext_1parseShaderStrings
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    TParseContext_parserError
 * Signature: ([BLjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseContext_1parserError
  (JNIEnv *, jclass, jbyteArray, jstring);

/*
 * Class:     Java_Main
 * Method:    TParseContext_reservedErrorCheck
 * Signature: ([B[BLjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseContext_1reservedErrorCheck
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jstring);

/*
 * Class:     Java_Main
 * Method:    TParseContext_reservedPpErrorCheck
 * Signature: ([B[BLjava/lang/String;Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseContext_1reservedPpErrorCheck
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jstring, jstring);

/*
 * Class:     Java_Main
 * Method:    TParseContext_lineContinuationCheck
 * Signature: ([B[BZ)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TParseContext_1lineContinuationCheck
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    TParseContext_lineDirectiveShouldSetNextLine
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TParseContext_1lineDirectiveShouldSetNextLine
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParseContext_builtInName
 * Signature: ([BLjava/lang/String;)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TParseContext_1builtInName
  (JNIEnv *, jclass, jbyteArray, jstring);

/*
 * Class:     Java_Main
 * Method:    TParseContext_handlePragma
 * Signature: ([B[B[Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseContext_1handlePragma
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jobjectArray);

/*
 * Class:     Java_Main
 * Method:    TParseContext_handleVariable
 * Signature: ([B[B[BLjava/lang/String;)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TParseContext_1handleVariable
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray, jstring);

/*
 * Class:     Java_Main
 * Method:    TParseContext_handleBracketDereference
 * Signature: ([B[B[B[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TParseContext_1handleBracketDereference
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParseContext_handleIndexLimits
 * Signature: ([B[B[B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseContext_1handleIndexLimits
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParseContext_makeEditable
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseContext_1makeEditable
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParseContext_ioArrayCheck
 * Signature: ([B[B[BLjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseContext_1ioArrayCheck
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray, jstring);

/*
 * Class:     Java_Main
 * Method:    TParseContext_isIoResizeArray
 * Signature: ([B[B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TParseContext_1isIoResizeArray
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParseContext_fixIoArraySize
 * Signature: ([B[B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseContext_1fixIoArraySize
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParseContext_handleIoResizeArrayAccess
 * Signature: ([B[B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseContext_1handleIoResizeArrayAccess
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParseContext_checkIoArraysConsistency
 * Signature: ([B[BZ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseContext_1checkIoArraysConsistency
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    TParseContext_getIoArrayImplicitSize
 * Signature: ([B[BLjava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TParseContext_1getIoArrayImplicitSize
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jstring);

/*
 * Class:     Java_Main
 * Method:    TParseContext_checkIoArrayConsistency
 * Signature: ([B[BILjava/lang/String;[BLjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseContext_1checkIoArrayConsistency
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jint, jstring, jbyteArray, jstring);

/*
 * Class:     Java_Main
 * Method:    TParseContext_handleBinaryMath
 * Signature: ([B[BLjava/lang/String;I[B[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TParseContext_1handleBinaryMath
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jstring, jint, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParseContext_handleUnaryMath
 * Signature: ([B[BLjava/lang/String;I[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TParseContext_1handleUnaryMath
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jstring, jint, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParseContext_handleDotDereference
 * Signature: ([B[B[BLjava/lang/String;)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TParseContext_1handleDotDereference
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray, jstring);

/*
 * Class:     Java_Main
 * Method:    TParseContext_handleDotSwizzle
 * Signature: ([B[B[BLjava/lang/String;)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TParseContext_1handleDotSwizzle
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray, jstring);

/*
 * Class:     Java_Main
 * Method:    TParseContext_blockMemberExtensionCheck
 * Signature: ([B[B[BILjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseContext_1blockMemberExtensionCheck
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray, jint, jstring);

/*
 * Class:     Java_Main
 * Method:    TParseContext_handleFunctionDeclarator
 * Signature: ([B[B[BZ)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TParseContext_1handleFunctionDeclarator
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    TParseContext_handleFunctionDefinition
 * Signature: ([B[B[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TParseContext_1handleFunctionDefinition
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParseContext_handleFunctionCall
 * Signature: ([B[B[B[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TParseContext_1handleFunctionCall
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParseContext_handleBuiltInFunctionCall
 * Signature: ([B[B[B[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TParseContext_1handleBuiltInFunctionCall
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParseContext_computeBuiltinPrecisions
 * Signature: ([B[B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseContext_1computeBuiltinPrecisions
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParseContext_handleReturnValue
 * Signature: ([B[B[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TParseContext_1handleReturnValue
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParseContext_checkLocation
 * Signature: ([B[BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseContext_1checkLocation
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TParseContext_handleLengthMethod
 * Signature: ([B[B[B[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TParseContext_1handleLengthMethod
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParseContext_addInputArgumentConversions
 * Signature: ([B[B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseContext_1addInputArgumentConversions
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParseContext_addOutputArgumentConversions
 * Signature: ([B[B[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TParseContext_1addOutputArgumentConversions
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParseContext_builtInOpCheck
 * Signature: ([B[B[B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseContext_1builtInOpCheck
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParseContext_nonOpBuiltInCheck
 * Signature: ([B[B[B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseContext_1nonOpBuiltInCheck
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParseContext_userFunctionCallCheck
 * Signature: ([B[B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseContext_1userFunctionCallCheck
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParseContext_samplerConstructorLocationCheck
 * Signature: ([B[BLjava/lang/String;[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseContext_1samplerConstructorLocationCheck
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jstring, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParseContext_handleConstructorCall
 * Signature: ([B[B[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TParseContext_1handleConstructorCall
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParseContext_handlePrecisionQualifier
 * Signature: ([B[B[BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseContext_1handlePrecisionQualifier
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TParseContext_checkPrecisionQualifier
 * Signature: ([B[BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseContext_1checkPrecisionQualifier
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TParseContext_memorySemanticsCheck
 * Signature: ([B[B[B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseContext_1memorySemanticsCheck
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParseContext_assignError
 * Signature: ([B[BLjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseContext_1assignError
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jstring, jstring, jstring);

/*
 * Class:     Java_Main
 * Method:    TParseContext_unaryOpError
 * Signature: ([B[BLjava/lang/String;Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseContext_1unaryOpError
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jstring, jstring);

/*
 * Class:     Java_Main
 * Method:    TParseContext_binaryOpError
 * Signature: ([B[BLjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseContext_1binaryOpError
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jstring, jstring, jstring);

/*
 * Class:     Java_Main
 * Method:    TParseContext_variableCheck
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseContext_1variableCheck
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParseContext_lValueErrorCheck
 * Signature: ([B[BLjava/lang/String;[B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TParseContext_1lValueErrorCheck
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jstring, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParseContext_rValueErrorCheck
 * Signature: ([B[BLjava/lang/String;[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseContext_1rValueErrorCheck
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jstring, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParseContext_constantValueCheck
 * Signature: ([B[BLjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseContext_1constantValueCheck
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jstring);

/*
 * Class:     Java_Main
 * Method:    TParseContext_integerCheck
 * Signature: ([B[BLjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseContext_1integerCheck
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jstring);

/*
 * Class:     Java_Main
 * Method:    TParseContext_globalCheck
 * Signature: ([B[BLjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseContext_1globalCheck
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jstring);

/*
 * Class:     Java_Main
 * Method:    TParseContext_constructorError
 * Signature: ([B[B[B[BI[B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TParseContext_1constructorError
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray, jbyteArray, jint, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParseContext_constructorTextureSamplerError
 * Signature: ([B[B[B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TParseContext_1constructorTextureSamplerError
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParseContext_arraySizeCheck
 * Signature: ([B[B[B[BLjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseContext_1arraySizeCheck
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray, jbyteArray, jstring);

/*
 * Class:     Java_Main
 * Method:    TParseContext_arrayQualifierError
 * Signature: ([B[B[B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TParseContext_1arrayQualifierError
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParseContext_arrayError
 * Signature: ([B[B[B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TParseContext_1arrayError
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParseContext_arraySizeRequiredCheck
 * Signature: ([B[B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseContext_1arraySizeRequiredCheck
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParseContext_structArrayCheck
 * Signature: ([B[B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseContext_1structArrayCheck
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParseContext_arraySizesCheck
 * Signature: ([B[B[B[B[BZ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseContext_1arraySizesCheck
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray, jbyteArray, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    TParseContext_arrayOfArrayVersionCheck
 * Signature: ([B[B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseContext_1arrayOfArrayVersionCheck
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParseContext_voidErrorCheck
 * Signature: ([B[BLjava/lang/String;I)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TParseContext_1voidErrorCheck
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jstring, jint);

/*
 * Class:     Java_Main
 * Method:    TParseContext_boolCheck
 * Signature: ([B[B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseContext_1boolCheck
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParseContext_boolCheckType
 * Signature: ([B[B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseContext_1boolCheckType
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParseContext_samplerCheck
 * Signature: ([B[B[BLjava/lang/String;[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseContext_1samplerCheck
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray, jstring, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParseContext_atomicUintCheck
 * Signature: ([B[B[BLjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseContext_1atomicUintCheck
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray, jstring);

/*
 * Class:     Java_Main
 * Method:    TParseContext_accStructCheck
 * Signature: ([B[B[BLjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseContext_1accStructCheck
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray, jstring);

/*
 * Class:     Java_Main
 * Method:    TParseContext_transparentOpaqueCheck
 * Signature: ([B[B[BLjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseContext_1transparentOpaqueCheck
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray, jstring);

/*
 * Class:     Java_Main
 * Method:    TParseContext_memberQualifierCheck
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseContext_1memberQualifierCheck
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParseContext_globalQualifierFixCheck
 * Signature: ([B[B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseContext_1globalQualifierFixCheck
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParseContext_globalQualifierTypeCheck
 * Signature: ([B[B[B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseContext_1globalQualifierTypeCheck
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParseContext_structQualifierErrorCheck
 * Signature: ([B[B[B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TParseContext_1structQualifierErrorCheck
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParseContext_mergeQualifiers
 * Signature: ([B[B[B[BZ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseContext_1mergeQualifiers
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    TParseContext_setDefaultPrecision
 * Signature: ([B[B[BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseContext_1setDefaultPrecision___3B_3B_3BI
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TParseContext_computeSamplerTypeIndex
 * Signature: ([B[B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TParseContext_1computeSamplerTypeIndex
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParseContext_getDefaultPrecision
 * Signature: ([B[B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TParseContext_1getDefaultPrecision___3B_3B
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParseContext_precisionQualifierCheck
 * Signature: ([B[BI[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseContext_1precisionQualifierCheck
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jint, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParseContext_parameterTypeCheck
 * Signature: ([B[BI[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseContext_1parameterTypeCheck
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jint, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParseContext_containsFieldWithBasicType
 * Signature: ([B[BI)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TParseContext_1containsFieldWithBasicType
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TParseContext_redeclareBuiltinVariable
 * Signature: ([B[BLjava/lang/String;[B[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TParseContext_1redeclareBuiltinVariable
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jstring, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParseContext_redeclareBuiltinBlock
 * Signature: ([B[B[BLjava/lang/String;Ljava/lang/String;[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseContext_1redeclareBuiltinBlock
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray, jstring, jstring, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParseContext_paramCheckFixStorage
 * Signature: ([B[BI[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseContext_1paramCheckFixStorage
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jint, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParseContext_paramCheckFix
 * Signature: ([B[B[B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseContext_1paramCheckFix
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParseContext_nestedBlockCheck
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseContext_1nestedBlockCheck
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParseContext_nestedStructCheck
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseContext_1nestedStructCheck
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParseContext_arrayObjectCheck
 * Signature: ([B[B[BLjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseContext_1arrayObjectCheck
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray, jstring);

/*
 * Class:     Java_Main
 * Method:    TParseContext_opaqueCheck
 * Signature: ([B[B[BLjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseContext_1opaqueCheck
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray, jstring);

/*
 * Class:     Java_Main
 * Method:    TParseContext_referenceCheck
 * Signature: ([B[B[BLjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseContext_1referenceCheck
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray, jstring);

/*
 * Class:     Java_Main
 * Method:    TParseContext_storage16BitAssignmentCheck
 * Signature: ([B[B[BLjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseContext_1storage16BitAssignmentCheck
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray, jstring);

/*
 * Class:     Java_Main
 * Method:    TParseContext_specializationCheck
 * Signature: ([B[B[BLjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseContext_1specializationCheck
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray, jstring);

/*
 * Class:     Java_Main
 * Method:    TParseContext_structTypeCheck
 * Signature: ([B[B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseContext_1structTypeCheck
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParseContext_inductiveLoopCheck
 * Signature: ([B[B[B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseContext_1inductiveLoopCheck
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParseContext_arrayLimitCheck
 * Signature: ([B[BLjava/lang/String;I)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseContext_1arrayLimitCheck
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jstring, jint);

/*
 * Class:     Java_Main
 * Method:    TParseContext_limitCheck
 * Signature: ([B[BILjava/lang/String;Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseContext_1limitCheck
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jint, jstring, jstring);

/*
 * Class:     Java_Main
 * Method:    TParseContext_inductiveLoopBodyCheck
 * Signature: ([B[BI[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseContext_1inductiveLoopBodyCheck
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jint, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParseContext_constantIndexExpressionCheck
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseContext_1constantIndexExpressionCheck
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParseContext_setLayoutQualifier
 * Signature: ([B[B[BLjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseContext_1setLayoutQualifier___3B_3B_3BLjava_lang_String_2
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray, jstring);

/*
 * Class:     Java_Main
 * Method:    TParseContext_setLayoutQualifier
 * Signature: ([B[B[BLjava/lang/String;[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseContext_1setLayoutQualifier___3B_3B_3BLjava_lang_String_2_3B
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray, jstring, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParseContext_mergeObjectLayoutQualifiers
 * Signature: ([B[B[BZ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseContext_1mergeObjectLayoutQualifiers
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    TParseContext_layoutObjectCheck
 * Signature: ([B[B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseContext_1layoutObjectCheck
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParseContext_layoutMemberLocationArrayCheck
 * Signature: ([B[BZ[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseContext_1layoutMemberLocationArrayCheck
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jboolean, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParseContext_layoutTypeCheck
 * Signature: ([B[B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseContext_1layoutTypeCheck
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParseContext_layoutQualifierCheck
 * Signature: ([B[B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseContext_1layoutQualifierCheck
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParseContext_checkNoShaderLayouts
 * Signature: ([B[B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseContext_1checkNoShaderLayouts
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParseContext_fixOffset
 * Signature: ([B[B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseContext_1fixOffset
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParseContext_findFunction
 * Signature: ([B[B[BZ)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TParseContext_1findFunction
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    TParseContext_findFunctionExact
 * Signature: ([B[B[BZ)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TParseContext_1findFunctionExact
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    TParseContext_findFunction120
 * Signature: ([B[B[BZ)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TParseContext_1findFunction120
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    TParseContext_findFunction400
 * Signature: ([B[B[BZ)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TParseContext_1findFunction400
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    TParseContext_findFunctionExplicitTypes
 * Signature: ([B[B[BZ)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TParseContext_1findFunctionExplicitTypes
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    TParseContext_declareTypeDefaults
 * Signature: ([B[B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseContext_1declareTypeDefaults
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParseContext_declareVariable
 * Signature: ([B[BLjava/lang/String;[B[B[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TParseContext_1declareVariable
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jstring, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParseContext_addConstructor
 * Signature: ([B[B[B[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TParseContext_1addConstructor
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParseContext_constructAggregate
 * Signature: ([B[B[BI[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TParseContext_1constructAggregate
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray, jint, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParseContext_constructBuiltIn
 * Signature: ([B[BI[B[BZ)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TParseContext_1constructBuiltIn
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jint, jbyteArray, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    TParseContext_inheritMemoryQualifiers
 * Signature: ([B[B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseContext_1inheritMemoryQualifiers
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParseContext_declareBlock
 * Signature: ([B[B[BLjava/lang/String;[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseContext_1declareBlock
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray, jstring, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParseContext_blockStageIoCheck
 * Signature: ([B[B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseContext_1blockStageIoCheck
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParseContext_blockQualifierCheck
 * Signature: ([B[B[BZ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseContext_1blockQualifierCheck
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    TParseContext_fixBlockLocations
 * Signature: ([B[B[B[BZZ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseContext_1fixBlockLocations
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray, jbyteArray, jboolean, jboolean);

/*
 * Class:     Java_Main
 * Method:    TParseContext_fixXfbOffsets
 * Signature: ([B[B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseContext_1fixXfbOffsets
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParseContext_fixBlockUniformOffsets
 * Signature: ([B[B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseContext_1fixBlockUniformOffsets
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParseContext_fixBlockUniformLayoutMatrix
 * Signature: ([B[B[B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseContext_1fixBlockUniformLayoutMatrix
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParseContext_fixBlockUniformLayoutPacking
 * Signature: ([B[B[B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseContext_1fixBlockUniformLayoutPacking
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParseContext_addQualifierToExisting
 * Signature: ([B[B[BLjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseContext_1addQualifierToExisting___3B_3B_3BLjava_lang_String_2
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray, jstring);

/*
 * Class:     Java_Main
 * Method:    TParseContext_addQualifierToExisting
 * Signature: ([B[B[B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseContext_1addQualifierToExisting___3B_3B_3B_3B
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParseContext_invariantCheck
 * Signature: ([B[B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseContext_1invariantCheck
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParseContext_updateStandaloneQualifierDefaults
 * Signature: ([B[B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseContext_1updateStandaloneQualifierDefaults
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParseContext_wrapupSwitchSubsequence
 * Signature: ([B[B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseContext_1wrapupSwitchSubsequence
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParseContext_addSwitch
 * Signature: ([B[B[B[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TParseContext_1addSwitch
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParseContext_recordStructCopy
 * Signature: ([B[B[B[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TParseContext_1recordStructCopy
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParseContext_attributeFromName
 * Signature: ([BLjava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TParseContext_1attributeFromName
  (JNIEnv *, jclass, jbyteArray, jstring);

/*
 * Class:     Java_Main
 * Method:    TParseContext_makeAttributes
 * Signature: ([BLjava/lang/String;)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TParseContext_1makeAttributes___3BLjava_lang_String_2
  (JNIEnv *, jclass, jbyteArray, jstring);

/*
 * Class:     Java_Main
 * Method:    TParseContext_makeAttributes
 * Signature: ([BLjava/lang/String;[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TParseContext_1makeAttributes___3BLjava_lang_String_2_3B
  (JNIEnv *, jclass, jbyteArray, jstring, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParseContext_mergeAttributes
 * Signature: ([B[B[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TParseContext_1mergeAttributes
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParseContext_handleSelectionAttributes
 * Signature: ([B[B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseContext_1handleSelectionAttributes
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParseContext_handleSwitchAttributes
 * Signature: ([B[B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseContext_1handleSwitchAttributes
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParseContext_handleLoopAttributes
 * Signature: ([B[B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseContext_1handleLoopAttributes
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParseContext_checkAndResizeMeshViewDim
 * Signature: ([B[B[BZ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseContext_1checkAndResizeMeshViewDim
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    TParseContext_setInMain
 * Signature: ([BZ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseContext_1setInMain
  (JNIEnv *, jclass, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    TParseContext_setBlockName
 * Signature: ([BLjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseContext_1setBlockName
  (JNIEnv *, jclass, jbyteArray, jstring);

/*
 * Class:     Java_Main
 * Method:    TParseContext_setCurrentBlockQualifier
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseContext_1setCurrentBlockQualifier
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParseContext_setDefaultPrecision
 * Signature: ([B[I)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseContext_1setDefaultPrecision___3B_3I
  (JNIEnv *, jclass, jbyteArray, jintArray);

/*
 * Class:     Java_Main
 * Method:    TParseContext_setResources
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseContext_1setResources
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParseContext_setLimitsSetter
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseContext_1setLimitsSetter
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParseContext_getInMain
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TParseContext_1getInMain
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParseContext_getBlockName
 * Signature: ([B)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_Java_Main_TParseContext_1getBlockName
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParseContext_getCurrentBlockQualifier
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TParseContext_1getCurrentBlockQualifier
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParseContext_getDefaultPrecision
 * Signature: ([B)[I
 */
JNIEXPORT jintArray JNICALL Java_Java_Main_TParseContext_1getDefaultPrecision___3B
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParseContext_getResources
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TParseContext_1getResources
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParseContext_getLimits
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TParseContext_1getLimits
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TInputScanner
 * Signature: (I[Ljava/lang/String;[J[Ljava/lang/String;IIZ)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TInputScanner
  (JNIEnv *, jclass, jint, jobjectArray, jlongArray, jobjectArray, jint, jint, jboolean);

/*
 * Class:     Java_Main
 * Method:    TInputScanner_get
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TInputScanner_1get
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TInputScanner_peek
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TInputScanner_1peek
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TInputScanner_unget
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TInputScanner_1unget
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TInputScanner_setLine
 * Signature: ([BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TInputScanner_1setLine
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TInputScanner_setFile
 * Signature: ([BLjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TInputScanner_1setFile___3BLjava_lang_String_2
  (JNIEnv *, jclass, jbyteArray, jstring);

/*
 * Class:     Java_Main
 * Method:    TInputScanner_setFile
 * Signature: ([BLjava/lang/String;I)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TInputScanner_1setFile___3BLjava_lang_String_2I
  (JNIEnv *, jclass, jbyteArray, jstring, jint);

/*
 * Class:     Java_Main
 * Method:    TInputScanner_setString
 * Signature: ([BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TInputScanner_1setString
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TInputScanner_setColumn
 * Signature: ([BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TInputScanner_1setColumn
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TInputScanner_setEndOfInput
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TInputScanner_1setEndOfInput
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TInputScanner_atEndOfInput
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TInputScanner_1atEndOfInput
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TInputScanner_getSourceLoc
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TInputScanner_1getSourceLoc
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TInputScanner_getLastValidSourceIndex
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TInputScanner_1getLastValidSourceIndex
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TInputScanner_consumeWhiteSpace
 * Signature: ([BZ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TInputScanner_1consumeWhiteSpace
  (JNIEnv *, jclass, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    TInputScanner_consumeComment
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TInputScanner_1consumeComment
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TInputScanner_consumeWhitespaceComment
 * Signature: ([BZ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TInputScanner_1consumeWhitespaceComment
  (JNIEnv *, jclass, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    TInputScanner_scanVersion
 * Signature: ([BIIZ)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TInputScanner_1scanVersion
  (JNIEnv *, jclass, jbyteArray, jint, jint, jboolean);

/*
 * Class:     Java_Main
 * Method:    TScanContext
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TScanContext
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TScanContext_tokenize
 * Signature: ([B[B[B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TScanContext_1tokenize
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TScanContext_fillInKeywordMap
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_Java_Main_TScanContext_1fillInKeywordMap
  (JNIEnv *, jclass);

/*
 * Class:     Java_Main
 * Method:    TScanContext_deleteKeywordMap
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_Java_Main_TScanContext_1deleteKeywordMap
  (JNIEnv *, jclass);

/*
 * Class:     Java_Main
 * Method:    TSymbol_clone
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TSymbol_1clone
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TSymbol_getName
 * Signature: ([B)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_Java_Main_TSymbol_1getName
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TSymbol_changeName
 * Signature: ([BLjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TSymbol_1changeName
  (JNIEnv *, jclass, jbyteArray, jstring);

/*
 * Class:     Java_Main
 * Method:    TSymbol_addPrefix
 * Signature: ([BLjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TSymbol_1addPrefix
  (JNIEnv *, jclass, jbyteArray, jstring);

/*
 * Class:     Java_Main
 * Method:    TSymbol_getMangledName
 * Signature: ([B)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_Java_Main_TSymbol_1getMangledName
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TSymbol_getAsFunction
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TSymbol_1getAsFunction
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TSymbol_getAsVariable
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TSymbol_1getAsVariable
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TSymbol_getAsAnonMember
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TSymbol_1getAsAnonMember
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TSymbol_getType
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TSymbol_1getType
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TSymbol_getWritableType
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TSymbol_1getWritableType
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TSymbol_setUniqueId
 * Signature: ([BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TSymbol_1setUniqueId
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TSymbol_getUniqueId
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TSymbol_1getUniqueId
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TSymbol_setExtensions
 * Signature: ([B[Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TSymbol_1setExtensions
  (JNIEnv *, jclass, jbyteArray, jobjectArray);

/*
 * Class:     Java_Main
 * Method:    TSymbol_getNumExtensions
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TSymbol_1getNumExtensions
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TSymbol_getExtensions
 * Signature: ([B)[Ljava/lang/String;
 */
JNIEXPORT jobjectArray JNICALL Java_Java_Main_TSymbol_1getExtensions
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TSymbol_dump
 * Signature: ([B[BZ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TSymbol_1dump
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    TSymbol_dumpExtensions
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TSymbol_1dumpExtensions
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TSymbol_isReadOnly
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TSymbol_1isReadOnly
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TSymbol_makeReadOnly
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TSymbol_1makeReadOnly
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TVariable
 * Signature: (Ljava/lang/String;[BZ)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TVariable
  (JNIEnv *, jclass, jstring, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    TVariable_clone
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TVariable_1clone
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TVariable_getAsVariable
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TVariable_1getAsVariable
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TVariable_getType
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TVariable_1getType
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TVariable_getWritableType
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TVariable_1getWritableType
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TVariable_isUserType
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TVariable_1isUserType
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TVariable_getConstArray
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TVariable_1getConstArray
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TVariable_getWritableConstArray
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TVariable_1getWritableConstArray
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TVariable_setConstArray
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TVariable_1setConstArray
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TVariable_setConstSubtree
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TVariable_1setConstSubtree
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TVariable_getConstSubtree
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TVariable_1getConstSubtree
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TVariable_setAnonId
 * Signature: ([BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TVariable_1setAnonId
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TVariable_getAnonId
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TVariable_1getAnonId
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TVariable_setMemberExtensions
 * Signature: ([BI[Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TVariable_1setMemberExtensions
  (JNIEnv *, jclass, jbyteArray, jint, jobjectArray);

/*
 * Class:     Java_Main
 * Method:    TVariable_hasMemberExtensions
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TVariable_1hasMemberExtensions
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TVariable_getNumMemberExtensions
 * Signature: ([BI)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TVariable_1getNumMemberExtensions
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TVariable_getMemberExtensions
 * Signature: ([BI)[Ljava/lang/String;
 */
JNIEXPORT jobjectArray JNICALL Java_Java_Main_TVariable_1getMemberExtensions
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TVariable_dump
 * Signature: ([B[BZ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TVariable_1dump
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    TParameter
 * Signature: ()[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TParameter__
  (JNIEnv *, jclass);

/*
 * Class:     Java_Main
 * Method:    TParameter
 * Signature: (Ljava/lang/String;[B[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TParameter__Ljava_lang_String_2_3B_3B
  (JNIEnv *, jclass, jstring, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParameter_copyParam
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParameter_1copyParam
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParameter_getDeclaredBuiltIn
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TParameter_1getDeclaredBuiltIn
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParameter_setName
 * Signature: ([BLjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParameter_1setName
  (JNIEnv *, jclass, jbyteArray, jstring);

/*
 * Class:     Java_Main
 * Method:    TParameter_setType
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParameter_1setType
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParameter_setDefaultValue
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParameter_1setDefaultValue
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParameter_getName
 * Signature: ([B)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_Java_Main_TParameter_1getName
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParameter_getType
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TParameter_1getType
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParameter_getDefaultValue
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TParameter_1getDefaultValue
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TFunction
 * Signature: (I)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TFunction__I
  (JNIEnv *, jclass, jint);

/*
 * Class:     Java_Main
 * Method:    TFunction
 * Signature: (Ljava/lang/String;[BI)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TFunction__Ljava_lang_String_2_3BI
  (JNIEnv *, jclass, jstring, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TFunction_clone
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TFunction_1clone
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TFunction_getAsFunction
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TFunction_1getAsFunction
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TFunction_addParameter
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TFunction_1addParameter
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TFunction_addThisParameter
 * Signature: ([B[BLjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TFunction_1addThisParameter
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jstring);

/*
 * Class:     Java_Main
 * Method:    TFunction_addPrefix
 * Signature: ([BLjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TFunction_1addPrefix
  (JNIEnv *, jclass, jbyteArray, jstring);

/*
 * Class:     Java_Main
 * Method:    TFunction_removePrefix
 * Signature: ([BLjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TFunction_1removePrefix
  (JNIEnv *, jclass, jbyteArray, jstring);

/*
 * Class:     Java_Main
 * Method:    TFunction_getMangledName
 * Signature: ([B)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_Java_Main_TFunction_1getMangledName
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TFunction_getType
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TFunction_1getType
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TFunction_getDeclaredBuiltInType
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TFunction_1getDeclaredBuiltInType
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TFunction_getWritableType
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TFunction_1getWritableType
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TFunction_relateToOperator
 * Signature: ([BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TFunction_1relateToOperator
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TFunction_getBuiltInOp
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TFunction_1getBuiltInOp
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TFunction_setDefined
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TFunction_1setDefined
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TFunction_isDefined
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TFunction_1isDefined
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TFunction_setPrototyped
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TFunction_1setPrototyped
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TFunction_isPrototyped
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TFunction_1isPrototyped
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TFunction_setImplicitThis
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TFunction_1setImplicitThis
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TFunction_hasImplicitThis
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TFunction_1hasImplicitThis
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TFunction_setIllegalImplicitThis
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TFunction_1setIllegalImplicitThis
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TFunction_hasIllegalImplicitThis
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TFunction_1hasIllegalImplicitThis
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TFunction_getParamCount
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TFunction_1getParamCount
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TFunction_getDefaultParamCount
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TFunction_1getDefaultParamCount
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TFunction_getFixedParamCount
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TFunction_1getFixedParamCount
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TFunction_dump
 * Signature: ([B[BZ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TFunction_1dump
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    TFunction_operatorAt
 * Signature: ([BI)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TFunction_1operatorAt
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TAnonMember
 * Signature: (Ljava/lang/String;J[BI)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TAnonMember
  (JNIEnv *, jclass, jstring, jlong, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TAnonMember_clone
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TAnonMember_1clone
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TAnonMember_getAsAnonMember
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TAnonMember_1getAsAnonMember
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TAnonMember_getAnonContainer
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TAnonMember_1getAnonContainer
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TAnonMember_getMemberNumber
 * Signature: ([B)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_TAnonMember_1getMemberNumber
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TAnonMember_getType
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TAnonMember_1getType
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TAnonMember_getWritableType
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TAnonMember_1getWritableType
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TAnonMember_setExtensions
 * Signature: ([B[Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TAnonMember_1setExtensions
  (JNIEnv *, jclass, jbyteArray, jobjectArray);

/*
 * Class:     Java_Main
 * Method:    TAnonMember_getNumExtensions
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TAnonMember_1getNumExtensions
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TAnonMember_getExtensions
 * Signature: ([B)[Ljava/lang/String;
 */
JNIEXPORT jobjectArray JNICALL Java_Java_Main_TAnonMember_1getExtensions
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TAnonMember_getAnonId
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TAnonMember_1getAnonId
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TAnonMember_dump
 * Signature: ([B[BZ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TAnonMember_1dump
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    TSymbolTableLevel
 * Signature: ()[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TSymbolTableLevel
  (JNIEnv *, jclass);

/*
 * Class:     Java_Main
 * Method:    TSymbolTableLevel_insert
 * Signature: ([B[BZ)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TSymbolTableLevel_1insert
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    TSymbolTableLevel_amend
 * Signature: ([B[BI)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TSymbolTableLevel_1amend
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TSymbolTableLevel_insertAnonymousMembers
 * Signature: ([B[BI)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TSymbolTableLevel_1insertAnonymousMembers
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TSymbolTableLevel_find
 * Signature: ([BLjava/lang/String;)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TSymbolTableLevel_1find
  (JNIEnv *, jclass, jbyteArray, jstring);

/*
 * Class:     Java_Main
 * Method:    TSymbolTableLevel_findFunctionNameList
 * Signature: ([BLjava/lang/String;[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TSymbolTableLevel_1findFunctionNameList
  (JNIEnv *, jclass, jbyteArray, jstring, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TSymbolTableLevel_hasFunctionName
 * Signature: ([BLjava/lang/String;)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TSymbolTableLevel_1hasFunctionName
  (JNIEnv *, jclass, jbyteArray, jstring);

/*
 * Class:     Java_Main
 * Method:    TSymbolTableLevel_findFunctionVariableName
 * Signature: ([BLjava/lang/String;Z)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TSymbolTableLevel_1findFunctionVariableName
  (JNIEnv *, jclass, jbyteArray, jstring, jboolean);

/*
 * Class:     Java_Main
 * Method:    TSymbolTableLevel_setPreviousDefaultPrecisions
 * Signature: ([BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TSymbolTableLevel_1setPreviousDefaultPrecisions
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TSymbolTableLevel_getPreviousDefaultPrecisions
 * Signature: ([BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TSymbolTableLevel_1getPreviousDefaultPrecisions
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TSymbolTableLevel_relateToOperator
 * Signature: ([BLjava/lang/String;I)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TSymbolTableLevel_1relateToOperator
  (JNIEnv *, jclass, jbyteArray, jstring, jint);

/*
 * Class:     Java_Main
 * Method:    TSymbolTableLevel_setFunctionExtensions
 * Signature: ([BLjava/lang/String;[Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TSymbolTableLevel_1setFunctionExtensions
  (JNIEnv *, jclass, jbyteArray, jstring, jobjectArray);

/*
 * Class:     Java_Main
 * Method:    TSymbolTableLevel_dump
 * Signature: ([B[BZ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TSymbolTableLevel_1dump
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    TSymbolTableLevel_clone
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TSymbolTableLevel_1clone
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TSymbolTableLevel_readOnly
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TSymbolTableLevel_1readOnly
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TSymbolTableLevel_setThisLevel
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TSymbolTableLevel_1setThisLevel
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TSymbolTableLevel_isThisLevel
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TSymbolTableLevel_1isThisLevel
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TAttributeArgs
 * Signature: (I[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TAttributeArgs__I_3B
  (JNIEnv *, jclass, jint, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TAttributeArgs
 * Signature: ()[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TAttributeArgs__
  (JNIEnv *, jclass);

/*
 * Class:     Java_Main
 * Method:    TAttributeArgs_getInt
 * Signature: ([BII)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TAttributeArgs_1getInt
  (JNIEnv *, jclass, jbyteArray, jint, jint);

/*
 * Class:     Java_Main
 * Method:    TAttributeArgs_getString
 * Signature: ([BLjava/lang/String;IZ)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TAttributeArgs_1getString
  (JNIEnv *, jclass, jbyteArray, jstring, jint, jboolean);

/*
 * Class:     Java_Main
 * Method:    TAttributeArgs_size
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TAttributeArgs_1size
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TAttributeArgs_setName
 * Signature: ([BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TAttributeArgs_1setName
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TAttributeArgs_getName
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TAttributeArgs_1getName
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TAttributeArgs_getArgs
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TAttributeArgs_1getArgs
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TDefaultIoResolverBase_validateBinding
 * Signature: ([BI[B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TDefaultIoResolverBase_1validateBinding
  (JNIEnv *, jclass, jbyteArray, jint, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TDefaultIoResolverBase_resolveBinding
 * Signature: ([BI[B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TDefaultIoResolverBase_1resolveBinding
  (JNIEnv *, jclass, jbyteArray, jint, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TDefaultIoResolverBase_notifyBinding
 * Signature: ([BI[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TDefaultIoResolverBase_1notifyBinding
  (JNIEnv *, jclass, jbyteArray, jint, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TDefaultIoResolverBase_notifyInOut
 * Signature: ([BI[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TDefaultIoResolverBase_1notifyInOut
  (JNIEnv *, jclass, jbyteArray, jint, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TDefaultIoResolverBase_beginNotifications
 * Signature: ([BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TDefaultIoResolverBase_1beginNotifications
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TDefaultIoResolverBase_endNotifications
 * Signature: ([BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TDefaultIoResolverBase_1endNotifications
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TDefaultIoResolverBase_beginResolve
 * Signature: ([BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TDefaultIoResolverBase_1beginResolve
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TDefaultIoResolverBase_endResolve
 * Signature: ([BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TDefaultIoResolverBase_1endResolve
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TDefaultIoResolverBase_beginCollect
 * Signature: ([BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TDefaultIoResolverBase_1beginCollect
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TDefaultIoResolverBase_endCollect
 * Signature: ([BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TDefaultIoResolverBase_1endCollect
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TDefaultIoResolverBase_reserverResourceSlot
 * Signature: ([B[B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TDefaultIoResolverBase_1reserverResourceSlot
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TDefaultIoResolverBase_reserverStorageSlot
 * Signature: ([B[B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TDefaultIoResolverBase_1reserverStorageSlot
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TDefaultIoResolverBase_getBaseBinding
 * Signature: ([BIJ)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TDefaultIoResolverBase_1getBaseBinding
  (JNIEnv *, jclass, jbyteArray, jint, jlong);

/*
 * Class:     Java_Main
 * Method:    TDefaultIoResolverBase_getResourceSetBinding
 * Signature: ([B)[Ljava/lang/String;
 */
JNIEXPORT jobjectArray JNICALL Java_Java_Main_TDefaultIoResolverBase_1getResourceSetBinding
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TDefaultIoResolverBase_getResourceType
 * Signature: ([B[B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TDefaultIoResolverBase_1getResourceType
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TDefaultIoResolverBase_doAutoBindingMapping
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TDefaultIoResolverBase_1doAutoBindingMapping
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TDefaultIoResolverBase_doAutoLocationMapping
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TDefaultIoResolverBase_1doAutoLocationMapping
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TDefaultIoResolverBase_findSlot
 * Signature: ([BII)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TDefaultIoResolverBase_1findSlot
  (JNIEnv *, jclass, jbyteArray, jint, jint);

/*
 * Class:     Java_Main
 * Method:    TDefaultIoResolverBase_checkEmpty
 * Signature: ([BII)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TDefaultIoResolverBase_1checkEmpty
  (JNIEnv *, jclass, jbyteArray, jint, jint);

/*
 * Class:     Java_Main
 * Method:    TDefaultIoResolverBase_validateInOut
 * Signature: ([BI[B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TDefaultIoResolverBase_1validateInOut
  (JNIEnv *, jclass, jbyteArray, jint, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TDefaultIoResolverBase_reserveSlot
 * Signature: ([BIII)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TDefaultIoResolverBase_1reserveSlot
  (JNIEnv *, jclass, jbyteArray, jint, jint, jint);

/*
 * Class:     Java_Main
 * Method:    TDefaultIoResolverBase_getFreeSlot
 * Signature: ([BIII)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TDefaultIoResolverBase_1getFreeSlot
  (JNIEnv *, jclass, jbyteArray, jint, jint, jint);

/*
 * Class:     Java_Main
 * Method:    TDefaultIoResolverBase_resolveSet
 * Signature: ([BI[B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TDefaultIoResolverBase_1resolveSet
  (JNIEnv *, jclass, jbyteArray, jint, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TDefaultIoResolverBase_resolveUniformLocation
 * Signature: ([BI[B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TDefaultIoResolverBase_1resolveUniformLocation
  (JNIEnv *, jclass, jbyteArray, jint, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TDefaultIoResolverBase_resolveInOutLocation
 * Signature: ([BI[B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TDefaultIoResolverBase_1resolveInOutLocation
  (JNIEnv *, jclass, jbyteArray, jint, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TDefaultIoResolverBase_resolveInOutComponent
 * Signature: ([BI[B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TDefaultIoResolverBase_1resolveInOutComponent
  (JNIEnv *, jclass, jbyteArray, jint, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TDefaultIoResolverBase_resolveInOutIndex
 * Signature: ([BI[B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TDefaultIoResolverBase_1resolveInOutIndex
  (JNIEnv *, jclass, jbyteArray, jint, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TDefaultIoResolverBase_addStage
 * Signature: ([BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TDefaultIoResolverBase_1addStage
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TDefaultIoResolverBase_computeTypeLocationSize
 * Signature: ([B[BI)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_TDefaultIoResolverBase_1computeTypeLocationSize
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TDefaultIoResolverBase_setSlots
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TDefaultIoResolverBase_1setSlots
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TDefaultIoResolverBase_setHasError
 * Signature: ([BZ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TDefaultIoResolverBase_1setHasError
  (JNIEnv *, jclass, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    TDefaultIoResolverBase_getSlots
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TDefaultIoResolverBase_1getSlots
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TDefaultIoResolverBase_getHasError
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TDefaultIoResolverBase_1getHasError
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TDefaultGlslIoResolver
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TDefaultGlslIoResolver
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TDefaultGlslIoResolver_validateBinding
 * Signature: ([BI[B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TDefaultGlslIoResolver_1validateBinding
  (JNIEnv *, jclass, jbyteArray, jint, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TDefaultGlslIoResolver_getResourceType
 * Signature: ([B[B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TDefaultGlslIoResolver_1getResourceType
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TDefaultGlslIoResolver_resolveInOutLocation
 * Signature: ([BI[B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TDefaultGlslIoResolver_1resolveInOutLocation
  (JNIEnv *, jclass, jbyteArray, jint, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TDefaultGlslIoResolver_resolveUniformLocation
 * Signature: ([BI[B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TDefaultGlslIoResolver_1resolveUniformLocation
  (JNIEnv *, jclass, jbyteArray, jint, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TDefaultGlslIoResolver_resolveBinding
 * Signature: ([BI[B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TDefaultGlslIoResolver_1resolveBinding
  (JNIEnv *, jclass, jbyteArray, jint, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TDefaultGlslIoResolver_beginResolve
 * Signature: ([BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TDefaultGlslIoResolver_1beginResolve
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TDefaultGlslIoResolver_endResolve
 * Signature: ([BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TDefaultGlslIoResolver_1endResolve
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TDefaultGlslIoResolver_beginCollect
 * Signature: ([BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TDefaultGlslIoResolver_1beginCollect
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TDefaultGlslIoResolver_endCollect
 * Signature: ([BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TDefaultGlslIoResolver_1endCollect
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TDefaultGlslIoResolver_reserverStorageSlot
 * Signature: ([B[B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TDefaultGlslIoResolver_1reserverStorageSlot
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TDefaultGlslIoResolver_reserverResourceSlot
 * Signature: ([B[B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TDefaultGlslIoResolver_1reserverResourceSlot
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TDefaultGlslIoResolver_getAccessName
 * Signature: ([B[B)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_Java_Main_TDefaultGlslIoResolver_1getAccessName
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TDefaultGlslIoResolver_buildStorageKey
 * Signature: ([BII)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TDefaultGlslIoResolver_1buildStorageKey
  (JNIEnv *, jclass, jbyteArray, jint, jint);

/*
 * Class:     Java_Main
 * Method:    TVarLivePair
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TVarLivePair
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TVarLivePairFromPair
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TVarLivePairFromPair
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TVarLivePair_operatorAssign
 * Signature: ([B[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TVarLivePair_1operatorAssign
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TGlslIoMapper
 * Signature: ()[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TGlslIoMapper
  (JNIEnv *, jclass);

/*
 * Class:     Java_Main
 * Method:    TGlslIoMapper_addStage
 * Signature: ([BI[B[B[B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TGlslIoMapper_1addStage
  (JNIEnv *, jclass, jbyteArray, jint, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TGlslIoMapper_doMap
 * Signature: ([B[B[B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TGlslIoMapper_1doMap
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TGlslIoMapper_setInVarMaps
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TGlslIoMapper_1setInVarMaps
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TGlslIoMapper_setOutVarMaps
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TGlslIoMapper_1setOutVarMaps
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TGlslIoMapper_setUniformVarMap
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TGlslIoMapper_1setUniformVarMap
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TGlslIoMapper_setIntermediates
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TGlslIoMapper_1setIntermediates
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TGlslIoMapper_setHadError
 * Signature: ([BZ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TGlslIoMapper_1setHadError
  (JNIEnv *, jclass, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    TGlslIoMapper_getInVarMaps
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TGlslIoMapper_1getInVarMaps
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TGlslIoMapper_getOutVarMaps
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TGlslIoMapper_1getOutVarMaps
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TGlslIoMapper_getUniformVarMap
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TGlslIoMapper_1getUniformVarMap
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TGlslIoMapper_getIntermediates
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TGlslIoMapper_1getIntermediates
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TGlslIoMapper_getHadError
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TGlslIoMapper_1getHadError
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TMatrixSelector
 * Signature: ()[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TMatrixSelector__
  (JNIEnv *, jclass);

/*
 * Class:     Java_Main
 * Method:    TMatrixSelector
 * Signature: (II)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TMatrixSelector__II
  (JNIEnv *, jclass, jint, jint);

/*
 * Class:     Java_Main
 * Method:    TMatrixSelector_setCoord1
 * Signature: ([BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TMatrixSelector_1setCoord1
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TMatrixSelector_setCoord2
 * Signature: ([BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TMatrixSelector_1setCoord2
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TMatrixSelector_getCoord1
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TMatrixSelector_1getCoord1
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TMatrixSelector_getCoord2
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TMatrixSelector_1getCoord2
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TCall
 * Signature: (Ljava/lang/String;Ljava/lang/String;)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TCall
  (JNIEnv *, jclass, jstring, jstring);

/*
 * Class:     Java_Main
 * Method:    TCall_setCaller
 * Signature: ([BLjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TCall_1setCaller
  (JNIEnv *, jclass, jbyteArray, jstring);

/*
 * Class:     Java_Main
 * Method:    TCall_setCallee
 * Signature: ([BLjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TCall_1setCallee
  (JNIEnv *, jclass, jbyteArray, jstring);

/*
 * Class:     Java_Main
 * Method:    TCall_setVisited
 * Signature: ([BZ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TCall_1setVisited
  (JNIEnv *, jclass, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    TCall_setCurrentPath
 * Signature: ([BZ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TCall_1setCurrentPath
  (JNIEnv *, jclass, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    TCall_setErrorGiven
 * Signature: ([BZ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TCall_1setErrorGiven
  (JNIEnv *, jclass, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    TCall_setCalleeBodyPosition
 * Signature: ([BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TCall_1setCalleeBodyPosition
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TCall_getCaller
 * Signature: ([B)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_Java_Main_TCall_1getCaller
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TCall_getCallee
 * Signature: ([B)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_Java_Main_TCall_1getCallee
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TCall_getVisited
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TCall_1getVisited
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TCall_getCurrentPath
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TCall_1getCurrentPath
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TCall_getErrorGiven
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TCall_1getErrorGiven
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TCall_getCalleeBodyPosition
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TCall_1getCalleeBodyPosition
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TOffsetRange
 * Signature: ([B[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TOffsetRange
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TOffsetRange_overlap
 * Signature: ([B[B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TOffsetRange_1overlap
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TOffsetRange_setBinding
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TOffsetRange_1setBinding
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TOffsetRange_setOffset
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TOffsetRange_1setOffset
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TOffsetRange_getBinding
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TOffsetRange_1getBinding
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TOffsetRange_getOffset
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TOffsetRange_1getOffset
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TXfbBuffer
 * Signature: ()[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TXfbBuffer
  (JNIEnv *, jclass);

/*
 * Class:     Java_Main
 * Method:    TXfBuffer_setRanges
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TXfBuffer_1setRanges
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TXfBuffer_setStride
 * Signature: ([BJ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TXfBuffer_1setStride
  (JNIEnv *, jclass, jbyteArray, jlong);

/*
 * Class:     Java_Main
 * Method:    TXfBuffer_setImplicitStride
 * Signature: ([BJ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TXfBuffer_1setImplicitStride
  (JNIEnv *, jclass, jbyteArray, jlong);

/*
 * Class:     Java_Main
 * Method:    TXfBuffer_setContains64BitType
 * Signature: ([BZ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TXfBuffer_1setContains64BitType
  (JNIEnv *, jclass, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    TXfBuffer_setContains32BitType
 * Signature: ([BZ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TXfBuffer_1setContains32BitType
  (JNIEnv *, jclass, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    TXfBuffer_setContains16BitType
 * Signature: ([BZ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TXfBuffer_1setContains16BitType
  (JNIEnv *, jclass, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    TXfBuffer_getRanges
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TXfBuffer_1getRanges
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TXfBuffer_getStride
 * Signature: ([B)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_TXfBuffer_1getStride
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TXfBuffer_getImplicitStride
 * Signature: ([B)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_TXfBuffer_1getImplicitStride
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TXfBuffer_getContains64BitType
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TXfBuffer_1getContains64BitType
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TXfBuffer_getContains32BitType
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TXfBuffer_1getContains32BitType
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TXfBuffer_getContains16BitType
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TXfBuffer_1getContains16BitType
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TProcesses
 * Signature: ()[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TProcesses
  (JNIEnv *, jclass);

/*
 * Class:     Java_Main
 * Method:    TProcesses_addProcess
 * Signature: ([BLjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TProcesses_1addProcess
  (JNIEnv *, jclass, jbyteArray, jstring);

/*
 * Class:     Java_Main
 * Method:    TProcesses_addArgument
 * Signature: ([BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TProcesses_1addArgument___3BI
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TProcesses_addArgument
 * Signature: ([BLjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TProcesses_1addArgument___3BLjava_lang_String_2
  (JNIEnv *, jclass, jbyteArray, jstring);

/*
 * Class:     Java_Main
 * Method:    TProcesses_addIfNonZero
 * Signature: ([BLjava/lang/String;I)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TProcesses_1addIfNonZero
  (JNIEnv *, jclass, jbyteArray, jstring, jint);

/*
 * Class:     Java_Main
 * Method:    TProcesses_getProcesses
 * Signature: ([B)[Ljava/lang/String;
 */
JNIEXPORT jobjectArray JNICALL Java_Java_Main_TProcesses_1getProcesses
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TIdMaps
 * Signature: ()[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TIdMaps
  (JNIEnv *, jclass);

/*
 * Class:     Java_Main
 * Method:    TIdMaps_operatorAt
 * Signature: ([BI)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TIdMaps_1operatorAt
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TNumericFeatures
 * Signature: ()[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TNumericFeatures__
  (JNIEnv *, jclass);

/*
 * Class:     Java_Main
 * Method:    TNumericFeatures
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TNumericFeatures___3B
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TNumericFeatures_operatorAssign
 * Signature: ([B[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TNumericFeatures_1operatorAssign
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TNumericFeatures_insert
 * Signature: ([BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TNumericFeatures_1insert
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TNumericFeatures_erase
 * Signature: ([BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TNumericFeatures_1erase
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TNumericFeatures_contains
 * Signature: ([BI)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TNumericFeatures_1contains
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TParseVersions_requireStageMask
 * Signature: ([B[BILjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseVersions_1requireStageMask
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jint, jstring);

/*
 * Class:     Java_Main
 * Method:    TParseVersions_requireStage
 * Signature: ([B[BILjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseVersions_1requireStage
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jint, jstring);

/*
 * Class:     Java_Main
 * Method:    TParseVersions_isEsProfile
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TParseVersions_1isEsProfile
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParseVersions_requireProfile
 * Signature: ([B[BILjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseVersions_1requireProfile
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jint, jstring);

/*
 * Class:     Java_Main
 * Method:    TParseVersions_profileRequires
 * Signature: ([B[BII[Ljava/lang/String;Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseVersions_1profileRequires___3B_3BII_3Ljava_lang_String_2Ljava_lang_String_2
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jint, jint, jobjectArray, jstring);

/*
 * Class:     Java_Main
 * Method:    TParseVersions_profileRequires
 * Signature: ([B[BIILjava/lang/String;Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseVersions_1profileRequires___3B_3BIILjava_lang_String_2Ljava_lang_String_2
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jint, jint, jstring, jstring);

/*
 * Class:     Java_Main
 * Method:    TParseVersions_initializeExtensionBehavior
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseVersions_1initializeExtensionBehavior
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParseVersions_checkDeprecated
 * Signature: ([B[BIILjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseVersions_1checkDeprecated
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jint, jint, jstring);

/*
 * Class:     Java_Main
 * Method:    TParseVersions_requireNotRemoved
 * Signature: ([B[BIILjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseVersions_1requireNotRemoved
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jint, jint, jstring);

/*
 * Class:     Java_Main
 * Method:    TParseVersions_requireExtensions
 * Signature: ([B[B[Ljava/lang/String;Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseVersions_1requireExtensions
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jobjectArray, jstring);

/*
 * Class:     Java_Main
 * Method:    TParseVersions_ppRequireExtensions
 * Signature: ([B[B[Ljava/lang/String;Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseVersions_1ppRequireExtensions
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jobjectArray, jstring);

/*
 * Class:     Java_Main
 * Method:    TParseVersions_getExtensionBehavior
 * Signature: ([BLjava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TParseVersions_1getExtensionBehavior
  (JNIEnv *, jclass, jbyteArray, jstring);

/*
 * Class:     Java_Main
 * Method:    TParseVersions_extensionTurnedOn
 * Signature: ([BLjava/lang/String;)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TParseVersions_1extensionTurnedOn
  (JNIEnv *, jclass, jbyteArray, jstring);

/*
 * Class:     Java_Main
 * Method:    TParseVersions_extensionsTurnedOn
 * Signature: ([B[Ljava/lang/String;)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TParseVersions_1extensionsTurnedOn
  (JNIEnv *, jclass, jbyteArray, jobjectArray);

/*
 * Class:     Java_Main
 * Method:    TParseVersions_updateExtensionBehavior
 * Signature: ([BILjava/lang/String;Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseVersions_1updateExtensionBehavior___3BILjava_lang_String_2Ljava_lang_String_2
  (JNIEnv *, jclass, jbyteArray, jint, jstring, jstring);

/*
 * Class:     Java_Main
 * Method:    TParseVersions_updateExtensionBehavior
 * Signature: ([BLjava/lang/String;I)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseVersions_1updateExtensionBehavior___3BLjava_lang_String_2I
  (JNIEnv *, jclass, jbyteArray, jstring, jint);

/*
 * Class:     Java_Main
 * Method:    TParseVersions_checkExtensionsRequested
 * Signature: ([B[B[Ljava/lang/String;Ljava/lang/String;)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TParseVersions_1checkExtensionsRequested
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jobjectArray, jstring);

/*
 * Class:     Java_Main
 * Method:    TParseVersions_checkExtensionStage
 * Signature: ([B[BLjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseVersions_1checkExtensionStage
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jstring);

/*
 * Class:     Java_Main
 * Method:    TParseVersions_extensionRequires
 * Signature: ([B[BLjava/lang/String;Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseVersions_1extensionRequires
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jstring, jstring);

/*
 * Class:     Java_Main
 * Method:    TParseVersions_fullIntegerCheck
 * Signature: ([B[BLjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseVersions_1fullIntegerCheck
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jstring);

/*
 * Class:     Java_Main
 * Method:    TParseVersions_unimplemented
 * Signature: ([B[BLjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseVersions_1unimplemented
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jstring);

/*
 * Class:     Java_Main
 * Method:    TParseVersions_doubleCheck
 * Signature: ([B[BLjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseVersions_1doubleCheck
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jstring);

/*
 * Class:     Java_Main
 * Method:    TParseVersions_float16Check
 * Signature: ([B[BLjava/lang/String;Z)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseVersions_1float16Check
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jstring, jboolean);

/*
 * Class:     Java_Main
 * Method:    TParseVersions_float16ScalarVectorCheck
 * Signature: ([B[BLjava/lang/String;Z)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseVersions_1float16ScalarVectorCheck
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jstring, jboolean);

/*
 * Class:     Java_Main
 * Method:    TParseVersions_float16Arithmetic
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TParseVersions_1float16Arithmetic
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParseVersions_requireFloat16Arithmetic
 * Signature: ([B[BLjava/lang/String;Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseVersions_1requireFloat16Arithmetic
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jstring, jstring);

/*
 * Class:     Java_Main
 * Method:    TParseVersions_int16ScalarVectorCheck
 * Signature: ([B[BLjava/lang/String;Z)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseVersions_1int16ScalarVectorCheck
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jstring, jboolean);

/*
 * Class:     Java_Main
 * Method:    TParseVersions_int16Arithmetic
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TParseVersions_1int16Arithmetic
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParseVersions_requireInt16Arithmetic
 * Signature: ([B[BLjava/lang/String;Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseVersions_1requireInt16Arithmetic
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jstring, jstring);

/*
 * Class:     Java_Main
 * Method:    TParseVersions_int8ScalarVectorCheck
 * Signature: ([B[BLjava/lang/String;Z)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseVersions_1int8ScalarVectorCheck
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jstring, jboolean);

/*
 * Class:     Java_Main
 * Method:    TParseVersions_int8Arithmetic
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TParseVersions_1int8Arithmetic
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParseVersions_requireInt8Arithmetic
 * Signature: ([B[BLjava/lang/String;Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseVersions_1requireInt8Arithmetic
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jstring, jstring);

/*
 * Class:     Java_Main
 * Method:    TParseVersions_float16OpaqueCheck
 * Signature: ([B[BLjava/lang/String;Z)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseVersions_1float16OpaqueCheck
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jstring, jboolean);

/*
 * Class:     Java_Main
 * Method:    TParseVersions_int64Check
 * Signature: ([B[BLjava/lang/String;Z)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseVersions_1int64Check
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jstring, jboolean);

/*
 * Class:     Java_Main
 * Method:    TParseVersions_explicitInt8Check
 * Signature: ([B[BLjava/lang/String;Z)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseVersions_1explicitInt8Check
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jstring, jboolean);

/*
 * Class:     Java_Main
 * Method:    TParseVersions_explicitInt16Check
 * Signature: ([B[BLjava/lang/String;Z)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseVersions_1explicitInt16Check
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jstring, jboolean);

/*
 * Class:     Java_Main
 * Method:    TParseVersions_explicitInt32Check
 * Signature: ([B[BLjava/lang/String;Z)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseVersions_1explicitInt32Check
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jstring, jboolean);

/*
 * Class:     Java_Main
 * Method:    TParseVersions_explicitFloat32Check
 * Signature: ([B[BLjava/lang/String;Z)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseVersions_1explicitFloat32Check
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jstring, jboolean);

/*
 * Class:     Java_Main
 * Method:    TParseVersions_explicitFloat64Check
 * Signature: ([B[BLjava/lang/String;Z)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseVersions_1explicitFloat64Check
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jstring, jboolean);

/*
 * Class:     Java_Main
 * Method:    TParseVersions_fcoopmatCheck
 * Signature: ([B[BLjava/lang/String;Z)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseVersions_1fcoopmatCheck
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jstring, jboolean);

/*
 * Class:     Java_Main
 * Method:    TParseVersions_intcoopmatCheck
 * Signature: ([B[BLjava/lang/String;Z)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseVersions_1intcoopmatCheck
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jstring, jboolean);

/*
 * Class:     Java_Main
 * Method:    TParseVersions_relaxedErrors
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TParseVersions_1relaxedErrors
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParseVersions_suppressWarnings
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TParseVersions_1suppressWarnings
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParseVersions_isForwardCompatible
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TParseVersions_1isForwardCompatible
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParseVersions_spvRemoved
 * Signature: ([B[BLjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseVersions_1spvRemoved
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jstring);

/*
 * Class:     Java_Main
 * Method:    TParseVersions_vulkanRemoved
 * Signature: ([B[BLjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseVersions_1vulkanRemoved
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jstring);

/*
 * Class:     Java_Main
 * Method:    TParseVersions_requireVulkan
 * Signature: ([B[BLjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseVersions_1requireVulkan
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jstring);

/*
 * Class:     Java_Main
 * Method:    TParseVersions_requireSpv
 * Signature: ([B[BLjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseVersions_1requireSpv___3B_3BLjava_lang_String_2
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jstring);

/*
 * Class:     Java_Main
 * Method:    TParseVersions_requireSpv
 * Signature: ([B[BLjava/lang/String;J)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseVersions_1requireSpv___3B_3BLjava_lang_String_2J
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jstring, jlong);

/*
 * Class:     Java_Main
 * Method:    TParseVersions_error
 * Signature: ([B[BLjava/lang/String;Ljava/lang/String;Ljava/lang/String;[[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseVersions_1error
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jstring, jstring, jstring, jobjectArray);

/*
 * Class:     Java_Main
 * Method:    TParseVersions_warn
 * Signature: ([B[BLjava/lang/String;Ljava/lang/String;Ljava/lang/String;[[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseVersions_1warn
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jstring, jstring, jstring, jobjectArray);

/*
 * Class:     Java_Main
 * Method:    TParseVersions_ppError
 * Signature: ([B[BLjava/lang/String;Ljava/lang/String;Ljava/lang/String;[[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseVersions_1ppError
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jstring, jstring, jstring, jobjectArray);

/*
 * Class:     Java_Main
 * Method:    TParseVersions_ppWarn
 * Signature: ([B[BLjava/lang/String;Ljava/lang/String;Ljava/lang/String;[[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseVersions_1ppWarn
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jstring, jstring, jstring, jobjectArray);

/*
 * Class:     Java_Main
 * Method:    TParseVersions_addError
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseVersions_1addError
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParseVersions_getNumErrors
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TParseVersions_1getNumErrors
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParseVersions_setScanner
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseVersions_1setScanner
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParseVersions_getScanner
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TParseVersions_1getScanner
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParseVersions_getCurrentLoc
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TParseVersions_1getCurrentLoc
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParseVersions_setCurrentLine
 * Signature: ([BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseVersions_1setCurrentLine
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TParseVersions_setCurrentColumn
 * Signature: ([BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseVersions_1setCurrentColumn
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TParseVersions_setCurrentSourceName
 * Signature: ([BLjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseVersions_1setCurrentSourceName
  (JNIEnv *, jclass, jbyteArray, jstring);

/*
 * Class:     Java_Main
 * Method:    TParseVersions_setCurrentString
 * Signature: ([BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseVersions_1setCurrentString
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TParseVersions_getPreamble
 * Signature: ([B)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_Java_Main_TParseVersions_1getPreamble
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParseVersions_isReadingHLSL
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TParseVersions_1isReadingHLSL
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParseVersions_hlslEnable16BitTypes
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TParseVersions_1hlslEnable16BitTypes
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParseVersions_hlslDX9Compatible
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TParseVersions_1hlslDX9Compatible
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParseVersions_setForwardCompatible
 * Signature: ([BZ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseVersions_1setForwardCompatible
  (JNIEnv *, jclass, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    TParseVersions_setProfile
 * Signature: ([BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseVersions_1setProfile
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TParseVersions_setInfoSink
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseVersions_1setInfoSink
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParseVersions_setVersion
 * Signature: ([BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseVersions_1setVersion
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TParseVersions_setLanguage
 * Signature: ([BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseVersions_1setLanguage
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TParseVersions_setSpvVersion
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TParseVersions_1setSpvVersion
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParseVersions_getForwardCompatible
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TParseVersions_1getForwardCompatible
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParseVersions_getProfile
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TParseVersions_1getProfile
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParseVersions_getInfoSink
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TParseVersions_1getInfoSink
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParseVersions_getVersion
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TParseVersions_1getVersion
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParseVersions_getLanguage
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TParseVersions_1getLanguage
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParseVersions_getSpvVersion
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TParseVersions_1getSpvVersion
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TParseVersions_getIntermediate
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TParseVersions_1getIntermediate
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TReflection
 * Signature: (III)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TReflection
  (JNIEnv *, jclass, jint, jint, jint);

/*
 * Class:     Java_Main
 * Method:    TReflection_addStage
 * Signature: ([BI[B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_TReflection_1addStage
  (JNIEnv *, jclass, jbyteArray, jint, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TReflection_getNumUniforms
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TReflection_1getNumUniforms
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TReflection_getUniform
 * Signature: ([BI)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TReflection_1getUniform
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TReflection_getNumUniformBlocks
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TReflection_1getNumUniformBlocks
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TReflection_getUniformBlock
 * Signature: ([BI)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TReflection_1getUniformBlock
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TReflection_getNumPipeInputs
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TReflection_1getNumPipeInputs
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TReflection_getPipeInput
 * Signature: ([BI)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TReflection_1getPipeInput
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TReflection_getNumPipeOutputs
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TReflection_1getNumPipeOutputs
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TReflection_getPipeOutput
 * Signature: ([BI)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TReflection_1getPipeOutput
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TReflection_getNumAtomicCounters
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TReflection_1getNumAtomicCounters
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TReflection_getAtomicCounter
 * Signature: ([BI)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TReflection_1getAtomicCounter
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TReflection_getNumBufferVariables
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TReflection_1getNumBufferVariables
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TReflection_getBufferVariable
 * Signature: ([BI)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TReflection_1getBufferVariable
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TReflection_getNumStorageBuffers
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TReflection_1getNumStorageBuffers
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TReflection_getStorageBufferBlock
 * Signature: ([BI)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TReflection_1getStorageBufferBlock
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TReflection_getIndex
 * Signature: ([BLjava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TReflection_1getIndex
  (JNIEnv *, jclass, jbyteArray, jstring);

/*
 * Class:     Java_Main
 * Method:    TReflection_getPipeIOIndex
 * Signature: ([BLjava/lang/String;Z)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_TReflection_1getPipeIOIndex
  (JNIEnv *, jclass, jbyteArray, jstring, jboolean);

/*
 * Class:     Java_Main
 * Method:    TReflection_getLocalSize
 * Signature: ([BI)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_TReflection_1getLocalSize
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TReflection_dump
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TReflection_1dump
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TFunctionDeclarator
 * Signature: ()[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TFunctionDeclarator
  (JNIEnv *, jclass);

/*
 * Class:     Java_Main
 * Method:    TFunctionDeclarator_setLoc
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TFunctionDeclarator_1setLoc
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TFunctionDeclarator_setFunction
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TFunctionDeclarator_1setFunction
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TFunctionDeclarator_setAttributes
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TFunctionDeclarator_1setAttributes
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TFunctionDeclarator_setBody
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TFunctionDeclarator_1setBody
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TFunctionDeclarator_getLoc
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TFunctionDeclarator_1getLoc
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TFunctionDeclarator_getFunction
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TFunctionDeclarator_1getFunction
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TFunctionDeclarator_getAttributes
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TFunctionDeclarator_1getAttributes
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TFunctionDeclarator_getBody
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TFunctionDeclarator_1getBody
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    HlslOpMap_assignment
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_HlslOpMap_1assignment
  (JNIEnv *, jclass, jint);

/*
 * Class:     Java_Main
 * Method:    HlslOpMap_binary
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_HlslOpMap_1binary
  (JNIEnv *, jclass, jint);

/*
 * Class:     Java_Main
 * Method:    HlslOpMap_preUnary
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_HlslOpMap_1preUnary
  (JNIEnv *, jclass, jint);

/*
 * Class:     Java_Main
 * Method:    HlslOpMap_postUnary
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_HlslOpMap_1postUnary
  (JNIEnv *, jclass, jint);

/*
 * Class:     Java_Main
 * Method:    HlslOpMap_precedenceLevel
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_HlslOpMap_1precedenceLevel
  (JNIEnv *, jclass, jint);

/*
 * Class:     Java_Main
 * Method:    HlslGrammar
 * Signature: ([B[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_HlslGrammar
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    HlslGrammar_parse
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_HlslGrammar_1parse
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    HlslParseContext
 * Signature: ([B[BZII[BI[BLjava/lang/String;ZI)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_HlslParseContext
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jboolean, jint, jint, jbyteArray, jint, jbyteArray, jstring, jboolean, jint);

/*
 * Class:     Java_Main
 * Method:    HlslParseContext_initializeExtensionBehavior
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_HlslParseContext_1initializeExtensionBehavior
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    HlslParseContext_setLimits
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_HlslParseContext_1setLimits
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    HlslParseContext_parseShaderStrings
 * Signature: ([B[B[BZ)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_HlslParseContext_1parseShaderStrings
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    HlslParseContext_getGlobalUniformBlockName
 * Signature: ([B)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_Java_Main_HlslParseContext_1getGlobalUniformBlockName
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    HlslParseContext_setUniformBlockDefaults
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_HlslParseContext_1setUniformBlockDefaults
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    HlslParseContext_reservedPpErrorCheck
 * Signature: ([B[BLjava/lang/String;Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_HlslParseContext_1reservedPpErrorCheck
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jstring, jstring);

/*
 * Class:     Java_Main
 * Method:    HlslParseContext_lineContinuationCheck
 * Signature: ([B[BZ)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_HlslParseContext_1lineContinuationCheck
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    HlslParseContext_lineDirectiveShouldSetNextLine
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_HlslParseContext_1lineDirectiveShouldSetNextLine
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    HlslParseContext_builtInName
 * Signature: ([BLjava/lang/String;)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_HlslParseContext_1builtInName
  (JNIEnv *, jclass, jbyteArray, jstring);

/*
 * Class:     Java_Main
 * Method:    HlslParseContext_handlePragma
 * Signature: ([B[B[Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_HlslParseContext_1handlePragma
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jobjectArray);

/*
 * Class:     Java_Main
 * Method:    HlslParseContext_handleVariable
 * Signature: ([B[BLjava/lang/String;)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_HlslParseContext_1handleVariable
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jstring);

/*
 * Class:     Java_Main
 * Method:    HlslParseContext_handleBracketDereference
 * Signature: ([B[B[B[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_HlslParseContext_1handleBracketDereference
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    HlslParseContext_handleBracketOperator
 * Signature: ([B[B[B[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_HlslParseContext_1handleBracketOperator
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    HlslParseContext_handleBinaryMath
 * Signature: ([B[BLjava/lang/String;I[B[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_HlslParseContext_1handleBinaryMath
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jstring, jint, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    HlslParseContext_handleUnaryMath
 * Signature: ([B[BLjava/lang/String;I[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_HlslParseContext_1handleUnaryMath
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jstring, jint, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    HlslParseContext_handleDotDereference
 * Signature: ([B[B[BLjava/lang/String;)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_HlslParseContext_1handleDotDereference
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray, jstring);

/*
 * Class:     Java_Main
 * Method:    HlslParseContext_isBuiltInMethod
 * Signature: ([B[B[BLjava/lang/String;)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_HlslParseContext_1isBuiltInMethod
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray, jstring);

/*
 * Class:     Java_Main
 * Method:    HlslParseContext_assignToInterface
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_HlslParseContext_1assignToInterface
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    HlslParseContext_handleFunctionDeclarator
 * Signature: ([B[B[BZ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_HlslParseContext_1handleFunctionDeclarator
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    HlslParseContext_handleFunctionDefinition
 * Signature: ([B[B[B[B[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_HlslParseContext_1handleFunctionDefinition
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    HlslParseContext_transformEntryPoint
 * Signature: ([B[B[B[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_HlslParseContext_1transformEntryPoint
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    HlslParseContext_handleEntryPointAttributes
 * Signature: ([B[B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_HlslParseContext_1handleEntryPointAttributes
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    HlslParseContext_transferTypeAttributes
 * Signature: ([B[B[B[BZ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_HlslParseContext_1transferTypeAttributes
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    HlslParseContext_handleFunctionBody
 * Signature: ([B[B[B[B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_HlslParseContext_1handleFunctionBody
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    HlslParseContext_remapEntryPointIO
 * Signature: ([B[B[B[B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_HlslParseContext_1remapEntryPointIO
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    HlslParseContext_remapNonEntryPointIO
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_HlslParseContext_1remapNonEntryPointIO
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    HlslParseContext_handleReturnValue
 * Signature: ([B[B[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_HlslParseContext_1handleReturnValue
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    HlslParseContext_handleFunctionArgument
 * Signature: ([B[B[B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_HlslParseContext_1handleFunctionArgument
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    HlslParseContext_handleAssign
 * Signature: ([B[BI[B[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_HlslParseContext_1handleAssign
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jint, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    HlslParseContext_handleAssignToMatrixSwizzle
 * Signature: ([B[BI[B[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_HlslParseContext_1handleAssignToMatrixSwizzle
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jint, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    HlslParseContext_handleFunctionCall
 * Signature: ([B[B[B[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_HlslParseContext_1handleFunctionCall
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    HlslParseContext_assignClipCullDistance
 * Signature: ([B[BII[B[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_HlslParseContext_1assignClipCullDistance
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jint, jint, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    HlslParseContext_assignPosition
 * Signature: ([B[BI[B[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_HlslParseContext_1assignPosition
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jint, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    HlslParseContext_decomposeIntrinsic
 * Signature: ([B[B[B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_HlslParseContext_1decomposeIntrinsic
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    HlslParseContext_decomposeSampleMethods
 * Signature: ([B[B[B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_HlslParseContext_1decomposeSampleMethods
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    HlslParseContext_decomposeStructBufferMethods
 * Signature: ([B[B[B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_HlslParseContext_1decomposeStructBufferMethods
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    HlslParseContext_decomposeGeometryMethods
 * Signature: ([B[B[B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_HlslParseContext_1decomposeGeometryMethods
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    HlslParseContext_pushFrontArguments
 * Signature: ([B[B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_HlslParseContext_1pushFrontArguments
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    HlslParseContext_addInputArgumentConversions
 * Signature: ([B[B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_HlslParseContext_1addInputArgumentConversions
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    HlslParseContext_expandArguments
 * Signature: ([B[B[B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_HlslParseContext_1expandArguments
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    HlslParseContext_addOutputArgumentConversions
 * Signature: ([B[B[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_HlslParseContext_1addOutputArgumentConversions
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    HlslParseContext_builtInOpCheck
 * Signature: ([B[B[B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_HlslParseContext_1builtInOpCheck
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    HlslParseContext_makeConstructorCall
 * Signature: ([B[B[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_HlslParseContext_1makeConstructorCall
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    HlslParseContext_handleSemantic
 * Signature: ([B[B[BILjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_HlslParseContext_1handleSemantic
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray, jint, jstring);

/*
 * Class:     Java_Main
 * Method:    HlslParseContext_handlePackOffset
 * Signature: ([B[B[BLjava/lang/String;Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_HlslParseContext_1handlePackOffset
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray, jstring, jstring);

/*
 * Class:     Java_Main
 * Method:    HlslParseContext_handleRegister
 * Signature: ([B[B[BLjava/lang/String;Ljava/lang/String;ILjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_HlslParseContext_1handleRegister
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray, jstring, jstring, jint, jstring);

/*
 * Class:     Java_Main
 * Method:    HlslParseContext_convertConditionalExpression
 * Signature: ([B[B[BZ)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_HlslParseContext_1convertConditionalExpression
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    HlslParseContext_handleSamplerTextureCombine
 * Signature: ([B[B[B[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_HlslParseContext_1handleSamplerTextureCombine
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    HlslParseContext_parseMatrixSwizzleSelector
 * Signature: ([B[BLjava/lang/String;II[B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_HlslParseContext_1parseMatrixSwizzleSelector
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jstring, jint, jint, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    HlslParseContext_getMatrixComponentsColumn
 * Signature: ([BI[B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_HlslParseContext_1getMatrixComponentsColumn
  (JNIEnv *, jclass, jbyteArray, jint, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    HlslParseContext_assignError
 * Signature: ([B[BLjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_HlslParseContext_1assignError
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jstring, jstring, jstring);

/*
 * Class:     Java_Main
 * Method:    HlslParseContext_unaryOpError
 * Signature: ([B[BLjava/lang/String;Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_HlslParseContext_1unaryOpError
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jstring, jstring);

/*
 * Class:     Java_Main
 * Method:    HlslParseContext_binaryOpError
 * Signature: ([B[BLjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_HlslParseContext_1binaryOpError
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jstring, jstring, jstring);

/*
 * Class:     Java_Main
 * Method:    HlslParseContext_variableCheck
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_HlslParseContext_1variableCheck
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    HlslParseContext_constantValueCheck
 * Signature: ([B[BLjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_HlslParseContext_1constantValueCheck
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jstring);

/*
 * Class:     Java_Main
 * Method:    HlslParseContext_integerCheck
 * Signature: ([B[BLjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_HlslParseContext_1integerCheck
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jstring);

/*
 * Class:     Java_Main
 * Method:    HlslParseContext_globalCheck
 * Signature: ([B[BLjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_HlslParseContext_1globalCheck
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jstring);

/*
 * Class:     Java_Main
 * Method:    HlslParseContext_constructorError
 * Signature: ([B[B[B[BI[B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_HlslParseContext_1constructorError
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray, jbyteArray, jint, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    HlslParseContext_arraySizeCheck
 * Signature: ([B[B[B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_HlslParseContext_1arraySizeCheck
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    HlslParseContext_arraySizeRequiredCheck
 * Signature: ([B[B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_HlslParseContext_1arraySizeRequiredCheck
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    HlslParseContext_structArrayCheck
 * Signature: ([B[B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_HlslParseContext_1structArrayCheck
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    HlslParseContext_voidErrorCheck
 * Signature: ([B[BLjava/lang/String;I)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_HlslParseContext_1voidErrorCheck
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jstring, jint);

/*
 * Class:     Java_Main
 * Method:    HlslParseContext_globalQualifierFix
 * Signature: ([B[B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_HlslParseContext_1globalQualifierFix
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    HlslParseContext_structQualifierErrorCheck
 * Signature: ([B[B[B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_HlslParseContext_1structQualifierErrorCheck
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    HlslParseContext_mergeQualifiers
 * Signature: ([B[B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_HlslParseContext_1mergeQualifiers
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    HlslParseContext_computeSamplerTypeIndex
 * Signature: ([B[B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_HlslParseContext_1computeSamplerTypeIndex
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    HlslParseContext_redeclareBuiltinVariable
 * Signature: ([B[BLjava/lang/String;[B[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_HlslParseContext_1redeclareBuiltinVariable
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jstring, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    HlslParseContext_paramFix
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_HlslParseContext_1paramFix
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    HlslParseContext_specializationCheck
 * Signature: ([B[B[BLjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_HlslParseContext_1specializationCheck
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray, jstring);

/*
 * Class:     Java_Main
 * Method:    HlslParseContext_setLayoutQualifier
 * Signature: ([B[B[BLjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_HlslParseContext_1setLayoutQualifier___3B_3B_3BLjava_lang_String_2
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray, jstring);

/*
 * Class:     Java_Main
 * Method:    HlslParseContext_setLayoutQualifier
 * Signature: ([B[B[BLjava/lang/String;[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_HlslParseContext_1setLayoutQualifier___3B_3B_3BLjava_lang_String_2_3B
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray, jstring, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    HlslParseContext_setSpecConstantId
 * Signature: ([B[B[BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_HlslParseContext_1setSpecConstantId
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    HlslParseContext_mergeObjectLayoutQualifiers
 * Signature: ([B[B[BZ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_HlslParseContext_1mergeObjectLayoutQualifiers
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    HlslParseContext_checkNoShaderLayouts
 * Signature: ([B[B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_HlslParseContext_1checkNoShaderLayouts
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    HlslParseContext_findFunction
 * Signature: ([B[B[BZI[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_HlslParseContext_1findFunction
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray, jboolean, jint, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    HlslParseContext_addGenMulArgumentConversion
 * Signature: ([B[B[B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_HlslParseContext_1addGenMulArgumentConversion
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    HlslParseContext_declareTypedef
 * Signature: ([B[BLjava/lang/String;[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_HlslParseContext_1declareTypedef
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jstring, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    HlslParseContext_declareStruct
 * Signature: ([B[BLjava/lang/String;[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_HlslParseContext_1declareStruct
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jstring, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    HlslParseContext_lookupUserType
 * Signature: ([BLjava/lang/String;[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_HlslParseContext_1lookupUserType
  (JNIEnv *, jclass, jbyteArray, jstring, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    HlslParseContext_declareVariable
 * Signature: ([B[BLjava/lang/String;[B[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_HlslParseContext_1declareVariable
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jstring, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    HlslParseContext_lengthenList
 * Signature: ([B[B[BI[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_HlslParseContext_1lengthenList
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray, jint, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    HlslParseContext_handleConstructor
 * Signature: ([B[B[B[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_HlslParseContext_1handleConstructor
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    HlslParseContext_addConstructor
 * Signature: ([B[B[B[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_HlslParseContext_1addConstructor
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    HlslParseContext_convertArray
 * Signature: ([B[B[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_HlslParseContext_1convertArray
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    HlslParseContext_constructAggregate
 * Signature: ([B[B[BI[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_HlslParseContext_1constructAggregate
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray, jint, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    HlslParseContext_constructBuiltIn
 * Signature: ([B[BI[B[BZ)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_HlslParseContext_1constructBuiltIn
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jint, jbyteArray, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    HlslParseContext_declareBlock
 * Signature: ([B[B[BLjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_HlslParseContext_1declareBlock
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray, jstring);

/*
 * Class:     Java_Main
 * Method:    HlslParseContext_declareStructBufferCounter
 * Signature: ([B[B[BLjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_HlslParseContext_1declareStructBufferCounter
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray, jstring);

/*
 * Class:     Java_Main
 * Method:    HlslParseContext_fixBlockLocations
 * Signature: ([B[B[B[BZZ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_HlslParseContext_1fixBlockLocations
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray, jbyteArray, jboolean, jboolean);

/*
 * Class:     Java_Main
 * Method:    HlslParseContext_fixXfbOffsets
 * Signature: ([B[B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_HlslParseContext_1fixXfbOffsets
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    HlslParseContext_fixBlockUniformOffsets
 * Signature: ([B[B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_HlslParseContext_1fixBlockUniformOffsets
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    HlslParseContext_addQualifierToExisting
 * Signature: ([B[B[BLjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_HlslParseContext_1addQualifierToExisting___3B_3B_3BLjava_lang_String_2
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray, jstring);

/*
 * Class:     Java_Main
 * Method:    HlslParseContext_addQualifierToExisting
 * Signature: ([B[B[B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_HlslParseContext_1addQualifierToExisting___3B_3B_3B_3B
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    HlslParseContext_updateStandaloneQualifierDefaults
 * Signature: ([B[B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_HlslParseContext_1updateStandaloneQualifierDefaults
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    HlslParseContext_wrapupSwitchSubsequence
 * Signature: ([B[B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_HlslParseContext_1wrapupSwitchSubsequence
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    HlslParseContext_addSwitch
 * Signature: ([B[B[B[B[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_HlslParseContext_1addSwitch
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    HlslParseContext_nestLooping
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_HlslParseContext_1nestLooping
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    HlslParseContext_unnestLooping
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_HlslParseContext_1unnestLooping
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    HlslParseContext_nestAnnotations
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_HlslParseContext_1nestAnnotations
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    HlslParseContext_unnestAnnotations
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_HlslParseContext_1unnestAnnotations
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    HlslParseContext_getAnnotationNestingLevel
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_HlslParseContext_1getAnnotationNestingLevel
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    HlslParseContext_pushScope
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_HlslParseContext_1pushScope
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    HlslParseContext_popScope
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_HlslParseContext_1popScope
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    HlslParseContext_pushThisScope
 * Signature: ([B[B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_HlslParseContext_1pushThisScope
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    HlslParseContext_popThisScope
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_HlslParseContext_1popThisScope
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    HlslParseContext_pushImplicitThis
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_HlslParseContext_1pushImplicitThis
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    HlslParseContext_popImplicitThis
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_HlslParseContext_1popImplicitThis
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    HlslParseContext_getImplicitThis
 * Signature: ([BI)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_HlslParseContext_1getImplicitThis
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    HlslParseContext_pushNamespace
 * Signature: ([BLjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_HlslParseContext_1pushNamespace
  (JNIEnv *, jclass, jbyteArray, jstring);

/*
 * Class:     Java_Main
 * Method:    HlslParseContext_popNamespace
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_HlslParseContext_1popNamespace
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    HlslParseContext_getFullNamespaceName
 * Signature: ([B[Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_HlslParseContext_1getFullNamespaceName
  (JNIEnv *, jclass, jbyteArray, jobjectArray);

/*
 * Class:     Java_Main
 * Method:    HlslParseContext_addScopeMangler
 * Signature: ([BLjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_HlslParseContext_1addScopeMangler
  (JNIEnv *, jclass, jbyteArray, jstring);

/*
 * Class:     Java_Main
 * Method:    HlslParseContext_beginParameterParsing
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_HlslParseContext_1beginParameterParsing
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    HlslParseContext_pushSwitchSequence
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_HlslParseContext_1pushSwitchSequence
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    HlslParseContext_popSwitchSequence
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_HlslParseContext_1popSwitchSequence
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    HlslParseContext_growGlobalUniformBlock
 * Signature: ([B[B[BLjava/lang/String;[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_HlslParseContext_1growGlobalUniformBlock
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray, jstring, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    HlslParseContext_handleLvalue
 * Signature: ([B[BLjava/lang/String;[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_HlslParseContext_1handleLvalue
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jstring, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    HlslParseContext_lValueErrorCheck
 * Signature: ([B[BLjava/lang/String;[B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_HlslParseContext_1lValueErrorCheck
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jstring, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    HlslParseContext_getLayoutFromTxType
 * Signature: ([B[B[B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_HlslParseContext_1getLayoutFromTxType
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    HlslParseContext_handleOutputGeometry
 * Signature: ([B[BI)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_HlslParseContext_1handleOutputGeometry
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    HlslParseContext_handleInputGeometry
 * Signature: ([B[BI)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_HlslParseContext_1handleInputGeometry
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    HlslParseContext_handleSelectionAttributes
 * Signature: ([B[B[B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_HlslParseContext_1handleSelectionAttributes
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    HlslParseContext_handleSwitchAttributes
 * Signature: ([B[B[B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_HlslParseContext_1handleSwitchAttributes
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    HlslParseContext_handleLoopAttributes
 * Signature: ([B[B[B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_HlslParseContext_1handleLoopAttributes
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    HlslParseContext_shareStructBufferType
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_HlslParseContext_1shareStructBufferType
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    HlslParseContext_setTextureReturnType
 * Signature: ([B[B[B[B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_HlslParseContext_1setTextureReturnType
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    HlslParseContext_getTextureReturnType
 * Signature: ([B[B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_HlslParseContext_1getTextureReturnType
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    HlslParseContext_attributeFromName
 * Signature: ([BLjava/lang/String;Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_HlslParseContext_1attributeFromName
  (JNIEnv *, jclass, jbyteArray, jstring, jstring);

/*
 * Class:     Java_Main
 * Method:    TBuiltInParseablesHlsl
 * Signature: ()[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TBuiltInParseablesHlsl
  (JNIEnv *, jclass);

/*
 * Class:     Java_Main
 * Method:    TBuiltInParseablesHlsl_initialize
 * Signature: ([BII[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TBuiltInParseablesHlsl_1initialize___3BII_3B
  (JNIEnv *, jclass, jbyteArray, jint, jint, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TBuiltInParseablesHlsl_initialize
 * Signature: ([B[BII[BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TBuiltInParseablesHlsl_1initialize___3B_3BII_3BI
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jint, jint, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    TBuiltInParseablesHlsl_identifyBuiltIns
 * Signature: ([BII[BI[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TBuiltInParseablesHlsl_1identifyBuiltIns___3BII_3BI_3B
  (JNIEnv *, jclass, jbyteArray, jint, jint, jbyteArray, jint, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TBuiltInParseablesHlsl_identifyBuiltIns
 * Signature: ([BII[BI[B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_TBuiltInParseablesHlsl_1identifyBuiltIns___3BII_3BI_3B_3B
  (JNIEnv *, jclass, jbyteArray, jint, jint, jbyteArray, jint, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    HlslToken
 * Signature: ()[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_HlslToken
  (JNIEnv *, jclass);

/*
 * Class:     Java_Main
 * Method:    HlslToken_setLoc
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_HlslToken_1setLoc
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    HlslToken_setTokenClass
 * Signature: ([BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_HlslToken_1setTokenClass
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    HlslToken_setString
 * Signature: ([BLjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_HlslToken_1setString
  (JNIEnv *, jclass, jbyteArray, jstring);

/*
 * Class:     Java_Main
 * Method:    HlslToken_setI
 * Signature: ([BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_HlslToken_1setI
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    HlslToken_setU
 * Signature: ([BJ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_HlslToken_1setU
  (JNIEnv *, jclass, jbyteArray, jlong);

/*
 * Class:     Java_Main
 * Method:    HlslToken_setB
 * Signature: ([BZ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_HlslToken_1setB
  (JNIEnv *, jclass, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    HlslToken_setD
 * Signature: ([BD)V
 */
JNIEXPORT void JNICALL Java_Java_Main_HlslToken_1setD
  (JNIEnv *, jclass, jbyteArray, jdouble);

/*
 * Class:     Java_Main
 * Method:    HlslToken_getLoc
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_HlslToken_1getLoc
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    HlslToken_getTokenClass
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_HlslToken_1getTokenClass
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    HlslToken_getString
 * Signature: ([B)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_Java_Main_HlslToken_1getString
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    HlslToken_getI
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_HlslToken_1getI
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    HlslToken_getU
 * Signature: ([B)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_HlslToken_1getU
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    HlslToken_getB
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_HlslToken_1getB
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    HlslToken_getD
 * Signature: ([B)D
 */
JNIEXPORT jdouble JNICALL Java_Java_Main_HlslToken_1getD
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    HlslScanContext
 * Signature: ([B[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_HlslScanContext
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    HlslScanContext_fillInKeywordMap
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_Java_Main_HlslScanContext_1fillInKeywordMap
  (JNIEnv *, jclass);

/*
 * Class:     Java_Main
 * Method:    HlslScanContext_deleteKeywordMap
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_Java_Main_HlslScanContext_1deleteKeywordMap
  (JNIEnv *, jclass);

/*
 * Class:     Java_Main
 * Method:    HlslScanContext_tokenize
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_HlslScanContext_1tokenize
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    HlslScanContext_mapSemantic
 * Signature: ([BLjava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_HlslScanContext_1mapSemantic
  (JNIEnv *, jclass, jbyteArray, jstring);

/*
 * Class:     Java_Main
 * Method:    HlslTokenStream
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_HlslTokenStream
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    HlslTokenStream_advanceToken
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_HlslTokenStream_1advanceToken
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    HlslTokenStream_recedeToken
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_HlslTokenStream_1recedeToken
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    HlslTokenStream_acceptTokenClass
 * Signature: ([BI)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_HlslTokenStream_1acceptTokenClass
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    HlslTokenStream_peek
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_HlslTokenStream_1peek
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    HlslTokenStream_peekTokenClass
 * Signature: ([BI)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_HlslTokenStream_1peekTokenClass
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    HlslTokenStream_mapSemantic
 * Signature: ([BLjava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_HlslTokenStream_1mapSemantic
  (JNIEnv *, jclass, jbyteArray, jstring);

/*
 * Class:     Java_Main
 * Method:    HlslTokenStream_pushTokenStream
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_HlslTokenStream_1pushTokenStream
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    HlslTokenStream_popTokenStream
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_HlslTokenStream_1popTokenStream
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    SpvVersion
 * Signature: ()[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_SpvVersion
  (JNIEnv *, jclass);

/*
 * Class:     Java_Main
 * Method:    SpvVersion_setSpv
 * Signature: ([BJ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_SpvVersion_1setSpv
  (JNIEnv *, jclass, jbyteArray, jlong);

/*
 * Class:     Java_Main
 * Method:    SpvVersion_setVulkanGlsl
 * Signature: ([BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_SpvVersion_1setVulkanGlsl
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    SpvVersion_setVulkan
 * Signature: ([BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_SpvVersion_1setVulkan
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    SpvVersion_setOpenGl
 * Signature: ([BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_SpvVersion_1setOpenGl
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    SpvVersion_getSpv
 * Signature: ([B)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_SpvVersion_1getSpv
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    SpvVersion_getVulkanGlsl
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_SpvVersion_1getVulkanGlsl
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    SpvVersion_getVulkan
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_SpvVersion_1getVulkan
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    SpvVersion_getOpenGl
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_SpvVersion_1getOpenGl
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TVector
 * Signature: ()[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TVector__
  (JNIEnv *, jclass);

/*
 * Class:     Java_Main
 * Method:    TVector
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TVector___3B
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TVector
 * Signature: (I)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TVector__I
  (JNIEnv *, jclass, jint);

/*
 * Class:     Java_Main
 * Method:    TVector
 * Signature: (I[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TVector__I_3B
  (JNIEnv *, jclass, jint, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    TList
 * Signature: ()[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TList
  (JNIEnv *, jclass);

/*
 * Class:     Java_Main
 * Method:    TMap
 * Signature: ()[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TMap
  (JNIEnv *, jclass);

/*
 * Class:     Java_Main
 * Method:    pool_allocator
 * Signature: ()[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_pool_1allocator__
  (JNIEnv *, jclass);

/*
 * Class:     Java_Main
 * Method:    pool_allocatorByTPoolAllocator
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_pool_1allocatorByTPoolAllocator
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    pool_allocator
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_pool_1allocator___3B
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    pool_allocator_address
 * Signature: ([B[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_pool_1allocator_1address
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    pool_allocator_allocate
 * Signature: ([BJ)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_pool_1allocator_1allocate___3BJ
  (JNIEnv *, jclass, jbyteArray, jlong);

/*
 * Class:     Java_Main
 * Method:    pool_allocator_allocate
 * Signature: ([BJ[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_pool_1allocator_1allocate___3BJ_3B
  (JNIEnv *, jclass, jbyteArray, jlong, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    pool_allocator_deallocate
 * Signature: ([B[BJ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_pool_1allocator_1deallocate
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jlong);

/*
 * Class:     Java_Main
 * Method:    pool_allocator__Charalloc
 * Signature: ([BJ)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_pool_1allocator_1_1Charalloc
  (JNIEnv *, jclass, jbyteArray, jlong);

/*
 * Class:     Java_Main
 * Method:    pool_allocator_construct
 * Signature: ([B[B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_pool_1allocator_1construct
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    pool_allocator_destroy
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_pool_1allocator_1destroy
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    pool_allocator_max_size
 * Signature: ([B)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_pool_1allocator_1max_1size___3B
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    pool_allocator_max_size
 * Signature: ([BI)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_pool_1allocator_1max_1size___3BI
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    pool_allocator_getAllocator
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_pool_1allocator_1getAllocator
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    pool_allocator_operatorEqual
 * Signature: ([B[B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_pool_1allocator_1operatorEqual
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    pool_allocator_operatorNotEqual
 * Signature: ([B[B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_pool_1allocator_1operatorNotEqual
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    IntKeyedIntArrayCMap
 * Signature: ()[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_IntKeyedIntArrayCMap
  (JNIEnv *, jclass);

/*
 * Class:     Java_Main
 * Method:    IntKeyedIntArrayCMap_size
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_IntKeyedIntArrayCMap_1size
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    IntKeyedIntArrayCMap_isEmpty
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_IntKeyedIntArrayCMap_1isEmpty
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    IntKeyedIntArrayCMap_containsKey
 * Signature: ([BI)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_IntKeyedIntArrayCMap_1containsKey
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    IntKeyedIntArrayCMap_containsValue
 * Signature: ([B[I)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_IntKeyedIntArrayCMap_1containsValue
  (JNIEnv *, jclass, jbyteArray, jintArray);

/*
 * Class:     Java_Main
 * Method:    IntKeyedIntArrayCMap_get
 * Signature: ([BI)[I
 */
JNIEXPORT jintArray JNICALL Java_Java_Main_IntKeyedIntArrayCMap_1get
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    IntKeyedIntArrayCMap_put
 * Signature: ([BI[I)[I
 */
JNIEXPORT jintArray JNICALL Java_Java_Main_IntKeyedIntArrayCMap_1put
  (JNIEnv *, jclass, jbyteArray, jint, jintArray);

/*
 * Class:     Java_Main
 * Method:    IntKeyedIntArrayCMap_remove
 * Signature: ([BI)[I
 */
JNIEXPORT jintArray JNICALL Java_Java_Main_IntKeyedIntArrayCMap_1remove
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    IntKeyedIntArrayCMap_clear
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_IntKeyedIntArrayCMap_1clear
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    IntKeyedIntArrayCMap_keys
 * Signature: ([B)[I
 */
JNIEXPORT jintArray JNICALL Java_Java_Main_IntKeyedIntArrayCMap_1keys
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    IntKeyedIntArrayCMap_values
 * Signature: ([B)[[I
 */
JNIEXPORT jobjectArray JNICALL Java_Java_Main_IntKeyedIntArrayCMap_1values
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    IntKeyedIntArrayCMap_entries
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_IntKeyedIntArrayCMap_1entries
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    IntKeyedIntArrayCEntry
 * Signature: ()[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_IntKeyedIntArrayCEntry
  (JNIEnv *, jclass);

/*
 * Class:     Java_Main
 * Method:    IntKeyedIntArrayCEntry_getKey
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_IntKeyedIntArrayCEntry_1getKey
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    IntKeyedIntArrayCEntry_getValue
 * Signature: ([B)[I
 */
JNIEXPORT jintArray JNICALL Java_Java_Main_IntKeyedIntArrayCEntry_1getValue
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    IntKeyedIntArrayCEntry_setValue
 * Signature: ([B[I)[I
 */
JNIEXPORT jintArray JNICALL Java_Java_Main_IntKeyedIntArrayCEntry_1setValue
  (JNIEnv *, jclass, jbyteArray, jintArray);

/*
 * Class:     Java_Main
 * Method:    IntKeyedCMap
 * Signature: ()[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_IntKeyedCMap
  (JNIEnv *, jclass);

/*
 * Class:     Java_Main
 * Method:    IntKeyedCMap_size
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_IntKeyedCMap_1size
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    IntKeyedCMap_isEmpty
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_IntKeyedCMap_1isEmpty
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    IntKeyedCMap_containsKey
 * Signature: ([BI)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_IntKeyedCMap_1containsKey
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    IntKeyedCMap_containsValue
 * Signature: ([B[B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_IntKeyedCMap_1containsValue
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    IntKeyedCMap_get
 * Signature: ([BI)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_IntKeyedCMap_1get
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    IntKeyedCMap_put
 * Signature: ([BI[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_IntKeyedCMap_1put
  (JNIEnv *, jclass, jbyteArray, jint, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    IntKeyedCMap_remove
 * Signature: ([BI)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_IntKeyedCMap_1remove
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    IntKeyedCMap_clear
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_IntKeyedCMap_1clear
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    IntKeyedCMap_keys
 * Signature: ([B)[I
 */
JNIEXPORT jintArray JNICALL Java_Java_Main_IntKeyedCMap_1keys
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    IntKeyedCMap_values
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_IntKeyedCMap_1values
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    IntKeyedCMap_entries
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_IntKeyedCMap_1entries
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    IntKeyedCEntry
 * Signature: ()[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_IntKeyedCEntry
  (JNIEnv *, jclass);

/*
 * Class:     Java_Main
 * Method:    IntKeyedCEntry_getKey
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_IntKeyedCEntry_1getKey
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    IntKeyedCEntry_getValue
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_IntKeyedCEntry_1getValue
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    IntKeyedCEntry_setValue
 * Signature: ([B[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_IntKeyedCEntry_1setValue
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    IntCMap
 * Signature: ()[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_IntCMap
  (JNIEnv *, jclass);

/*
 * Class:     Java_Main
 * Method:    IntCMap_size
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_IntCMap_1size
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    IntCMap_isEmpty
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_IntCMap_1isEmpty
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    IntCMap_containsKey
 * Signature: ([B[B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_IntCMap_1containsKey
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    IntCMap_containsValue
 * Signature: ([BI)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_IntCMap_1containsValue
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    IntCMap_get
 * Signature: ([B[B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_IntCMap_1get
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    IntCMap_put
 * Signature: ([B[BI)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_IntCMap_1put
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    IntCMap_remove
 * Signature: ([B[B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_IntCMap_1remove
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    IntCMap_clear
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_IntCMap_1clear
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    IntCMap_keySet
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_IntCMap_1keySet
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    IntCMap_values
 * Signature: ([B)[I
 */
JNIEXPORT jintArray JNICALL Java_Java_Main_IntCMap_1values
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    IntCMap_entries
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_IntCMap_1entries
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    IntCEntry
 * Signature: ()[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_IntCEntry
  (JNIEnv *, jclass);

/*
 * Class:     Java_Main
 * Method:    IntCEntry_getKey
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_IntCEntry_1getKey
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    IntCEntry_getValue
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_IntCEntry_1getValue
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    IntCEntry_setValue
 * Signature: ([BI)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_IntCEntry_1setValue
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    CMap
 * Signature: ()[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_CMap
  (JNIEnv *, jclass);

/*
 * Class:     Java_Main
 * Method:    CMap_size
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_CMap_1size
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    CMap_isEmpty
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_CMap_1isEmpty
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    CMap_containsKey
 * Signature: ([B[B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_CMap_1containsKey
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    CMap_containsValue
 * Signature: ([B[B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_CMap_1containsValue
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    CMap_get
 * Signature: ([B[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_CMap_1get
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    CMap_put
 * Signature: ([B[B[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_CMap_1put
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    CMap_remove
 * Signature: ([B[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_CMap_1remove
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    CMap_clear
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_CMap_1clear
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    CMap_keySet
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_CMap_1keySet
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    CMap_values
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_CMap_1values
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    CMap_entries
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_CMap_1entries
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    CEntry
 * Signature: ()[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_CEntry
  (JNIEnv *, jclass);

/*
 * Class:     Java_Main
 * Method:    CEntry_getKey
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_CEntry_1getKey
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    CEntry_getValue
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_CEntry_1getValue
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    CEntry_setValue
 * Signature: ([B[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_CEntry_1setValue
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    CPair
 * Signature: ()[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_CPair
  (JNIEnv *, jclass);

/*
 * Class:     Java_Main
 * Method:    CPair_getFirst
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_CPair_1getFirst
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    CPair_getLast
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_CPair_1getLast
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    CPair_setFirst
 * Signature: ([B[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_CPair_1setFirst
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    CPair_setLast
 * Signature: ([B[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_CPair_1setLast
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    CList
 * Signature: ()[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_CList
  (JNIEnv *, jclass);

/*
 * Class:     Java_Main
 * Method:    CList_size
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_CList_1size
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    CList_isEmpty
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_CList_1isEmpty
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    CList_contains
 * Signature: ([B[B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_CList_1contains
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    CList_iterator
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_CList_1iterator
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    CList_add
 * Signature: ([B[B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_CList_1add___3B_3B
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    CList_remove
 * Signature: ([B[B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_CList_1remove___3B_3B
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    CList_insert
 * Signature: ([BI[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_CList_1insert
  (JNIEnv *, jclass, jbyteArray, jint, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    CList_clear
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_CList_1clear
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    CList_get
 * Signature: ([BI)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_CList_1get
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    CList_set
 * Signature: ([BI[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_CList_1set
  (JNIEnv *, jclass, jbyteArray, jint, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    CList_add
 * Signature: ([BI[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_CList_1add___3BI_3B
  (JNIEnv *, jclass, jbyteArray, jint, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    CList_remove
 * Signature: ([BI)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_CList_1remove___3BI
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    CList_indexOf
 * Signature: ([B[B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_CList_1indexOf
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    CList_lastIndexOf
 * Signature: ([B[B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_CList_1lastIndexOf
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    CList_listIterator
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_CList_1listIterator___3B
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    CList_listIterator
 * Signature: ([BI)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_CList_1listIterator___3BI
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    CVector
 * Signature: ()[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_CVector
  (JNIEnv *, jclass);

/*
 * Class:     Java_Main
 * Method:    CVector_size
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_CVector_1size
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    CVector_isEmpty
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_CVector_1isEmpty
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    CVector_contains
 * Signature: ([B[B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_CVector_1contains
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    CVector_iterator
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_CVector_1iterator
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    CVector_add
 * Signature: ([B[B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_CVector_1add___3B_3B
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    CVector_remove
 * Signature: ([B[B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_CVector_1remove___3B_3B
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    CVector_insert
 * Signature: ([BI[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_CVector_1insert
  (JNIEnv *, jclass, jbyteArray, jint, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    CVector_clear
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_CVector_1clear
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    CVector_get
 * Signature: ([BI)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_CVector_1get
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    CVector_set
 * Signature: ([BI[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_CVector_1set
  (JNIEnv *, jclass, jbyteArray, jint, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    CVector_add
 * Signature: ([BI[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_CVector_1add___3BI_3B
  (JNIEnv *, jclass, jbyteArray, jint, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    CVector_remove
 * Signature: ([BI)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_CVector_1remove___3BI
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    CVector_indexOf
 * Signature: ([B[B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_CVector_1indexOf
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    CVector_lastIndexOf
 * Signature: ([B[B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_CVector_1lastIndexOf
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    CVector_listIterator
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_CVector_1listIterator___3B
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    CVector_listIterator
 * Signature: ([BI)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_CVector_1listIterator___3BI
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    CSet
 * Signature: ()[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_CSet
  (JNIEnv *, jclass);

/*
 * Class:     Java_Main
 * Method:    CSet_size
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_CSet_1size
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    CSet_isEmpty
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_CSet_1isEmpty
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    CSet_contains
 * Signature: ([B[B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_CSet_1contains
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    CSet_iterator
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_CSet_1iterator
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    CSet_add
 * Signature: ([B[B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_CSet_1add
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    CSet_remove
 * Signature: ([B[B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_CSet_1remove
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    CSet_clear
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_CSet_1clear
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    CIterator_hasNext
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_CIterator_1hasNext
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    CIterator_next
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_CIterator_1next
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    CListIterator_hasPrevious
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_CListIterator_1hasPrevious
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    CListIterator_previous
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_CListIterator_1previous
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    CListIterator_nextIndex
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_CListIterator_1nextIndex
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    CListIterator_previousIndex
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_CListIterator_1previousIndex
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    CListIterator_remove
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_CListIterator_1remove
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    CListIterator_set
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_CListIterator_1set
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    CListIterator_add
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_CListIterator_1add
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    CPrimitiveIterator_OfDouble_hasNext
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_CPrimitiveIterator_1OfDouble_1hasNext
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    CPrimitiveIterator_OfDouble_next
 * Signature: ([B)D
 */
JNIEXPORT jdouble JNICALL Java_Java_Main_CPrimitiveIterator_1OfDouble_1next
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    CPrimitiveIterator_OfInt_hasNext
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_CPrimitiveIterator_1OfInt_1hasNext
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    CPrimitiveIterator_OfInt_next
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_CPrimitiveIterator_1OfInt_1next
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    CPrimitiveIterator_OfLong_hasNext
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_CPrimitiveIterator_1OfLong_1hasNext
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    CPrimitiveIterator_OfLong_next
 * Signature: ([B)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_CPrimitiveIterator_1OfLong_1next
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    SpvBuildLogger
 * Signature: ()[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_SpvBuildLogger
  (JNIEnv *, jclass);

/*
 * Class:     Java_Main
 * Method:    SpvBuildLogger_tbdFunctionality
 * Signature: ([BLjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_SpvBuildLogger_1tbdFunctionality
  (JNIEnv *, jclass, jbyteArray, jstring);

/*
 * Class:     Java_Main
 * Method:    SpvBuildLogger_missingFunctionality
 * Signature: ([BLjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_SpvBuildLogger_1missingFunctionality
  (JNIEnv *, jclass, jbyteArray, jstring);

/*
 * Class:     Java_Main
 * Method:    SpvBuildLogger_warning
 * Signature: ([BLjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_SpvBuildLogger_1warning
  (JNIEnv *, jclass, jbyteArray, jstring);

/*
 * Class:     Java_Main
 * Method:    SpvBuildLogger_error
 * Signature: ([BLjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_SpvBuildLogger_1error
  (JNIEnv *, jclass, jbyteArray, jstring);

/*
 * Class:     Java_Main
 * Method:    SpvBuildLogger_getAllMessages
 * Signature: ([B)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_Java_Main_SpvBuildLogger_1getAllMessages
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    spirvbin_t
 * Signature: (I)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_spirvbin_1t
  (JNIEnv *, jclass, jint);

/*
 * Class:     Java_Main
 * Method:    spirvbin_t_remap
 * Signature: ([B[JJ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_spirvbin_1t_1remap
  (JNIEnv *, jclass, jbyteArray, jlongArray, jlong);

/*
 * Class:     Java_Main
 * Method:    spirvbin_t_registerErrorHandler
 * Signature: (LJava/Main/Void_String;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_spirvbin_1t_1registerErrorHandler
  (JNIEnv *, jclass, jobject);

/*
 * Class:     Java_Main
 * Method:    spirvbin_t_registerLogHandler
 * Signature: (LJava/Main/Void_String;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_spirvbin_1t_1registerLogHandler
  (JNIEnv *, jclass, jobject);

/*
 * Class:     Java_Main
 * Method:    Builder
 * Signature: (JJ[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_Builder
  (JNIEnv *, jclass, jlong, jlong, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    Builder_getSpvVersion
 * Signature: ([B)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_Builder_1getSpvVersion
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    Builder_setSource
 * Signature: ([BII)V
 */
JNIEXPORT void JNICALL Java_Java_Main_Builder_1setSource
  (JNIEnv *, jclass, jbyteArray, jint, jint);

/*
 * Class:     Java_Main
 * Method:    Builder_getStringId
 * Signature: ([BLjava/lang/String;)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_Builder_1getStringId
  (JNIEnv *, jclass, jbyteArray, jstring);

/*
 * Class:     Java_Main
 * Method:    Builder_setSourceFile
 * Signature: ([BLjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_Builder_1setSourceFile
  (JNIEnv *, jclass, jbyteArray, jstring);

/*
 * Class:     Java_Main
 * Method:    Builder_setSourceText
 * Signature: ([BLjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_Builder_1setSourceText
  (JNIEnv *, jclass, jbyteArray, jstring);

/*
 * Class:     Java_Main
 * Method:    Builder_addSourceExtension
 * Signature: ([BLjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_Builder_1addSourceExtension
  (JNIEnv *, jclass, jbyteArray, jstring);

/*
 * Class:     Java_Main
 * Method:    Builder_addModuleProcessed
 * Signature: ([BLjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_Builder_1addModuleProcessed
  (JNIEnv *, jclass, jbyteArray, jstring);

/*
 * Class:     Java_Main
 * Method:    Builder_setEmitOpLines
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_Builder_1setEmitOpLines
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    Builder_addExtension
 * Signature: ([BLjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_Builder_1addExtension
  (JNIEnv *, jclass, jbyteArray, jstring);

/*
 * Class:     Java_Main
 * Method:    Builder_removeExtension
 * Signature: ([BLjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_Builder_1removeExtension
  (JNIEnv *, jclass, jbyteArray, jstring);

/*
 * Class:     Java_Main
 * Method:    Builder_addIncorporatedExtension
 * Signature: ([BLjava/lang/String;I)V
 */
JNIEXPORT void JNICALL Java_Java_Main_Builder_1addIncorporatedExtension
  (JNIEnv *, jclass, jbyteArray, jstring, jint);

/*
 * Class:     Java_Main
 * Method:    Builder_promoteIncorporatedExtension
 * Signature: ([BLjava/lang/String;Ljava/lang/String;I)V
 */
JNIEXPORT void JNICALL Java_Java_Main_Builder_1promoteIncorporatedExtension
  (JNIEnv *, jclass, jbyteArray, jstring, jstring, jint);

/*
 * Class:     Java_Main
 * Method:    Builder_addInclude
 * Signature: ([BLjava/lang/String;Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_Builder_1addInclude
  (JNIEnv *, jclass, jbyteArray, jstring, jstring);

/*
 * Class:     Java_Main
 * Method:    Builder_import
 * Signature: ([BLjava/lang/String;)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_Builder_1import
  (JNIEnv *, jclass, jbyteArray, jstring);

/*
 * Class:     Java_Main
 * Method:    Builder_setMemoryModel
 * Signature: ([BII)V
 */
JNIEXPORT void JNICALL Java_Java_Main_Builder_1setMemoryModel
  (JNIEnv *, jclass, jbyteArray, jint, jint);

/*
 * Class:     Java_Main
 * Method:    Builder_addCapability
 * Signature: ([BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_Builder_1addCapability
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    Builder_getUniqueId
 * Signature: ([B)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_Builder_1getUniqueId
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    Builder_getUniqueIds
 * Signature: ([BI)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_Builder_1getUniqueIds
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    Builder_setLine
 * Signature: ([BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_Builder_1setLine___3BI
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    Builder_setLine
 * Signature: ([BILjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_Builder_1setLine___3BILjava_lang_String_2
  (JNIEnv *, jclass, jbyteArray, jint, jstring);

/*
 * Class:     Java_Main
 * Method:    Builder_addLine
 * Signature: ([BJII)V
 */
JNIEXPORT void JNICALL Java_Java_Main_Builder_1addLine
  (JNIEnv *, jclass, jbyteArray, jlong, jint, jint);

/*
 * Class:     Java_Main
 * Method:    Builder_makeVoidType
 * Signature: ([B)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_Builder_1makeVoidType
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    Builder_makeBoolType
 * Signature: ([B)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_Builder_1makeBoolType
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    Builder_makePointer
 * Signature: ([BIJ)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_Builder_1makePointer
  (JNIEnv *, jclass, jbyteArray, jint, jlong);

/*
 * Class:     Java_Main
 * Method:    Builder_makeForwardPointer
 * Signature: ([BI)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_Builder_1makeForwardPointer
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    Builder_makePointerFromForwardPointer
 * Signature: ([BIJJ)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_Builder_1makePointerFromForwardPointer
  (JNIEnv *, jclass, jbyteArray, jint, jlong, jlong);

/*
 * Class:     Java_Main
 * Method:    Builder_makeIntegerType
 * Signature: ([BIZ)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_Builder_1makeIntegerType
  (JNIEnv *, jclass, jbyteArray, jint, jboolean);

/*
 * Class:     Java_Main
 * Method:    Builder_makeIntType
 * Signature: ([BI)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_Builder_1makeIntType
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    Builder_makeUintType
 * Signature: ([BI)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_Builder_1makeUintType
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    Builder_makeFloatType
 * Signature: ([BI)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_Builder_1makeFloatType
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    Builder_makeStructType
 * Signature: ([B[JLjava/lang/String;)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_Builder_1makeStructType
  (JNIEnv *, jclass, jbyteArray, jlongArray, jstring);

/*
 * Class:     Java_Main
 * Method:    Builder_makeStructResultType
 * Signature: ([BJJ)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_Builder_1makeStructResultType
  (JNIEnv *, jclass, jbyteArray, jlong, jlong);

/*
 * Class:     Java_Main
 * Method:    Builder_makeVectorType
 * Signature: ([BJI)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_Builder_1makeVectorType
  (JNIEnv *, jclass, jbyteArray, jlong, jint);

/*
 * Class:     Java_Main
 * Method:    Builder_makeMatrixType
 * Signature: ([BJII)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_Builder_1makeMatrixType
  (JNIEnv *, jclass, jbyteArray, jlong, jint, jint);

/*
 * Class:     Java_Main
 * Method:    Builder_makeArrayType
 * Signature: ([BJJI)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_Builder_1makeArrayType
  (JNIEnv *, jclass, jbyteArray, jlong, jlong, jint);

/*
 * Class:     Java_Main
 * Method:    Builder_makeRuntimeArray
 * Signature: ([BJ)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_Builder_1makeRuntimeArray
  (JNIEnv *, jclass, jbyteArray, jlong);

/*
 * Class:     Java_Main
 * Method:    Builder_makeFunctionType
 * Signature: ([BJ[J)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_Builder_1makeFunctionType
  (JNIEnv *, jclass, jbyteArray, jlong, jlongArray);

/*
 * Class:     Java_Main
 * Method:    Builder_makeImageType
 * Signature: ([BJIZZZJI)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_Builder_1makeImageType
  (JNIEnv *, jclass, jbyteArray, jlong, jint, jboolean, jboolean, jboolean, jlong, jint);

/*
 * Class:     Java_Main
 * Method:    Builder_makeSamplerType
 * Signature: ([B)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_Builder_1makeSamplerType
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    Builder_makeSampledImageType
 * Signature: ([BJ)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_Builder_1makeSampledImageType
  (JNIEnv *, jclass, jbyteArray, jlong);

/*
 * Class:     Java_Main
 * Method:    Builder_makeCooperativeMatrixType
 * Signature: ([BJJJJ)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_Builder_1makeCooperativeMatrixType
  (JNIEnv *, jclass, jbyteArray, jlong, jlong, jlong, jlong);

/*
 * Class:     Java_Main
 * Method:    Builder_makeAccelerationStructureType
 * Signature: ([B)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_Builder_1makeAccelerationStructureType
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    Builder_makeRayQueryType
 * Signature: ([B)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_Builder_1makeRayQueryType
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    Builder_getTypeId
 * Signature: ([BJ)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_Builder_1getTypeId
  (JNIEnv *, jclass, jbyteArray, jlong);

/*
 * Class:     Java_Main
 * Method:    Builder_getDerefTypeId
 * Signature: ([BJ)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_Builder_1getDerefTypeId
  (JNIEnv *, jclass, jbyteArray, jlong);

/*
 * Class:     Java_Main
 * Method:    Builder_getOpCode
 * Signature: ([BJ)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_Builder_1getOpCode
  (JNIEnv *, jclass, jbyteArray, jlong);

/*
 * Class:     Java_Main
 * Method:    Builder_getTypeClass
 * Signature: ([BJ)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_Builder_1getTypeClass
  (JNIEnv *, jclass, jbyteArray, jlong);

/*
 * Class:     Java_Main
 * Method:    Builder_getMostBasicTypeClass
 * Signature: ([BJ)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_Builder_1getMostBasicTypeClass
  (JNIEnv *, jclass, jbyteArray, jlong);

/*
 * Class:     Java_Main
 * Method:    Builder_getNumComponents
 * Signature: ([BJ)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_Builder_1getNumComponents
  (JNIEnv *, jclass, jbyteArray, jlong);

/*
 * Class:     Java_Main
 * Method:    Builder_getNumTypeConstituents
 * Signature: ([BJ)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_Builder_1getNumTypeConstituents
  (JNIEnv *, jclass, jbyteArray, jlong);

/*
 * Class:     Java_Main
 * Method:    Builder_getNumTypeComponents
 * Signature: ([BJ)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_Builder_1getNumTypeComponents
  (JNIEnv *, jclass, jbyteArray, jlong);

/*
 * Class:     Java_Main
 * Method:    Builder_getScalarTypeId
 * Signature: ([BJ)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_Builder_1getScalarTypeId
  (JNIEnv *, jclass, jbyteArray, jlong);

/*
 * Class:     Java_Main
 * Method:    Builder_getContainedTypeId
 * Signature: ([BJ)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_Builder_1getContainedTypeId___3BJ
  (JNIEnv *, jclass, jbyteArray, jlong);

/*
 * Class:     Java_Main
 * Method:    Builder_getContainedTypeId
 * Signature: ([BJI)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_Builder_1getContainedTypeId___3BJI
  (JNIEnv *, jclass, jbyteArray, jlong, jint);

/*
 * Class:     Java_Main
 * Method:    Builder_getTypeStorageClass
 * Signature: ([BJ)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_Builder_1getTypeStorageClass
  (JNIEnv *, jclass, jbyteArray, jlong);

/*
 * Class:     Java_Main
 * Method:    Builder_getImageTypeFormat
 * Signature: ([BJ)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_Builder_1getImageTypeFormat
  (JNIEnv *, jclass, jbyteArray, jlong);

/*
 * Class:     Java_Main
 * Method:    Builder_isPointer
 * Signature: ([BJ)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_Builder_1isPointer
  (JNIEnv *, jclass, jbyteArray, jlong);

/*
 * Class:     Java_Main
 * Method:    Builder_isScalar
 * Signature: ([BJ)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_Builder_1isScalar
  (JNIEnv *, jclass, jbyteArray, jlong);

/*
 * Class:     Java_Main
 * Method:    Builder_isVector
 * Signature: ([BJ)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_Builder_1isVector
  (JNIEnv *, jclass, jbyteArray, jlong);

/*
 * Class:     Java_Main
 * Method:    Builder_isMatrix
 * Signature: ([BJ)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_Builder_1isMatrix
  (JNIEnv *, jclass, jbyteArray, jlong);

/*
 * Class:     Java_Main
 * Method:    Builder_isCooperativeMatrix
 * Signature: ([BJ)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_Builder_1isCooperativeMatrix
  (JNIEnv *, jclass, jbyteArray, jlong);

/*
 * Class:     Java_Main
 * Method:    Builder_isAggregate
 * Signature: ([BJ)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_Builder_1isAggregate
  (JNIEnv *, jclass, jbyteArray, jlong);

/*
 * Class:     Java_Main
 * Method:    Builder_isSampledImage
 * Signature: ([BJ)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_Builder_1isSampledImage
  (JNIEnv *, jclass, jbyteArray, jlong);

/*
 * Class:     Java_Main
 * Method:    Builder_isBoolType
 * Signature: ([BJ)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_Builder_1isBoolType
  (JNIEnv *, jclass, jbyteArray, jlong);

/*
 * Class:     Java_Main
 * Method:    Builder_isIntType
 * Signature: ([BJ)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_Builder_1isIntType
  (JNIEnv *, jclass, jbyteArray, jlong);

/*
 * Class:     Java_Main
 * Method:    Builder_isUintType
 * Signature: ([BJ)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_Builder_1isUintType
  (JNIEnv *, jclass, jbyteArray, jlong);

/*
 * Class:     Java_Main
 * Method:    Builder_isFloatType
 * Signature: ([BJ)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_Builder_1isFloatType
  (JNIEnv *, jclass, jbyteArray, jlong);

/*
 * Class:     Java_Main
 * Method:    Builder_isPointerType
 * Signature: ([BJ)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_Builder_1isPointerType
  (JNIEnv *, jclass, jbyteArray, jlong);

/*
 * Class:     Java_Main
 * Method:    Builder_isScalarType
 * Signature: ([BJ)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_Builder_1isScalarType
  (JNIEnv *, jclass, jbyteArray, jlong);

/*
 * Class:     Java_Main
 * Method:    Builder_isVectorType
 * Signature: ([BJ)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_Builder_1isVectorType
  (JNIEnv *, jclass, jbyteArray, jlong);

/*
 * Class:     Java_Main
 * Method:    Builder_isMatrixType
 * Signature: ([BJ)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_Builder_1isMatrixType
  (JNIEnv *, jclass, jbyteArray, jlong);

/*
 * Class:     Java_Main
 * Method:    Builder_isStructType
 * Signature: ([BJ)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_Builder_1isStructType
  (JNIEnv *, jclass, jbyteArray, jlong);

/*
 * Class:     Java_Main
 * Method:    Builder_isArrayType
 * Signature: ([BJ)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_Builder_1isArrayType
  (JNIEnv *, jclass, jbyteArray, jlong);

/*
 * Class:     Java_Main
 * Method:    Builder_isCooperativeMatrixType
 * Signature: ([BJ)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_Builder_1isCooperativeMatrixType
  (JNIEnv *, jclass, jbyteArray, jlong);

/*
 * Class:     Java_Main
 * Method:    Builder_isAggregateType
 * Signature: ([BJ)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_Builder_1isAggregateType
  (JNIEnv *, jclass, jbyteArray, jlong);

/*
 * Class:     Java_Main
 * Method:    Builder_isImageType
 * Signature: ([BJ)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_Builder_1isImageType
  (JNIEnv *, jclass, jbyteArray, jlong);

/*
 * Class:     Java_Main
 * Method:    Builder_isSamplerType
 * Signature: ([BJ)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_Builder_1isSamplerType
  (JNIEnv *, jclass, jbyteArray, jlong);

/*
 * Class:     Java_Main
 * Method:    Builder_isSampledImageType
 * Signature: ([BJ)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_Builder_1isSampledImageType
  (JNIEnv *, jclass, jbyteArray, jlong);

/*
 * Class:     Java_Main
 * Method:    Builder_containsType
 * Signature: ([BJIJ)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_Builder_1containsType
  (JNIEnv *, jclass, jbyteArray, jlong, jint, jlong);

/*
 * Class:     Java_Main
 * Method:    Builder_containsPhysicalStorageBufferOrArray
 * Signature: ([BJ)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_Builder_1containsPhysicalStorageBufferOrArray
  (JNIEnv *, jclass, jbyteArray, jlong);

/*
 * Class:     Java_Main
 * Method:    Builder_isConstantOpCode
 * Signature: ([BI)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_Builder_1isConstantOpCode
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    Builder_isSpecConstantOpCode
 * Signature: ([BI)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_Builder_1isSpecConstantOpCode
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    Builder_isConstant
 * Signature: ([BJ)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_Builder_1isConstant
  (JNIEnv *, jclass, jbyteArray, jlong);

/*
 * Class:     Java_Main
 * Method:    Builder_isConstantScalar
 * Signature: ([BJ)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_Builder_1isConstantScalar
  (JNIEnv *, jclass, jbyteArray, jlong);

/*
 * Class:     Java_Main
 * Method:    Builder_isSpecConstant
 * Signature: ([BJ)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_Builder_1isSpecConstant
  (JNIEnv *, jclass, jbyteArray, jlong);

/*
 * Class:     Java_Main
 * Method:    Builder_getConstantScalar
 * Signature: ([BJ)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_Builder_1getConstantScalar
  (JNIEnv *, jclass, jbyteArray, jlong);

/*
 * Class:     Java_Main
 * Method:    Builder_getStorageClass
 * Signature: ([BJ)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_Builder_1getStorageClass
  (JNIEnv *, jclass, jbyteArray, jlong);

/*
 * Class:     Java_Main
 * Method:    Builder_isVariableOpCode
 * Signature: ([BI)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_Builder_1isVariableOpCode
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    Builder_isVariable
 * Signature: ([BJ)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_Builder_1isVariable
  (JNIEnv *, jclass, jbyteArray, jlong);

/*
 * Class:     Java_Main
 * Method:    Builder_isGlobalStorage
 * Signature: ([BJ)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_Builder_1isGlobalStorage
  (JNIEnv *, jclass, jbyteArray, jlong);

/*
 * Class:     Java_Main
 * Method:    Builder_isGlobalVariable
 * Signature: ([BJ)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_Builder_1isGlobalVariable
  (JNIEnv *, jclass, jbyteArray, jlong);

/*
 * Class:     Java_Main
 * Method:    Builder_isValidInitializer
 * Signature: ([BJ)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_Builder_1isValidInitializer
  (JNIEnv *, jclass, jbyteArray, jlong);

/*
 * Class:     Java_Main
 * Method:    Builder_getScalarTypeWidth
 * Signature: ([BJ)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_Builder_1getScalarTypeWidth
  (JNIEnv *, jclass, jbyteArray, jlong);

/*
 * Class:     Java_Main
 * Method:    Builder_getTypeNumColumns
 * Signature: ([BJ)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_Builder_1getTypeNumColumns
  (JNIEnv *, jclass, jbyteArray, jlong);

/*
 * Class:     Java_Main
 * Method:    Builder_getNumColumns
 * Signature: ([BJ)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_Builder_1getNumColumns
  (JNIEnv *, jclass, jbyteArray, jlong);

/*
 * Class:     Java_Main
 * Method:    Builder_getTypeNumRows
 * Signature: ([BJ)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_Builder_1getTypeNumRows
  (JNIEnv *, jclass, jbyteArray, jlong);

/*
 * Class:     Java_Main
 * Method:    Builder_getNumRows
 * Signature: ([BJ)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_Builder_1getNumRows
  (JNIEnv *, jclass, jbyteArray, jlong);

/*
 * Class:     Java_Main
 * Method:    Builder_getTypeDimensionality
 * Signature: ([BJ)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_Builder_1getTypeDimensionality
  (JNIEnv *, jclass, jbyteArray, jlong);

/*
 * Class:     Java_Main
 * Method:    Builder_getImageType
 * Signature: ([BJ)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_Builder_1getImageType
  (JNIEnv *, jclass, jbyteArray, jlong);

/*
 * Class:     Java_Main
 * Method:    Builder_isArrayedImageType
 * Signature: ([BJ)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_Builder_1isArrayedImageType
  (JNIEnv *, jclass, jbyteArray, jlong);

/*
 * Class:     Java_Main
 * Method:    Builder_makeBoolConstant
 * Signature: ([BZZ)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_Builder_1makeBoolConstant
  (JNIEnv *, jclass, jbyteArray, jboolean, jboolean);

/*
 * Class:     Java_Main
 * Method:    Builder_makeInt8Constant
 * Signature: ([BIZ)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_Builder_1makeInt8Constant
  (JNIEnv *, jclass, jbyteArray, jint, jboolean);

/*
 * Class:     Java_Main
 * Method:    Builder_makeUint8Constant
 * Signature: ([BJZ)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_Builder_1makeUint8Constant
  (JNIEnv *, jclass, jbyteArray, jlong, jboolean);

/*
 * Class:     Java_Main
 * Method:    Builder_makeInt16Constant
 * Signature: ([BIZ)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_Builder_1makeInt16Constant
  (JNIEnv *, jclass, jbyteArray, jint, jboolean);

/*
 * Class:     Java_Main
 * Method:    Builder_makeUint16Constant
 * Signature: ([BJZ)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_Builder_1makeUint16Constant
  (JNIEnv *, jclass, jbyteArray, jlong, jboolean);

/*
 * Class:     Java_Main
 * Method:    Builder_makeIntConstant
 * Signature: ([BIZ)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_Builder_1makeIntConstant
  (JNIEnv *, jclass, jbyteArray, jint, jboolean);

/*
 * Class:     Java_Main
 * Method:    Builder_makeUintConstant
 * Signature: ([BJZ)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_Builder_1makeUintConstant
  (JNIEnv *, jclass, jbyteArray, jlong, jboolean);

/*
 * Class:     Java_Main
 * Method:    Builder_makeInt64Constant
 * Signature: ([BLjava/math/BigInteger;Z)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_Builder_1makeInt64Constant
  (JNIEnv *, jclass, jbyteArray, jobject, jboolean);

/*
 * Class:     Java_Main
 * Method:    Builder_makeUint64Constant
 * Signature: ([BLjava/math/BigInteger;Z)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_Builder_1makeUint64Constant
  (JNIEnv *, jclass, jbyteArray, jobject, jboolean);

/*
 * Class:     Java_Main
 * Method:    Builder_makeFloatConstant
 * Signature: ([BFZ)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_Builder_1makeFloatConstant
  (JNIEnv *, jclass, jbyteArray, jfloat, jboolean);

/*
 * Class:     Java_Main
 * Method:    Builder_makeDoubleConstant
 * Signature: ([BDZ)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_Builder_1makeDoubleConstant
  (JNIEnv *, jclass, jbyteArray, jdouble, jboolean);

/*
 * Class:     Java_Main
 * Method:    Builder_makeFloat16Constant
 * Signature: ([BFZ)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_Builder_1makeFloat16Constant
  (JNIEnv *, jclass, jbyteArray, jfloat, jboolean);

/*
 * Class:     Java_Main
 * Method:    Builder_makeFpConstant
 * Signature: ([BJDZ)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_Builder_1makeFpConstant
  (JNIEnv *, jclass, jbyteArray, jlong, jdouble, jboolean);

/*
 * Class:     Java_Main
 * Method:    Builder_makeCompositeConstant
 * Signature: ([BJ[JZ)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_Builder_1makeCompositeConstant
  (JNIEnv *, jclass, jbyteArray, jlong, jlongArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    Builder_addEntryPoint
 * Signature: ([BI[BLjava/lang/String;)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_Builder_1addEntryPoint
  (JNIEnv *, jclass, jbyteArray, jint, jbyteArray, jstring);

/*
 * Class:     Java_Main
 * Method:    Builder_addExecutionMode
 * Signature: ([B[BIIII)V
 */
JNIEXPORT void JNICALL Java_Java_Main_Builder_1addExecutionMode
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jint, jint, jint, jint);

/*
 * Class:     Java_Main
 * Method:    Builder_addName
 * Signature: ([BJLjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_Builder_1addName
  (JNIEnv *, jclass, jbyteArray, jlong, jstring);

/*
 * Class:     Java_Main
 * Method:    Builder_addMemberName
 * Signature: ([BJILjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_Builder_1addMemberName
  (JNIEnv *, jclass, jbyteArray, jlong, jint, jstring);

/*
 * Class:     Java_Main
 * Method:    Builder_addDecoration
 * Signature: ([BJII)V
 */
JNIEXPORT void JNICALL Java_Java_Main_Builder_1addDecoration___3BJII
  (JNIEnv *, jclass, jbyteArray, jlong, jint, jint);

/*
 * Class:     Java_Main
 * Method:    Builder_addDecoration
 * Signature: ([BJILjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_Builder_1addDecoration___3BJILjava_lang_String_2
  (JNIEnv *, jclass, jbyteArray, jlong, jint, jstring);

/*
 * Class:     Java_Main
 * Method:    Builder_addDecorationId
 * Signature: ([BJIJ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_Builder_1addDecorationId
  (JNIEnv *, jclass, jbyteArray, jlong, jint, jlong);

/*
 * Class:     Java_Main
 * Method:    Builder_addMemberDecoration
 * Signature: ([BJJII)V
 */
JNIEXPORT void JNICALL Java_Java_Main_Builder_1addMemberDecoration___3BJJII
  (JNIEnv *, jclass, jbyteArray, jlong, jlong, jint, jint);

/*
 * Class:     Java_Main
 * Method:    Builder_addMemberDecoration
 * Signature: ([BJJILjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_Builder_1addMemberDecoration___3BJJILjava_lang_String_2
  (JNIEnv *, jclass, jbyteArray, jlong, jlong, jint, jstring);

/*
 * Class:     Java_Main
 * Method:    Builder_setBuildPoint
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_Builder_1setBuildPoint
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    Builder_getBuildPoint
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_Builder_1getBuildPoint
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    Builder_makeEntryPoint
 * Signature: ([BLjava/lang/String;)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_Builder_1makeEntryPoint
  (JNIEnv *, jclass, jbyteArray, jstring);

/*
 * Class:     Java_Main
 * Method:    Builder_makeFunctionEntry
 * Signature: ([BIJLjava/lang/String;[J[[I[[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_Builder_1makeFunctionEntry
  (JNIEnv *, jclass, jbyteArray, jint, jlong, jstring, jlongArray, jobjectArray, jobjectArray);

/*
 * Class:     Java_Main
 * Method:    Builder_makeReturn
 * Signature: ([BZJ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_Builder_1makeReturn
  (JNIEnv *, jclass, jbyteArray, jboolean, jlong);

/*
 * Class:     Java_Main
 * Method:    Builder_leaveFunction
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_Builder_1leaveFunction
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    Builder_makeDiscard
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_Builder_1makeDiscard
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    Builder_createVariable
 * Signature: ([BIIJLjava/lang/String;J)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_Builder_1createVariable
  (JNIEnv *, jclass, jbyteArray, jint, jint, jlong, jstring, jlong);

/*
 * Class:     Java_Main
 * Method:    Builder_createUndefined
 * Signature: ([BJ)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_Builder_1createUndefined
  (JNIEnv *, jclass, jbyteArray, jlong);

/*
 * Class:     Java_Main
 * Method:    Builder_createStore
 * Signature: ([BJJIIJ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_Builder_1createStore
  (JNIEnv *, jclass, jbyteArray, jlong, jlong, jint, jint, jlong);

/*
 * Class:     Java_Main
 * Method:    Builder_createLoad
 * Signature: ([BJIIIJ)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_Builder_1createLoad
  (JNIEnv *, jclass, jbyteArray, jlong, jint, jint, jint, jlong);

/*
 * Class:     Java_Main
 * Method:    Builder_createAccessChain
 * Signature: ([BIJ[J)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_Builder_1createAccessChain
  (JNIEnv *, jclass, jbyteArray, jint, jlong, jlongArray);

/*
 * Class:     Java_Main
 * Method:    Builder_createArrayLength
 * Signature: ([BJJ)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_Builder_1createArrayLength
  (JNIEnv *, jclass, jbyteArray, jlong, jlong);

/*
 * Class:     Java_Main
 * Method:    Builder_createCooperativeMatrixLength
 * Signature: ([BJ)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_Builder_1createCooperativeMatrixLength
  (JNIEnv *, jclass, jbyteArray, jlong);

/*
 * Class:     Java_Main
 * Method:    Builder_createCompositeExtract
 * Signature: ([BJJJ)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_Builder_1createCompositeExtract___3BJJJ
  (JNIEnv *, jclass, jbyteArray, jlong, jlong, jlong);

/*
 * Class:     Java_Main
 * Method:    Builder_createCompositeExtract
 * Signature: ([BJJ[J)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_Builder_1createCompositeExtract___3BJJ_3J
  (JNIEnv *, jclass, jbyteArray, jlong, jlong, jlongArray);

/*
 * Class:     Java_Main
 * Method:    Builder_createCompositeInsert
 * Signature: ([BJJJJ)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_Builder_1createCompositeInsert___3BJJJJ
  (JNIEnv *, jclass, jbyteArray, jlong, jlong, jlong, jlong);

/*
 * Class:     Java_Main
 * Method:    Builder_createCompositeInsert
 * Signature: ([BJJJ[J)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_Builder_1createCompositeInsert___3BJJJ_3J
  (JNIEnv *, jclass, jbyteArray, jlong, jlong, jlong, jlongArray);

/*
 * Class:     Java_Main
 * Method:    Builder_createVectorExtractDynamic
 * Signature: ([BJJJ)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_Builder_1createVectorExtractDynamic
  (JNIEnv *, jclass, jbyteArray, jlong, jlong, jlong);

/*
 * Class:     Java_Main
 * Method:    Builder_createVectorInsertDynamic
 * Signature: ([BJJJJ)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_Builder_1createVectorInsertDynamic
  (JNIEnv *, jclass, jbyteArray, jlong, jlong, jlong, jlong);

/*
 * Class:     Java_Main
 * Method:    Builder_createNoResultOp
 * Signature: ([BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_Builder_1createNoResultOp___3BI
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    Builder_createNoResultOp
 * Signature: ([BIJ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_Builder_1createNoResultOp___3BIJ
  (JNIEnv *, jclass, jbyteArray, jint, jlong);

/*
 * Class:     Java_Main
 * Method:    Builder_createNoResultOp
 * Signature: ([BI[J)V
 */
JNIEXPORT void JNICALL Java_Java_Main_Builder_1createNoResultOp___3BI_3J
  (JNIEnv *, jclass, jbyteArray, jint, jlongArray);

/*
 * Class:     Java_Main
 * Method:    Builder_createNoResultOp
 * Signature: ([BI[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_Builder_1createNoResultOp___3BI_3B
  (JNIEnv *, jclass, jbyteArray, jint, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    Builder_createControlBarrier
 * Signature: ([BIII)V
 */
JNIEXPORT void JNICALL Java_Java_Main_Builder_1createControlBarrier
  (JNIEnv *, jclass, jbyteArray, jint, jint, jint);

/*
 * Class:     Java_Main
 * Method:    Builder_createMemoryBarrier
 * Signature: ([BJJ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_Builder_1createMemoryBarrier
  (JNIEnv *, jclass, jbyteArray, jlong, jlong);

/*
 * Class:     Java_Main
 * Method:    Builder_createUnaryOp
 * Signature: ([BIJJ)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_Builder_1createUnaryOp
  (JNIEnv *, jclass, jbyteArray, jint, jlong, jlong);

/*
 * Class:     Java_Main
 * Method:    Builder_createBinOp
 * Signature: ([BIJJJ)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_Builder_1createBinOp
  (JNIEnv *, jclass, jbyteArray, jint, jlong, jlong, jlong);

/*
 * Class:     Java_Main
 * Method:    Builder_createTriOp
 * Signature: ([BIJJJJ)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_Builder_1createTriOp
  (JNIEnv *, jclass, jbyteArray, jint, jlong, jlong, jlong, jlong);

/*
 * Class:     Java_Main
 * Method:    Builder_createOp
 * Signature: ([BIJ[J)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_Builder_1createOp___3BIJ_3J
  (JNIEnv *, jclass, jbyteArray, jint, jlong, jlongArray);

/*
 * Class:     Java_Main
 * Method:    Builder_createOp
 * Signature: ([BIJ[B)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_Builder_1createOp___3BIJ_3B
  (JNIEnv *, jclass, jbyteArray, jint, jlong, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    Builder_createFunctionCall
 * Signature: ([B[B[J)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_Builder_1createFunctionCall
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jlongArray);

/*
 * Class:     Java_Main
 * Method:    Builder_createSpecConstantOp
 * Signature: ([BIJ[J[J)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_Builder_1createSpecConstantOp
  (JNIEnv *, jclass, jbyteArray, jint, jlong, jlongArray, jlongArray);

/*
 * Class:     Java_Main
 * Method:    Builder_createRvalueSwizzle
 * Signature: ([BIJJ[J)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_Builder_1createRvalueSwizzle
  (JNIEnv *, jclass, jbyteArray, jint, jlong, jlong, jlongArray);

/*
 * Class:     Java_Main
 * Method:    Builder_createLvalueSwizzle
 * Signature: ([BJJJ[J)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_Builder_1createLvalueSwizzle
  (JNIEnv *, jclass, jbyteArray, jlong, jlong, jlong, jlongArray);

/*
 * Class:     Java_Main
 * Method:    Builder_setPrecision
 * Signature: ([BJI)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_Builder_1setPrecision
  (JNIEnv *, jclass, jbyteArray, jlong, jint);

/*
 * Class:     Java_Main
 * Method:    Builder_promoteScalar
 * Signature: ([BI[J[J)V
 */
JNIEXPORT void JNICALL Java_Java_Main_Builder_1promoteScalar
  (JNIEnv *, jclass, jbyteArray, jint, jlongArray, jlongArray);

/*
 * Class:     Java_Main
 * Method:    Builder_smearScalar
 * Signature: ([BIJJ)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_Builder_1smearScalar
  (JNIEnv *, jclass, jbyteArray, jint, jlong, jlong);

/*
 * Class:     Java_Main
 * Method:    Builder_createBuiltinCall
 * Signature: ([BJJI[J)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_Builder_1createBuiltinCall
  (JNIEnv *, jclass, jbyteArray, jlong, jlong, jint, jlongArray);

/*
 * Class:     Java_Main
 * Method:    Builder_createTextureCall
 * Signature: ([BIJZZZZZ[BI)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_Builder_1createTextureCall
  (JNIEnv *, jclass, jbyteArray, jint, jlong, jboolean, jboolean, jboolean, jboolean, jboolean, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    Builder_createTextureQueryCall
 * Signature: ([BI[BZ)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_Builder_1createTextureQueryCall
  (JNIEnv *, jclass, jbyteArray, jint, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    Builder_createSamplePositionCall
 * Signature: ([BIJJ)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_Builder_1createSamplePositionCall
  (JNIEnv *, jclass, jbyteArray, jint, jlong, jlong);

/*
 * Class:     Java_Main
 * Method:    Builder_createBitFieldExtractCall
 * Signature: ([BIJJJZ)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_Builder_1createBitFieldExtractCall
  (JNIEnv *, jclass, jbyteArray, jint, jlong, jlong, jlong, jboolean);

/*
 * Class:     Java_Main
 * Method:    Builder_createBitFieldInsertCall
 * Signature: ([BIJJJJ)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_Builder_1createBitFieldInsertCall
  (JNIEnv *, jclass, jbyteArray, jint, jlong, jlong, jlong, jlong);

/*
 * Class:     Java_Main
 * Method:    Builder_createCompositeCompare
 * Signature: ([BIJJZ)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_Builder_1createCompositeCompare
  (JNIEnv *, jclass, jbyteArray, jint, jlong, jlong, jboolean);

/*
 * Class:     Java_Main
 * Method:    Builder_createCompositeConstruct
 * Signature: ([BJ[J)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_Builder_1createCompositeConstruct
  (JNIEnv *, jclass, jbyteArray, jlong, jlongArray);

/*
 * Class:     Java_Main
 * Method:    Builder_createConstructor
 * Signature: ([BI[JJ)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_Builder_1createConstructor
  (JNIEnv *, jclass, jbyteArray, jint, jlongArray, jlong);

/*
 * Class:     Java_Main
 * Method:    Builder_createMatrixConstructor
 * Signature: ([BI[JJ)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_Builder_1createMatrixConstructor
  (JNIEnv *, jclass, jbyteArray, jint, jlongArray, jlong);

/*
 * Class:     Java_Main
 * Method:    Builder_makeSwitch
 * Signature: ([BJJI[I[II[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_Builder_1makeSwitch
  (JNIEnv *, jclass, jbyteArray, jlong, jlong, jint, jintArray, jintArray, jint, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    Builder_addSwitchBreak
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_Builder_1addSwitchBreak
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    Builder_nextSwitchSegment
 * Signature: ([B[BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_Builder_1nextSwitchSegment
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    Builder_endSwitch
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_Builder_1endSwitch
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    Builder_makeNewLoop
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_Builder_1makeNewLoop
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    Builder_makeNewBlock
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_Builder_1makeNewBlock
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    Builder_createLoopContinue
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_Builder_1createLoopContinue
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    Builder_createLoopExit
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_Builder_1createLoopExit
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    Builder_closeLoop
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_Builder_1closeLoop
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    Builder_getAccessChain
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_Builder_1getAccessChain
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    Builder_setAccessChain
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_Builder_1setAccessChain
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    Builder_clearAccessChain
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_Builder_1clearAccessChain
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    Builder_setAccessChainLValue
 * Signature: ([BJ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_Builder_1setAccessChainLValue
  (JNIEnv *, jclass, jbyteArray, jlong);

/*
 * Class:     Java_Main
 * Method:    Builder_setAccessChainRValue
 * Signature: ([BJ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_Builder_1setAccessChainRValue
  (JNIEnv *, jclass, jbyteArray, jlong);

/*
 * Class:     Java_Main
 * Method:    Builder_accessChainPush
 * Signature: ([BJ[BJ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_Builder_1accessChainPush
  (JNIEnv *, jclass, jbyteArray, jlong, jbyteArray, jlong);

/*
 * Class:     Java_Main
 * Method:    Builder_accessChainPushSwizzle
 * Signature: ([B[JJ[BJ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_Builder_1accessChainPushSwizzle
  (JNIEnv *, jclass, jbyteArray, jlongArray, jlong, jbyteArray, jlong);

/*
 * Class:     Java_Main
 * Method:    Builder_accessChainPushComponent
 * Signature: ([BJJ[BJ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_Builder_1accessChainPushComponent
  (JNIEnv *, jclass, jbyteArray, jlong, jlong, jbyteArray, jlong);

/*
 * Class:     Java_Main
 * Method:    Builder_accessChainStore
 * Signature: ([BJIIJ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_Builder_1accessChainStore
  (JNIEnv *, jclass, jbyteArray, jlong, jint, jint, jlong);

/*
 * Class:     Java_Main
 * Method:    Builder_accessChainLoad
 * Signature: ([BIIJIIJ)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_Builder_1accessChainLoad
  (JNIEnv *, jclass, jbyteArray, jint, jint, jlong, jint, jint, jlong);

/*
 * Class:     Java_Main
 * Method:    Builder_isSpvLvalue
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_Builder_1isSpvLvalue
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    Builder_accessChainGetLValue
 * Signature: ([B)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_Builder_1accessChainGetLValue
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    Builder_accessChainGetInferredType
 * Signature: ([B)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_Builder_1accessChainGetInferredType
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    Builder_postProcess
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_Builder_1postProcess___3B
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    Builder_postProcessCFG
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_Builder_1postProcessCFG
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    Builder_postProcessFeatures
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_Builder_1postProcessFeatures
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    Builder_postProcess
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_Builder_1postProcess___3B_3B
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    Builder_postProcessType
 * Signature: ([B[BJ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_Builder_1postProcessType
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jlong);

/*
 * Class:     Java_Main
 * Method:    Builder_dump
 * Signature: ([B[[J)V
 */
JNIEXPORT void JNICALL Java_Java_Main_Builder_1dump
  (JNIEnv *, jclass, jbyteArray, jobjectArray);

/*
 * Class:     Java_Main
 * Method:    Builder_createBranch
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_Builder_1createBranch
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    Builder_createConditionalBranch
 * Signature: ([BJ[B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_Builder_1createConditionalBranch
  (JNIEnv *, jclass, jbyteArray, jlong, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    Builder_createLoopMerge
 * Signature: ([B[B[BJ[J)V
 */
JNIEXPORT void JNICALL Java_Java_Main_Builder_1createLoopMerge
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray, jlong, jlongArray);

/*
 * Class:     Java_Main
 * Method:    Builder_setToSpecConstCodeGenMode
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_Builder_1setToSpecConstCodeGenMode
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    Builder_setToNormalCodeGenMode
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_Builder_1setToNormalCodeGenMode
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    Builder_isInSpecConstCodeGenMode
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_Builder_1isInSpecConstCodeGenMode
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    Builder_TextureParameters
 * Signature: ()[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_Builder_1TextureParameters__
  (JNIEnv *, jclass);

/*
 * Class:     Java_Main
 * Method:    Builder_TextureParameters
 * Signature: (JJJJJJJJJJJJJJJZZ)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_Builder_1TextureParameters__JJJJJJJJJJJJJJJZZ
  (JNIEnv *, jclass, jlong, jlong, jlong, jlong, jlong, jlong, jlong, jlong, jlong, jlong, jlong, jlong, jlong, jlong, jlong, jboolean, jboolean);

/*
 * Class:     Java_Main
 * Method:    Builder_TextureParameters_setSampler
 * Signature: ([BJ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_Builder_1TextureParameters_1setSampler
  (JNIEnv *, jclass, jbyteArray, jlong);

/*
 * Class:     Java_Main
 * Method:    Builder_TextureParameters_setCoords
 * Signature: ([BJ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_Builder_1TextureParameters_1setCoords
  (JNIEnv *, jclass, jbyteArray, jlong);

/*
 * Class:     Java_Main
 * Method:    Builder_TextureParameters_setBias
 * Signature: ([BJ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_Builder_1TextureParameters_1setBias
  (JNIEnv *, jclass, jbyteArray, jlong);

/*
 * Class:     Java_Main
 * Method:    Builder_TextureParameters_setLod
 * Signature: ([BJ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_Builder_1TextureParameters_1setLod
  (JNIEnv *, jclass, jbyteArray, jlong);

/*
 * Class:     Java_Main
 * Method:    Builder_TextureParameters_setDref
 * Signature: ([BJ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_Builder_1TextureParameters_1setDref
  (JNIEnv *, jclass, jbyteArray, jlong);

/*
 * Class:     Java_Main
 * Method:    Builder_TextureParameters_setOffset
 * Signature: ([BJ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_Builder_1TextureParameters_1setOffset
  (JNIEnv *, jclass, jbyteArray, jlong);

/*
 * Class:     Java_Main
 * Method:    Builder_TextureParameters_setOffsets
 * Signature: ([BJ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_Builder_1TextureParameters_1setOffsets
  (JNIEnv *, jclass, jbyteArray, jlong);

/*
 * Class:     Java_Main
 * Method:    Builder_TextureParameters_setGradX
 * Signature: ([BJ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_Builder_1TextureParameters_1setGradX
  (JNIEnv *, jclass, jbyteArray, jlong);

/*
 * Class:     Java_Main
 * Method:    Builder_TextureParameters_setGradY
 * Signature: ([BJ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_Builder_1TextureParameters_1setGradY
  (JNIEnv *, jclass, jbyteArray, jlong);

/*
 * Class:     Java_Main
 * Method:    Builder_TextureParameters_setSample
 * Signature: ([BJ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_Builder_1TextureParameters_1setSample
  (JNIEnv *, jclass, jbyteArray, jlong);

/*
 * Class:     Java_Main
 * Method:    Builder_TextureParameters_setComponent
 * Signature: ([BJ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_Builder_1TextureParameters_1setComponent
  (JNIEnv *, jclass, jbyteArray, jlong);

/*
 * Class:     Java_Main
 * Method:    Builder_TextureParameters_setLodClamp
 * Signature: ([BJ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_Builder_1TextureParameters_1setLodClamp
  (JNIEnv *, jclass, jbyteArray, jlong);

/*
 * Class:     Java_Main
 * Method:    Builder_TextureParameters_setGranularity
 * Signature: ([BJ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_Builder_1TextureParameters_1setGranularity
  (JNIEnv *, jclass, jbyteArray, jlong);

/*
 * Class:     Java_Main
 * Method:    Builder_TextureParameters_setCoarse
 * Signature: ([BJ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_Builder_1TextureParameters_1setCoarse
  (JNIEnv *, jclass, jbyteArray, jlong);

/*
 * Class:     Java_Main
 * Method:    Builder_TextureParameters_setNonprivate
 * Signature: ([BZ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_Builder_1TextureParameters_1setNonprivate
  (JNIEnv *, jclass, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    Builder_TextureParameters_setVolatil
 * Signature: ([BZ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_Builder_1TextureParameters_1setVolatil
  (JNIEnv *, jclass, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    Builder_TextureParameters_getSampler
 * Signature: ([B)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_Builder_1TextureParameters_1getSampler
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    Builder_TextureParameters_getCoords
 * Signature: ([B)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_Builder_1TextureParameters_1getCoords
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    Builder_TextureParameters_getBias
 * Signature: ([B)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_Builder_1TextureParameters_1getBias
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    Builder_TextureParameters_getLod
 * Signature: ([B)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_Builder_1TextureParameters_1getLod
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    Builder_TextureParameters_getDref
 * Signature: ([B)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_Builder_1TextureParameters_1getDref
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    Builder_TextureParameters_getOffset
 * Signature: ([B)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_Builder_1TextureParameters_1getOffset
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    Builder_TextureParameters_getOffsets
 * Signature: ([B)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_Builder_1TextureParameters_1getOffsets
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    Builder_TextureParameters_getGradX
 * Signature: ([B)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_Builder_1TextureParameters_1getGradX
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    Builder_TextureParameters_getGradY
 * Signature: ([B)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_Builder_1TextureParameters_1getGradY
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    Builder_TextureParameters_getSample
 * Signature: ([B)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_Builder_1TextureParameters_1getSample
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    Builder_TextureParameters_getComponent
 * Signature: ([B)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_Builder_1TextureParameters_1getComponent
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    Builder_TextureParameters_getLodClamp
 * Signature: ([B)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_Builder_1TextureParameters_1getLodClamp
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    Builder_TextureParameters_getGranularity
 * Signature: ([B)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_Builder_1TextureParameters_1getGranularity
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    Builder_TextureParameters_getCoarse
 * Signature: ([B)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_Builder_1TextureParameters_1getCoarse
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    Builder_TextureParameters_getNonprivate
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_Builder_1TextureParameters_1getNonprivate
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    Builder_TextureParameters_getVolatil
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_Builder_1TextureParameters_1getVolatil
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    Builder_If
 * Signature: (JJ[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_Builder_1If
  (JNIEnv *, jclass, jlong, jlong, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    Builder_If_makeBeginElse
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_Builder_1If_1makeBeginElse
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    Builder_If_makeEndIf
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_Builder_1If_1makeEndIf
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    Builder_LoopBlocks
 * Signature: ([B[B[B[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_Builder_1LoopBlocks
  (JNIEnv *, jclass, jbyteArray, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    Builder_LoopBlocks_getHead
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_Builder_1LoopBlocks_1getHead
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    Builder_LoopBlocks_getBody
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_Builder_1LoopBlocks_1getBody
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    Builder_LoopBlocks_getMerge
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_Builder_1LoopBlocks_1getMerge
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    Builder_LoopBlocks_getContinue_target
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_Builder_1LoopBlocks_1getContinue_1target
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    Builder_AccessChain
 * Signature: ()[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_Builder_1AccessChain__
  (JNIEnv *, jclass);

/*
 * Class:     Java_Main
 * Method:    Builder_AccessChain
 * Signature: (J[JJ[JJJZJ[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_Builder_1AccessChain__J_3JJ_3JJJZJ_3B
  (JNIEnv *, jclass, jlong, jlongArray, jlong, jlongArray, jlong, jlong, jboolean, jlong, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    Builder_AccessChain_setBase
 * Signature: ([BJ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_Builder_1AccessChain_1setBase
  (JNIEnv *, jclass, jbyteArray, jlong);

/*
 * Class:     Java_Main
 * Method:    Builder_AccessChain_setIndexChain
 * Signature: ([B[J)V
 */
JNIEXPORT void JNICALL Java_Java_Main_Builder_1AccessChain_1setIndexChain
  (JNIEnv *, jclass, jbyteArray, jlongArray);

/*
 * Class:     Java_Main
 * Method:    Builder_AccessChain_setInstr
 * Signature: ([BJ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_Builder_1AccessChain_1setInstr
  (JNIEnv *, jclass, jbyteArray, jlong);

/*
 * Class:     Java_Main
 * Method:    Builder_AccessChain_setSwizzle
 * Signature: ([B[J)V
 */
JNIEXPORT void JNICALL Java_Java_Main_Builder_1AccessChain_1setSwizzle
  (JNIEnv *, jclass, jbyteArray, jlongArray);

/*
 * Class:     Java_Main
 * Method:    Builder_AccessChain_setComponent
 * Signature: ([BJ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_Builder_1AccessChain_1setComponent
  (JNIEnv *, jclass, jbyteArray, jlong);

/*
 * Class:     Java_Main
 * Method:    Builder_AccessChain_setPreSwizzleBaseType
 * Signature: ([BJ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_Builder_1AccessChain_1setPreSwizzleBaseType
  (JNIEnv *, jclass, jbyteArray, jlong);

/*
 * Class:     Java_Main
 * Method:    Builder_AccessChain_setIsRValue
 * Signature: ([BZ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_Builder_1AccessChain_1setIsRValue
  (JNIEnv *, jclass, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    Builder_AccessChain_setAlignment
 * Signature: ([BJ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_Builder_1AccessChain_1setAlignment
  (JNIEnv *, jclass, jbyteArray, jlong);

/*
 * Class:     Java_Main
 * Method:    Builder_AccessChain_setCoherentFlags
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_Builder_1AccessChain_1setCoherentFlags
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    Builder_AccessChain_getBase
 * Signature: ([B)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_Builder_1AccessChain_1getBase
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    Builder_AccessChain_getIndexChain
 * Signature: ([B)[J
 */
JNIEXPORT jlongArray JNICALL Java_Java_Main_Builder_1AccessChain_1getIndexChain
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    Builder_AccessChain_getInstr
 * Signature: ([B)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_Builder_1AccessChain_1getInstr
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    Builder_AccessChain_getSwizzle
 * Signature: ([B)[J
 */
JNIEXPORT jlongArray JNICALL Java_Java_Main_Builder_1AccessChain_1getSwizzle
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    Builder_AccessChain_getComponent
 * Signature: ([B)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_Builder_1AccessChain_1getComponent
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    Builder_AccessChain_getPreSwizzleBaseType
 * Signature: ([B)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_Builder_1AccessChain_1getPreSwizzleBaseType
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    Builder_AccessChain_getIsRValue
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_Builder_1AccessChain_1getIsRValue
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    Builder_AccessChain_getAlignment
 * Signature: ([B)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_Builder_1AccessChain_1getAlignment
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    Builder_AccessChain_getCoherentFlags
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_Builder_1AccessChain_1getCoherentFlags
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    Builder_AccessChain_CoherentFlags
 * Signature: ()[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_Builder_1AccessChain_1CoherentFlags
  (JNIEnv *, jclass);

/*
 * Class:     Java_Main
 * Method:    Builder_AccessChain_CoherentFlags_isVolatile
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_Builder_1AccessChain_1CoherentFlags_1isVolatile
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    Builder_AccessChain_CoherentFlags_operatorBitwiseOrAssign
 * Signature: ([B[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_Builder_1AccessChain_1CoherentFlags_1operatorBitwiseOrAssign
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    Builder_AccessChain_CoherentFlags_anyCoherent
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_Builder_1AccessChain_1CoherentFlags_1anyCoherent
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    Builder_AccessChain_CoherentFlags_clear
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_Builder_1AccessChain_1CoherentFlags_1clear
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    Builder_AccessChain_CoherentFlags_setCoherent
 * Signature: ([BJ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_Builder_1AccessChain_1CoherentFlags_1setCoherent
  (JNIEnv *, jclass, jbyteArray, jlong);

/*
 * Class:     Java_Main
 * Method:    Builder_AccessChain_CoherentFlags_setDevicecoherent
 * Signature: ([BJ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_Builder_1AccessChain_1CoherentFlags_1setDevicecoherent
  (JNIEnv *, jclass, jbyteArray, jlong);

/*
 * Class:     Java_Main
 * Method:    Builder_AccessChain_CoherentFlags_setQueuefamilycoherent
 * Signature: ([BJ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_Builder_1AccessChain_1CoherentFlags_1setQueuefamilycoherent
  (JNIEnv *, jclass, jbyteArray, jlong);

/*
 * Class:     Java_Main
 * Method:    Builder_AccessChain_CoherentFlags_setWorkgroupcoherent
 * Signature: ([BJ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_Builder_1AccessChain_1CoherentFlags_1setWorkgroupcoherent
  (JNIEnv *, jclass, jbyteArray, jlong);

/*
 * Class:     Java_Main
 * Method:    Builder_AccessChain_CoherentFlags_setSubgroupcoherent
 * Signature: ([BJ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_Builder_1AccessChain_1CoherentFlags_1setSubgroupcoherent
  (JNIEnv *, jclass, jbyteArray, jlong);

/*
 * Class:     Java_Main
 * Method:    Builder_AccessChain_CoherentFlags_setShadercallcoherent
 * Signature: ([BJ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_Builder_1AccessChain_1CoherentFlags_1setShadercallcoherent
  (JNIEnv *, jclass, jbyteArray, jlong);

/*
 * Class:     Java_Main
 * Method:    Builder_AccessChain_CoherentFlags_setNonprivate
 * Signature: ([BJ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_Builder_1AccessChain_1CoherentFlags_1setNonprivate
  (JNIEnv *, jclass, jbyteArray, jlong);

/*
 * Class:     Java_Main
 * Method:    Builder_AccessChain_CoherentFlags_setVolatil
 * Signature: ([BJ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_Builder_1AccessChain_1CoherentFlags_1setVolatil
  (JNIEnv *, jclass, jbyteArray, jlong);

/*
 * Class:     Java_Main
 * Method:    Builder_AccessChain_CoherentFlags_setIsImage
 * Signature: ([BJ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_Builder_1AccessChain_1CoherentFlags_1setIsImage
  (JNIEnv *, jclass, jbyteArray, jlong);

/*
 * Class:     Java_Main
 * Method:    Builder_AccessChain_CoherentFlags_getCoherent
 * Signature: ([B)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_Builder_1AccessChain_1CoherentFlags_1getCoherent
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    Builder_AccessChain_CoherentFlags_getDevicecoherent
 * Signature: ([B)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_Builder_1AccessChain_1CoherentFlags_1getDevicecoherent
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    Builder_AccessChain_CoherentFlags_getQueuefamilycoherent
 * Signature: ([B)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_Builder_1AccessChain_1CoherentFlags_1getQueuefamilycoherent
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    Builder_AccessChain_CoherentFlags_getWorkgroupcoherent
 * Signature: ([B)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_Builder_1AccessChain_1CoherentFlags_1getWorkgroupcoherent
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    Builder_AccessChain_CoherentFlags_getSubgroupcoherent
 * Signature: ([B)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_Builder_1AccessChain_1CoherentFlags_1getSubgroupcoherent
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    Builder_AccessChain_CoherentFlags_getShadercallcoherent
 * Signature: ([B)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_Builder_1AccessChain_1CoherentFlags_1getShadercallcoherent
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    Builder_AccessChain_CoherentFlags_getNonprivate
 * Signature: ([B)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_Builder_1AccessChain_1CoherentFlags_1getNonprivate
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    Builder_AccessChain_CoherentFlags_getVolatil
 * Signature: ([B)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_Builder_1AccessChain_1CoherentFlags_1getVolatil
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    Builder_AccessChain_CoherentFlags_getIsImage
 * Signature: ([B)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_Builder_1AccessChain_1CoherentFlags_1getIsImage
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    SpvOptions
 * Signature: ()[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_SpvOptions
  (JNIEnv *, jclass);

/*
 * Class:     Java_Main
 * Method:    SpvOptions_setGenerateDebugInfo
 * Signature: ([BZ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_SpvOptions_1setGenerateDebugInfo
  (JNIEnv *, jclass, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    SpvOptions_setStripDebugInfo
 * Signature: ([BZ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_SpvOptions_1setStripDebugInfo
  (JNIEnv *, jclass, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    SpvOptions_setDisableOptimizer
 * Signature: ([BZ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_SpvOptions_1setDisableOptimizer
  (JNIEnv *, jclass, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    SpvOptions_setOptimizeSize
 * Signature: ([BZ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_SpvOptions_1setOptimizeSize
  (JNIEnv *, jclass, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    SpvOptions_setDisassemble
 * Signature: ([BZ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_SpvOptions_1setDisassemble
  (JNIEnv *, jclass, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    SpvOptions_setValidate
 * Signature: ([BZ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_SpvOptions_1setValidate
  (JNIEnv *, jclass, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    SpvOptions_getGenerateDebugInfo
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_SpvOptions_1getGenerateDebugInfo
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    SpvOptions_getStripDebugInfo
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_SpvOptions_1getStripDebugInfo
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    SpvOptions_getDisableOptimizer
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_SpvOptions_1getDisableOptimizer
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    SpvOptions_getOptimizeSize
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_SpvOptions_1getOptimizeSize
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    SpvOptions_getDisassemble
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_SpvOptions_1getDisassemble
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    SpvOptions_getValidate
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_SpvOptions_1getValidate
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    OperandParameters
 * Signature: ()[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_OperandParameters
  (JNIEnv *, jclass);

/*
 * Class:     Java_Main
 * Method:    OperandParameters_push
 * Signature: ([BILjava/lang/String;Z)V
 */
JNIEXPORT void JNICALL Java_Java_Main_OperandParameters_1push
  (JNIEnv *, jclass, jbyteArray, jint, jstring, jboolean);

/*
 * Class:     Java_Main
 * Method:    OperandParameters_setOptional
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_OperandParameters_1setOptional
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    OperandParameters_getClass
 * Signature: ([BI)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_OperandParameters_1getClass
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    OperandParameters_getDesc
 * Signature: ([BI)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_Java_Main_OperandParameters_1getDesc
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    OperandParameters_isOptional
 * Signature: ([BI)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_OperandParameters_1isOptional
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    OperandParameters_getNum
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_OperandParameters_1getNum
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    EnumParameters
 * Signature: ()[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_EnumParameters
  (JNIEnv *, jclass);

/*
 * Class:     Java_Main
 * Method:    EnumParameters_setDesc
 * Signature: ([BLjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_EnumParameters_1setDesc
  (JNIEnv *, jclass, jbyteArray, jstring);

/*
 * Class:     Java_Main
 * Method:    EnumParameters_getDesc
 * Signature: ([B)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_Java_Main_EnumParameters_1getDesc
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    EnumDefinition
 * Signature: ()[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_EnumDefinition
  (JNIEnv *, jclass);

/*
 * Class:     Java_Main
 * Method:    EnumDefinition_set
 * Signature: ([BILJava/Main/String_Int;[BZ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_EnumDefinition_1set
  (JNIEnv *, jclass, jbyteArray, jint, jobject, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    EnumDefinition_setOperands
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_EnumDefinition_1setOperands
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    EnumDefinition_setCeiling
 * Signature: ([BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_EnumDefinition_1setCeiling
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    EnumDefinition_setBitmask
 * Signature: ([BZ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_EnumDefinition_1setBitmask
  (JNIEnv *, jclass, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    EnumDefinition_setGetName
 * Signature: ([BLJava/Main/String_Int;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_EnumDefinition_1setGetName
  (JNIEnv *, jclass, jbyteArray, jobject);

/*
 * Class:     Java_Main
 * Method:    EnumDefinition_setEnumParams
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_EnumDefinition_1setEnumParams
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    EnumDefinition_setOperandParams
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_EnumDefinition_1setOperandParams
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    EnumDefinition_getCeiling
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_EnumDefinition_1getCeiling
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    EnumDefinition_getBitmask
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_EnumDefinition_1getBitmask
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    EnumDefinition_getGetName
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_EnumDefinition_1getGetName
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    EnumDefinition_getEnumParams
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_EnumDefinition_1getEnumParams
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    EnumDefinition_getOperandParams
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_EnumDefinition_1getOperandParams
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    InstructionParameters
 * Signature: ()[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_InstructionParameters
  (JNIEnv *, jclass);

/*
 * Class:     Java_Main
 * Method:    InstructionParameters_setResultAndType
 * Signature: ([BZZ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_InstructionParameters_1setResultAndType
  (JNIEnv *, jclass, jbyteArray, jboolean, jboolean);

/*
 * Class:     Java_Main
 * Method:    InstructionParameters_hasResult
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_InstructionParameters_1hasResult
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    InstructionParameters_hasType
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_InstructionParameters_1hasType
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    InstructionParameters_setOpDesc
 * Signature: ([BLjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_InstructionParameters_1setOpDesc
  (JNIEnv *, jclass, jbyteArray, jstring);

/*
 * Class:     Java_Main
 * Method:    InstructionParameters_setOpClass
 * Signature: ([BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_InstructionParameters_1setOpClass
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    InstructionParameters_setOperands
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_InstructionParameters_1setOperands
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    InstructionParameters_getOpDesc
 * Signature: ([B)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_Java_Main_InstructionParameters_1getOpDesc
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    InstructionParameters_getOpClass
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_InstructionParameters_1getOpClass
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    InstructionParameters_getOperands
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_InstructionParameters_1getOperands
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    IdImmediate
 * Signature: (ZJ)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_IdImmediate
  (JNIEnv *, jclass, jboolean, jlong);

/*
 * Class:     Java_Main
 * Method:    IdImmediate_setIsId
 * Signature: ([BZ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_IdImmediate_1setIsId
  (JNIEnv *, jclass, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    IdImmediate_setWord
 * Signature: ([BJ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_IdImmediate_1setWord
  (JNIEnv *, jclass, jbyteArray, jlong);

/*
 * Class:     Java_Main
 * Method:    IdImmediate_getIsId
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_IdImmediate_1getIsId
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    IdImmediate_getWord
 * Signature: ([B)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_IdImmediate_1getWord
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    Instruction
 * Signature: (JJI)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_Instruction__JJI
  (JNIEnv *, jclass, jlong, jlong, jint);

/*
 * Class:     Java_Main
 * Method:    Instruction
 * Signature: (I)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_Instruction__I
  (JNIEnv *, jclass, jint);

/*
 * Class:     Java_Main
 * Method:    Instruction_addIdOperand
 * Signature: ([BJ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_Instruction_1addIdOperand
  (JNIEnv *, jclass, jbyteArray, jlong);

/*
 * Class:     Java_Main
 * Method:    Instruction_addImmediateOperand
 * Signature: ([BJ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_Instruction_1addImmediateOperand
  (JNIEnv *, jclass, jbyteArray, jlong);

/*
 * Class:     Java_Main
 * Method:    Instruction_setImmediateOperand
 * Signature: ([BJJ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_Instruction_1setImmediateOperand
  (JNIEnv *, jclass, jbyteArray, jlong, jlong);

/*
 * Class:     Java_Main
 * Method:    Instruction_addStringOperand
 * Signature: ([BLjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_Instruction_1addStringOperand
  (JNIEnv *, jclass, jbyteArray, jstring);

/*
 * Class:     Java_Main
 * Method:    Instruction_isIdOperand
 * Signature: ([BI)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_Instruction_1isIdOperand
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    Instruction_setBlock
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_Instruction_1setBlock
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    Instruction_getBlock
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_Instruction_1getBlock
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    Instruction_getOpCode
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_Instruction_1getOpCode
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    Instruction_getNumOperands
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_Instruction_1getNumOperands
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    Instruction_getResultId
 * Signature: ([B)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_Instruction_1getResultId
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    Instruction_getTypeId
 * Signature: ([B)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_Instruction_1getTypeId
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    Instruction_getIdOperand
 * Signature: ([BI)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_Instruction_1getIdOperand
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    Instruction_getImmediateOperand
 * Signature: ([BI)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_Instruction_1getImmediateOperand
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    Instruction_dump
 * Signature: ([B[[J)V
 */
JNIEXPORT void JNICALL Java_Java_Main_Instruction_1dump
  (JNIEnv *, jclass, jbyteArray, jobjectArray);

/*
 * Class:     Java_Main
 * Method:    Block
 * Signature: (J[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_Block
  (JNIEnv *, jclass, jlong, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    Block_getId
 * Signature: ([B)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_Block_1getId
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    Block_getParent
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_Block_1getParent
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    Block_addInstruction
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_Block_1addInstruction
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    Block_addPredecessor
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_Block_1addPredecessor
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    Block_addLocalVariable
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_Block_1addLocalVariable
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    Block_getPredecessors
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_Block_1getPredecessors
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    Block_getSuccessors
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_Block_1getSuccessors
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    Block_getInstructions
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_Block_1getInstructions
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    Block_getLocalVariables
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_Block_1getLocalVariables
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    Block_setUnreachable
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_Block_1setUnreachable
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    Block_isUnreachable
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_Block_1isUnreachable
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    Block_getMergeInstruction
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_Block_1getMergeInstruction
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    Block_rewriteAsCanonicalUnreachableMerge
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_Block_1rewriteAsCanonicalUnreachableMerge
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    Block_rewriteAsCanonicalUnreachableContinue
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_Block_1rewriteAsCanonicalUnreachableContinue
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    Block_isTerminated
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_Block_1isTerminated
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    Block_dump
 * Signature: ([B[[J)V
 */
JNIEXPORT void JNICALL Java_Java_Main_Block_1dump
  (JNIEnv *, jclass, jbyteArray, jobjectArray);

/*
 * Class:     Java_Main
 * Method:    Function
 * Signature: (JJJJ[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_Function
  (JNIEnv *, jclass, jlong, jlong, jlong, jlong, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    Function_getId
 * Signature: ([B)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_Function_1getId
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    Function_getParamId
 * Signature: ([BI)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_Function_1getParamId
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    Function_getParamType
 * Signature: ([BI)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_Function_1getParamType
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    Function_addBlock
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_Function_1addBlock
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    Function_removeBlock
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_Function_1removeBlock
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    Function_getParent
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_Function_1getParent
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    Function_getEntryBlock
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_Function_1getEntryBlock
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    Function_getLastBlock
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_Function_1getLastBlock
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    Function_getBlocks
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_Function_1getBlocks
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    Function_addLocalVariable
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_Function_1addLocalVariable
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    Function_getReturnType
 * Signature: ([B)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_Function_1getReturnType
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    Function_setReturnPrecision
 * Signature: ([BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_Function_1setReturnPrecision
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    Function_getReturnPrecision
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_Function_1getReturnPrecision
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    Function_setImplicitThis
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_Function_1setImplicitThis
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    Function_hasImplicitThis
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_Function_1hasImplicitThis
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    Function_addParamPrecision
 * Signature: ([BJI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_Function_1addParamPrecision
  (JNIEnv *, jclass, jbyteArray, jlong, jint);

/*
 * Class:     Java_Main
 * Method:    Function_getParamPrecision
 * Signature: ([BJ)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_Function_1getParamPrecision
  (JNIEnv *, jclass, jbyteArray, jlong);

/*
 * Class:     Java_Main
 * Method:    Function_dump
 * Signature: ([B[[J)V
 */
JNIEXPORT void JNICALL Java_Java_Main_Function_1dump
  (JNIEnv *, jclass, jbyteArray, jobjectArray);

/*
 * Class:     Java_Main
 * Method:    Module
 * Signature: ()[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_Module
  (JNIEnv *, jclass);

/*
 * Class:     Java_Main
 * Method:    Module_addFunction
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_Module_1addFunction
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    Module_mapInstruction
 * Signature: ([B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_Module_1mapInstruction
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    Module_getInstruction
 * Signature: ([BJ)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_Module_1getInstruction
  (JNIEnv *, jclass, jbyteArray, jlong);

/*
 * Class:     Java_Main
 * Method:    Module_getFunctions
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_Module_1getFunctions
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    Module_getTypeId
 * Signature: ([BJ)J
 */
JNIEXPORT jlong JNICALL Java_Java_Main_Module_1getTypeId
  (JNIEnv *, jclass, jbyteArray, jlong);

/*
 * Class:     Java_Main
 * Method:    Module_getStorageClass
 * Signature: ([BJ)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_Module_1getStorageClass
  (JNIEnv *, jclass, jbyteArray, jlong);

/*
 * Class:     Java_Main
 * Method:    Module_dump
 * Signature: ([B[[J)V
 */
JNIEXPORT void JNICALL Java_Java_Main_Module_1dump
  (JNIEnv *, jclass, jbyteArray, jobjectArray);

/*
 * Class:     Java_Main
 * Method:    CString_Int_op
 * Signature: ([BI)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_Java_Main_CString_1Int_1op
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    GetVersion
 * Signature: ()[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_GetVersion
  (JNIEnv *, jclass);

/*
 * Class:     Java_Main
 * Method:    GetEsslVersionString
 * Signature: ()Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_Java_Main_GetEsslVersionString
  (JNIEnv *, jclass);

/*
 * Class:     Java_Main
 * Method:    GetGlslVersionString
 * Signature: ()Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_Java_Main_GetGlslVersionString
  (JNIEnv *, jclass);

/*
 * Class:     Java_Main
 * Method:    GetKhronosToolId
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_Java_Main_GetKhronosToolId
  (JNIEnv *, jclass);

/*
 * Class:     Java_Main
 * Method:    InitializeProcess
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_InitializeProcess
  (JNIEnv *, jclass);

/*
 * Class:     Java_Main
 * Method:    FinalizeProcess
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_Java_Main_FinalizeProcess
  (JNIEnv *, jclass);

/*
 * Class:     Java_Main
 * Method:    ConstructCompiler
 * Signature: (II)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_ConstructCompiler
  (JNIEnv *, jclass, jint, jint);

/*
 * Class:     Java_Main
 * Method:    ConstructLinker
 * Signature: (II)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_ConstructLinker
  (JNIEnv *, jclass, jint, jint);

/*
 * Class:     Java_Main
 * Method:    ConstructBindings
 * Signature: ()[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_ConstructBindings
  (JNIEnv *, jclass);

/*
 * Class:     Java_Main
 * Method:    DeleteLinker
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_DeleteLinker
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    DeleteBindingList
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_DeleteBindingList
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    ConstructUniformMap
 * Signature: ()[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_ConstructUniformMap
  (JNIEnv *, jclass);

/*
 * Class:     Java_Main
 * Method:    DeleteCompiler
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_DeleteCompiler
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    DeleteUniformMap
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_DeleteUniformMap
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    GetStorageQualifierString
 * Signature: (I)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_Java_Main_GetStorageQualifierString
  (JNIEnv *, jclass, jint);

/*
 * Class:     Java_Main
 * Method:    GetPrecisionQualifierString
 * Signature: (I)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_Java_Main_GetPrecisionQualifierString
  (JNIEnv *, jclass, jint);

/*
 * Class:     Java_Main
 * Method:    GetBuiltInVariableString
 * Signature: (I)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_Java_Main_GetBuiltInVariableString
  (JNIEnv *, jclass, jint);

/*
 * Class:     Java_Main
 * Method:    isTypeSignedInt
 * Signature: (I)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_isTypeSignedInt
  (JNIEnv *, jclass, jint);

/*
 * Class:     Java_Main
 * Method:    isTypeUnsignedInt
 * Signature: (I)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_isTypeUnsignedInt
  (JNIEnv *, jclass, jint);

/*
 * Class:     Java_Main
 * Method:    isTypeInt
 * Signature: (I)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_isTypeInt
  (JNIEnv *, jclass, jint);

/*
 * Class:     Java_Main
 * Method:    isTypeFloat
 * Signature: (I)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_isTypeFloat
  (JNIEnv *, jclass, jint);

/*
 * Class:     Java_Main
 * Method:    getTypeRank
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_getTypeRank
  (JNIEnv *, jclass, jint);

/*
 * Class:     Java_Main
 * Method:    GetThreadPoolAllocator
 * Signature: ()[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_GetThreadPoolAllocator
  (JNIEnv *, jclass);

/*
 * Class:     Java_Main
 * Method:    SetThreadPoolAllocator
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_SetThreadPoolAllocator
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    IsAnonymous
 * Signature: (Ljava/lang/String;)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_IsAnonymous
  (JNIEnv *, jclass, jstring);

/*
 * Class:     Java_Main
 * Method:    RemoveAllTreeNodes
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_RemoveAllTreeNodes
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    PropagateNoContraction
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_PropagateNoContraction
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    SameSpecializationConstants
 * Signature: ([B[B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_SameSpecializationConstants
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    ProfileName
 * Signature: (I)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_Java_Main_ProfileName
  (JNIEnv *, jclass, jint);

/*
 * Class:     Java_Main
 * Method:    Min
 * Signature: ([B[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_Min
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    Max
 * Signature: ([B[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_Max
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    String
 * Signature: (II)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_Java_Main_String
  (JNIEnv *, jclass, jint, jint);

/*
 * Class:     Java_Main
 * Method:    IsPow2
 * Signature: ([B)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_IsPow2
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    RoundToPow2
 * Signature: ([BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_RoundToPow2
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    IsMultipleOfPow2
 * Signature: ([BI)Z
 */
JNIEXPORT jboolean JNICALL Java_Java_Main_IsMultipleOfPow2
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    GetSpirvVersion
 * Signature: ([Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_GetSpirvVersion
  (JNIEnv *, jclass, jobjectArray);

/*
 * Class:     Java_Main
 * Method:    GetSpirvGeneratorVersion
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_Java_Main_GetSpirvGeneratorVersion
  (JNIEnv *, jclass);

/*
 * Class:     Java_Main
 * Method:    GlslangToSpv
 * Signature: ([B[[J[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_GlslangToSpv___3B_3_3J_3B
  (JNIEnv *, jclass, jbyteArray, jobjectArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    GlslangToSpv
 * Signature: ([B[[J[B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_GlslangToSpv___3B_3_3J_3B_3B
  (JNIEnv *, jclass, jbyteArray, jobjectArray, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    OutputSpvBin
 * Signature: ([JLjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_OutputSpvBin
  (JNIEnv *, jclass, jlongArray, jstring);

/*
 * Class:     Java_Main
 * Method:    OutputSpvHex
 * Signature: ([JLjava/lang/String;Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_OutputSpvHex
  (JNIEnv *, jclass, jlongArray, jstring, jstring);

/*
 * Class:     Java_Main
 * Method:    SpirvToolsDisassemble
 * Signature: (Ljava/io/OutputStream;[J)V
 */
JNIEXPORT void JNICALL Java_Java_Main_SpirvToolsDisassemble
  (JNIEnv *, jclass, jobject, jlongArray);

/*
 * Class:     Java_Main
 * Method:    SpirvToolsValidate
 * Signature: ([B[J[BZ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_SpirvToolsValidate
  (JNIEnv *, jclass, jbyteArray, jlongArray, jbyteArray, jboolean);

/*
 * Class:     Java_Main
 * Method:    SpirvToolsTransform
 * Signature: ([B[J[B[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_SpirvToolsTransform
  (JNIEnv *, jclass, jbyteArray, jlongArray, jbyteArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    SpirvToolsStripDebugInfo
 * Signature: ([B[J[B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_SpirvToolsStripDebugInfo
  (JNIEnv *, jclass, jbyteArray, jlongArray, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    BitwiseCast
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_BitwiseCast
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    Disassemble
 * Signature: (Ljava/io/OutputStream;[J)V
 */
JNIEXPORT void JNICALL Java_Java_Main_Disassemble
  (JNIEnv *, jclass, jobject, jlongArray);

/*
 * Class:     Java_Main
 * Method:    Parameterize
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_Java_Main_Parameterize
  (JNIEnv *, jclass);

/*
 * Class:     Java_Main
 * Method:    SourceString
 * Signature: (I)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_Java_Main_SourceString
  (JNIEnv *, jclass, jint);

/*
 * Class:     Java_Main
 * Method:    AddressingString
 * Signature: (I)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_Java_Main_AddressingString
  (JNIEnv *, jclass, jint);

/*
 * Class:     Java_Main
 * Method:    MemoryString
 * Signature: (I)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_Java_Main_MemoryString
  (JNIEnv *, jclass, jint);

/*
 * Class:     Java_Main
 * Method:    ExecutionModelString
 * Signature: (I)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_Java_Main_ExecutionModelString
  (JNIEnv *, jclass, jint);

/*
 * Class:     Java_Main
 * Method:    ExecutionModeString
 * Signature: (I)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_Java_Main_ExecutionModeString
  (JNIEnv *, jclass, jint);

/*
 * Class:     Java_Main
 * Method:    StorageClassString
 * Signature: (I)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_Java_Main_StorageClassString
  (JNIEnv *, jclass, jint);

/*
 * Class:     Java_Main
 * Method:    DecorationString
 * Signature: (I)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_Java_Main_DecorationString
  (JNIEnv *, jclass, jint);

/*
 * Class:     Java_Main
 * Method:    BuiltInString
 * Signature: (I)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_Java_Main_BuiltInString
  (JNIEnv *, jclass, jint);

/*
 * Class:     Java_Main
 * Method:    DimensionString
 * Signature: (I)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_Java_Main_DimensionString
  (JNIEnv *, jclass, jint);

/*
 * Class:     Java_Main
 * Method:    SelectControlString
 * Signature: (I)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_Java_Main_SelectControlString
  (JNIEnv *, jclass, jint);

/*
 * Class:     Java_Main
 * Method:    LoopControlString
 * Signature: (I)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_Java_Main_LoopControlString
  (JNIEnv *, jclass, jint);

/*
 * Class:     Java_Main
 * Method:    FunctionControlString
 * Signature: (I)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_Java_Main_FunctionControlString
  (JNIEnv *, jclass, jint);

/*
 * Class:     Java_Main
 * Method:    SamplerAddressingModeString
 * Signature: (I)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_Java_Main_SamplerAddressingModeString
  (JNIEnv *, jclass, jint);

/*
 * Class:     Java_Main
 * Method:    SamplerFilterModeString
 * Signature: (I)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_Java_Main_SamplerFilterModeString
  (JNIEnv *, jclass, jint);

/*
 * Class:     Java_Main
 * Method:    ImageFormatString
 * Signature: (I)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_Java_Main_ImageFormatString
  (JNIEnv *, jclass, jint);

/*
 * Class:     Java_Main
 * Method:    ImageChannelOrderString
 * Signature: (I)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_Java_Main_ImageChannelOrderString
  (JNIEnv *, jclass, jint);

/*
 * Class:     Java_Main
 * Method:    ImageChannelTypeString
 * Signature: (I)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_Java_Main_ImageChannelTypeString
  (JNIEnv *, jclass, jint);

/*
 * Class:     Java_Main
 * Method:    ImageChannelDataTypeString
 * Signature: (I)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_Java_Main_ImageChannelDataTypeString
  (JNIEnv *, jclass, jint);

/*
 * Class:     Java_Main
 * Method:    ImageOperandsString
 * Signature: (I)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_Java_Main_ImageOperandsString
  (JNIEnv *, jclass, jint);

/*
 * Class:     Java_Main
 * Method:    ImageOperands
 * Signature: (I)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_Java_Main_ImageOperands
  (JNIEnv *, jclass, jint);

/*
 * Class:     Java_Main
 * Method:    FPFastMathString
 * Signature: (I)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_Java_Main_FPFastMathString
  (JNIEnv *, jclass, jint);

/*
 * Class:     Java_Main
 * Method:    FPRoundingModeString
 * Signature: (I)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_Java_Main_FPRoundingModeString
  (JNIEnv *, jclass, jint);

/*
 * Class:     Java_Main
 * Method:    LinkageTypeString
 * Signature: (I)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_Java_Main_LinkageTypeString
  (JNIEnv *, jclass, jint);

/*
 * Class:     Java_Main
 * Method:    FuncParamAttrString
 * Signature: (I)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_Java_Main_FuncParamAttrString
  (JNIEnv *, jclass, jint);

/*
 * Class:     Java_Main
 * Method:    AccessQualifierString
 * Signature: (I)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_Java_Main_AccessQualifierString
  (JNIEnv *, jclass, jint);

/*
 * Class:     Java_Main
 * Method:    MemorySemanticsString
 * Signature: (I)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_Java_Main_MemorySemanticsString
  (JNIEnv *, jclass, jint);

/*
 * Class:     Java_Main
 * Method:    MemoryAccessString
 * Signature: (I)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_Java_Main_MemoryAccessString
  (JNIEnv *, jclass, jint);

/*
 * Class:     Java_Main
 * Method:    ExecutionScopeString
 * Signature: (I)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_Java_Main_ExecutionScopeString
  (JNIEnv *, jclass, jint);

/*
 * Class:     Java_Main
 * Method:    GroupOperationString
 * Signature: (I)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_Java_Main_GroupOperationString
  (JNIEnv *, jclass, jint);

/*
 * Class:     Java_Main
 * Method:    KernelEnqueueFlagsString
 * Signature: (I)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_Java_Main_KernelEnqueueFlagsString
  (JNIEnv *, jclass, jint);

/*
 * Class:     Java_Main
 * Method:    KernelProfilingInfoString
 * Signature: (I)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_Java_Main_KernelProfilingInfoString
  (JNIEnv *, jclass, jint);

/*
 * Class:     Java_Main
 * Method:    CapabilityString
 * Signature: (I)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_Java_Main_CapabilityString
  (JNIEnv *, jclass, jint);

/*
 * Class:     Java_Main
 * Method:    OpcodeString
 * Signature: (I)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_Java_Main_OpcodeString
  (JNIEnv *, jclass, jint);

/*
 * Class:     Java_Main
 * Method:    ScopeString
 * Signature: (I)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_Java_Main_ScopeString
  (JNIEnv *, jclass, jint);

/*
 * Class:     Java_Main
 * Method:    GetOperandDesc
 * Signature: (I)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_Java_Main_GetOperandDesc
  (JNIEnv *, jclass, jint);

/*
 * Class:     Java_Main
 * Method:    PrintImmediateRow
 * Signature: (ILjava/lang/String;[BZZ)V
 */
JNIEXPORT void JNICALL Java_Java_Main_PrintImmediateRow
  (JNIEnv *, jclass, jint, jstring, jbyteArray, jboolean, jboolean);

/*
 * Class:     Java_Main
 * Method:    PrintOperands
 * Signature: ([BI)V
 */
JNIEXPORT void JNICALL Java_Java_Main_PrintOperands
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    HasResultAndType
 * Signature: (I[Z[Z)V
 */
JNIEXPORT void JNICALL Java_Java_Main_HasResultAndType
  (JNIEnv *, jclass, jint, jbooleanArray, jbooleanArray);

/*
 * Class:     Java_Main
 * Method:    inReadableOrder
 * Signature: ([BLJava/Main/Void_BytearrayIntBytearray;)V
 */
JNIEXPORT void JNICALL Java_Java_Main_inReadableOrder
  (JNIEnv *, jclass, jbyteArray, jobject);

/*
 * Class:     Java_Main
 * Method:    TString
 * Signature: (Ljava/lang/String;)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_TString
  (JNIEnv *, jclass, jstring);

/*
 * Class:     Java_Main
 * Method:    TString_asString
 * Signature: ([B)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_Java_Main_TString_1asString
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    allocString
 * Signature: (Ljava/lang/String;)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_allocString
  (JNIEnv *, jclass, jstring);

/*
 * Class:     Java_Main
 * Method:    createArray
 * Signature: ([[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_createArray
  (JNIEnv *, jclass, jobjectArray);

/*
 * Class:     Java_Main
 * Method:    Array_size
 * Signature: ([B)I
 */
JNIEXPORT jint JNICALL Java_Java_Main_Array_1size
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    Array_get
 * Signature: ([BI)[B
 */
JNIEXPORT jbyteArray JNICALL Java_Java_Main_Array_1get
  (JNIEnv *, jclass, jbyteArray, jint);

/*
 * Class:     Java_Main
 * Method:    delete
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_Java_Main_delete
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     Java_Main
 * Method:    resetLastErrorCode
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_Java_Main_resetLastErrorCode
  (JNIEnv *, jclass);

/*
 * Class:     Java_Main
 * Method:    getLastErrorCode
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_Java_Main_getLastErrorCode
  (JNIEnv *, jclass);

/*
 * Class:     Java_Main
 * Method:    getLastErrorString
 * Signature: ()Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_Java_Main_getLastErrorString
  (JNIEnv *, jclass);

/*
 * Class:     Java_Main
 * Method:    getErrorStringFromCode
 * Signature: (I)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_Java_Main_getErrorStringFromCode
  (JNIEnv *, jclass, jint);

/*
 * Class:     Java_Main
 * Method:    setErrorMode
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_Java_Main_setErrorMode
  (JNIEnv *, jclass, jint);

/*
 * Class:     Java_Main
 * Method:    setCatchCExceptions
 * Signature: (Z)V
 */
JNIEXPORT void JNICALL Java_Java_Main_setCatchCExceptions
  (JNIEnv *, jclass, jboolean);

#ifdef __cplusplus
}
#endif
#endif
